#!/bin/sh
#
# $NetBSD: t_rmdir,v 1.6 2006/11/09 16:20:06 jmmv Exp $
#
# Copyright (c) 2005, 2006 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Julio M. Merino Vidal, developed as part of Google's Summer of Code
# 2005 program.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#

#
# Verifies that rmdir works by creating and removing directories.  Also
# checks multiple error conditions.
#

test_run() {
	test_mount

	test_name "The mount point cannot be removed"
	rmdir 2>/dev/null && die

	test_name "Non-existing directories cannot be removed"
	rmdir non-existent 2>/dev/null && die

	test_name "Removal of a single directory works"
	mkdir a || die
	eval $(stat -s ${Work_Dir})
	[ ${st_nlink} = 3 ] || die
	rmdir a || die
	eval $(stat -s ${Work_Dir})
	[ ${st_nlink} = 2 ] || die

	test_name "Removal of nested directories works"
	mkdir -p a/b/c || die
	rmdir a/b/c || die
	rmdir a/b || die
	rmdir a || die

	test_name "'.' and '..' directories cannot be removed"
	mkdir a || die
	rmdir a/. 2>/dev/null && die
	rmdir a/.. 2>/dev/null && die
	rmdir a || die

	test_name "Non-empty directories cannot be removed"
	mkdir a || die
	mkdir a/b || die
	mkdir a/c || die
	rmdir a 2>/dev/null && die
	rmdir a/b || die
	rmdir a/c || die
	rmdir a || die

	test_name "Root directory has two links after all removes"
	eval $(stat -s ${Work_Dir})
	[ ${st_nlink} = 2 ] || die

	test_name "Removal of current directory"
	mkdir a || die
	# Catch a bug that would panic the system when accessing the
	# current directory after being deleted: vop_open cannot assume
	# that open files are still linked to a directory.
	( cd a && rmdir ../a && ls >/dev/null 2>&1 ) && die
	test -e a && die

	mkdir dir || die
	mkdir dir/a || die
	echo 'rmdir dir/a' | kqueue_monitor 3 dir dir/a || die
	test_name "Deleting a directory raises NOTE_DELETE on it"
	kqueue_check dir/a NOTE_DELETE || die
	test_name "Deleting a directory raises NOTE_LINK on the parent" \
	    "directory"
	kqueue_check dir NOTE_LINK || die
	test_name "Deleting a directory raises NOTE_WRITE on the parent" \
	    "directory"
	kqueue_check dir NOTE_WRITE || die
	rmdir dir || die

	test_unmount
}

. ${SUBRDIR}/h_funcs.subr

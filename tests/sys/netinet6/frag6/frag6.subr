#-
# SPDX-License-Identifier: BSD-2-Clause
#
# Copyright (c) 2019 Netflix, Inc.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

. $(atf_get_srcdir)/../../common/vnet.subr

frag6_head()
{
	atf_set descr 'Test IPv6 fragmentation code'
	atf_set require.user root
	atf_set require.progs python3 scapy
}

frag6_body()
{
	ids=${1:="65533"}
	shift
	id=`printf "%x" ${ids}`
	if [ $$ -gt 65535 ]; then
		xl=`printf "%x" $(($$ - 65535))`
		yl="1"
	else
		xl=`printf "%x" $$`
		yl=""
	fi

	vnet_init

	ip6a="2001:db8:6666:6666:${yl}:${id}:1:${xl}"
	ip6b="2001:db8:6666:6666:${yl}:${id}:2:${xl}"

	epair=$(vnet_mkepair)
	ifconfig ${epair}a up
	ifconfig ${epair}a inet6 ${ip6a}/64

	jname="v6t-${id}-${yl}-${xl}"
	vnet_mkjail ${jname} ${epair}b
	jexec ${jname} sysctl net.inet6.ip6.dad_count=0
	jexec ${jname} ifconfig ${epair}b up
	jexec ${jname} ifconfig ${epair}b inet6 ${ip6b}/64

	# Set max fragment reassembly time to 2 seconds
	jexec ${jname} sysctl net.inet6.ip6.fraglifetime_ms=2000

	# Let IPv6 ND do its thing.
	while [ `ifconfig ${epair}a inet6 | grep -c tentative` != "0" ]; do
		sleep 0.1
	done

	# We need to try to make sure all expiry happened, otherwise there might
	# be global fragments queued.  (This still does not rule out that there
	# are no other fragments queued anywhere else in the system).
	i=0
	while test $i -lt 60; do
		nf=`sysctl -n net.inet6.ip6.frag6_nfrags`
		case ${nf} in
		0)	break ;;
		esac
		sleep 1
		i=$((i + 1))
	done
	case ${nf} in
	0)	;;
	*)	atf_fail "Global frag6_nfrags count is not zero but ${nf}" ;;
	esac

	pretestf=$2
	case "${pretestf}" in
	"")	;;
	[A-Za-z0-9_]*)
		eval ${pretestf} "${jname}" "${epair}b"
		;;
	esac

	# Clear statistics.
	jexec ${jname} netstat -z -s > /dev/null

	# Run fragment tests.
	pyname=$(atf_get ident)
	pyname=${pyname%*_[0-9]}
	atf_check -s exit:0 $(atf_get_srcdir)/${pyname}.py \
		--sendif ${epair}a \
		--recvif ${epair}a \
		--src ${ip6a} \
		--to  ${ip6b}

	checkf=$1
	case "${checkf}" in
	"")	;;
	[A-Za-z0-9_]*)
		eval ${checkf} "${jname}" "${epair}b"
		;;
	esac
}

frag6_cleanup()
{

	vnet_cleanup
}

# end

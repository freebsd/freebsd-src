# vim: filetype=sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.

# Most of the code related to the clearing of mirrors is duplicated in all
# the test cases below this directory, barring a few minor changes
# involving the device to be affected and the 'object' to use to mangle
# the contents of the mirror.
# This code is sourced into each of these test cases.

function overwrite_verify_mirror
{
	typeset AFFECTED_DEVICE=$1
	typeset OVERWRITING_DEVICE=$2

	typeset atfile=0
	set -A cksums
	set -A newcksums

	populate_dir $TESTDIR/file $FILE_COUNT $WRITE_COUNT $BLOCKSZ 0
	while (( atfile < FILE_COUNT )); do
		cksums[$atfile]=$($CKSUM ${TESTDIR}/file.${atfile})
		(( atfile = atfile + 1 ))
	done

	# unmount and export before dd
	log_must $UMOUNT $TESTDIR
	log_must $ZPOOL export $TESTPOOL

	# dd the primary side of the mirror
	log_must $DD if=$OVERWRITING_DEVICE of=$(bsddevmap $AFFECTED_DEVICE) \
		seek=8 bs=$DD_BLOCK count=$(( DD_COUNT - 8 )) conv=notrunc

	# now remount
	log_must $ZPOOL import $TESTPOOL

	atfile=0
	typeset -i failedcount=0
	while (( atfile < FILE_COUNT )); do
		newcksum=$($CKSUM $TESTDIR/file.${atfile})
		if [[ $newcksum != ${cksums[$atfile]} ]]; then
			(( failedcount = failedcount + 1 ))
		fi
		$RM -f ${files[$atfile]}
		(( atfile = atfile + 1 ))
	done

	if (( $failedcount > 0 )); then
		log_fail "of the $FILE_COUNT files $failedcount did not " \
		    "have the same checksum before and after."
	fi
}

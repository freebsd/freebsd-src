#!/bin/sh
#
# Copyright (c) 2006  The FreeBSD Project
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#

# PROVIDE: mdconfig
# REQUIRE: swap root

. /etc/rc.subr

name="mdconfig"
desc="Create and control memory disks"
stop_cmd="mdconfig_stop"
start_cmd="mdconfig_start"
start_precmd='[ -n "${_mdconfig_list}" ]'
required_modules="geom_md:g_md"

is_readonly()
{
	local _mp _ret

	_mp=$1
	_ret=`mount | while read _line; do
		case ${_line} in
		*" ${_mp} "*read-only*)
			echo "yes"
			;;

		*)
			;;
		esac;
	done`

	if [ -n "${_ret}" ]; then
		return 0
	else
		return 1
	fi
}

init_variables()
{
	local _i

	_fs=""
	_mp=""
	_dev="/dev/${_md}"
	eval _config=\$mdconfig_${_md}
	eval _newfs=\$mdconfig_${_md}_newfs

	_type=${_config##*-t\ }
	_type=${_type%%\ *}
	if [ -z "${_type}" ]; then
		err 1 "You need to specify \"-t <type>\" in mdconfig_${_md}"
	fi

	if [ "${_type}" = "vnode" ]; then
		_file=${_config##*-f\ }
		_file=${_file%%\ *}
		if [ -z "${_file}" ]; then
			err 2 "You need to specify \"-f <file>\" in mdconfig_${_md} for vnode devices"
		fi
		if [ "${_file}" != "${_file%.uzip}" ]; then
			_dev="/dev/${_md}.uzip"
		fi
		for _i in `df ${_file} 2>/dev/null`; do _fs=${_i}; done
	fi

	# Debugging help.
	debug "${_md} config: ${_config}"
	debug "${_md} type: ${_type}"
	debug "${_md} dev: ${_dev}"
	debug "${_md} file: ${_file}"
	debug "${_md} fs: ${_fs}"
	debug "${_md} newfs flags: ${_newfs}"
}

mdconfig_start()
{
	local _md _mp _config _type _dev _file _fs _newfs _fsck_cmd

	for _md in ${_mdconfig_list}; do
		init_variables ${_md}
		# Create md(4) devices of types swap, malloc and vnode if the
		# file is on the root partition.
		if [ "${_type}" != "vnode" -o "${_fs}" = "/" ]; then
			if [ "${_type}" = "vnode" ]; then
				if is_readonly ${_fs}; then
					warn "${_fs} is mounted read-only, skipping ${_md}."
					continue
				fi
				if [ "${_file}" != "${_file%.uzip}" ]; then
					load_kld -m g_uzip geom_uzip || return 3
					# sleep a bit to allow creation of /dev/mdX.uzip
					sleep 2
				fi
			fi
			if mdconfig -l -u ${_md} >/dev/null 2>&1; then
				err 3 "${_md} already exists"
			fi
			echo "Creating ${_md} device (${_type})."
			if ! mdconfig -a ${_config} -u ${_md}; then
				echo "Creating ${_md} device failed, moving on."
				continue
			fi
			# Skip fsck for uzip devices.
			if [ "${_type}" = "vnode" ]; then
				if [ "${_file}" != "${_file%.uzip}" ]; then
					_fsck_cmd=":"
				elif checkyesno background_fsck; then
					_fsck_cmd="fsck -F"
				else
					_fsck_cmd="fsck"
				fi
				if ! eval ${_fsck_cmd} -p ${_dev} >/dev/null; then
					echo "Fsck failed on ${_dev}, not mounting the filesystem."
					continue

				fi
			else
				newfs ${_newfs} ${_dev} >/dev/null
			fi
			if mount -d ${_dev} 2>&1 >/dev/null; then
				echo "Mounting ${_dev}."
				mount ${_dev}
			fi
		fi
	done
}

mdconfig_stop()
{
	local _md _mp _config _type _dev _file _fs _newfs _i

	for _md in ${_mdconfig_list}; do
		init_variables ${_md}
		if [ "${_type}" != "vnode" -o "${_fs}" = "/" ]; then
			for _i in `df ${_dev} 2>/dev/null`; do _mp=${_i}; done
			if [ -z "${_mp}" -o "${_mp}" != "${_mp%%%}" ]; then
				echo "Device ${_dev} isn't mounted."
			else
				echo "Umounting ${_dev}."
				umount ${_dev}
			fi
			if mdconfig -l -u ${_md} >/dev/null 2>&1; then
				echo "Destroying ${_md}."
				mdconfig -d -u ${_md}
			fi
		fi
	done
}

_mdconfig_cmd="$1"
if [ $# -gt 0 ]; then
        shift
fi
[ -n "$*" ] && _mdconfig_list="$*"

load_rc_config $name

# doesn't make sense to run in a svcj: config setting
mdconfig_svcj="NO"

if [ -z "${_mdconfig_list}" ]; then
	for _mdconfig_config in `list_vars mdconfig_md[0-9]\* |
		sort_lite -nk1.12`
	do
		_mdconfig_unit=${_mdconfig_config#mdconfig_md}
		[ "${_mdconfig_unit#*[!0-9]}" = "$_mdconfig_unit" ] ||
			continue
		_mdconfig_list="$_mdconfig_list md$_mdconfig_unit"
	done
	_mdconfig_list="${_mdconfig_list# }"
fi

run_rc_command "${_mdconfig_cmd}"

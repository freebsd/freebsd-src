.\" Copyright (c) 2018 Emmanuel Vadot <manu@freebsd.org>
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE DEVELOPERS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd March 9, 2021
.Dt PWMBUS 9
.Os
.Sh NAME
.Nm pwmbus ,
.Nm PWMBUS_CHANNEL_CONFIG ,
.Nm PWMBUS_CHANNEL_COUNT ,
.Nm PWMBUS_CHANNEL_ENABLE ,
.Nm PWMBUS_CHANNEL_GET_CONFIG ,
.Nm PWMBUS_CHANNEL_GET_FLAGS ,
.Nm PWMBUS_CHANNEL_IS_ENABLED ,
.Nm PWMBUS_CHANNEL_SET_FLAGS ,
.Nm PWMBUS_GET_BUS
.Nd PWMBUS methods
.Sh SYNOPSIS
.Cd "device pwm"
.In "pwmbus_if.h"
.Ft int
.Fn PWMBUS_CHANNEL_CONFIG "device_t bus" "u_int channel" "u_int period" "u_int duty"
.Ft int
.Fn PWMBUS_CHANNEL_COUNT "device_t bus" "u_int *nchannel"
.Ft int
.Fn PWMBUS_CHANNEL_ENABLE "device_t bus" "u_int channel" "bool enable"
.Ft int
.Fn PWMBUS_CHANNEL_GET_CONFIG "device_t bus" "u_int channel" "u_int *period" "u_int *duty"
.Ft int
.Fn PWMBUS_CHANNEL_GET_FLAGS "device_t bus" "u_int channel" "uint32_t *flags"
.Ft int
.Fn PWMBUS_CHANNEL_IS_ENABLED "device_t bus" "u_int channel" "bool *enabled"
.Ft int
.Fn PWMBUS_CHANNEL_SET_FLAGS "device_t bus" "u_int channel" "uint32_t flags"
.Sh DESCRIPTION
The PWMBUS (Pulse-Width Modulation) interface allows a device driver to
register to a global bus so other devices in the kernel can use them in a
generic way.
.Pp
For all
.Nm
methods, the
.Va period
argument is the duration in nanoseconds of one complete on-off cycle, and the
.Va duty
argument is the duration in nanoseconds of the on portion of that cycle.
.Pp
Some PWM hardware is organized as a single controller with multiple channels.
Channel numbers count up from zero.
When multiple channels are present, they sometimes share a common clock or
other resources.
In such cases, changing the period or duty cycle of any one channel may affect
other channels within the hardware which share the same resources.
Consult the documentation for the underlying PWM hardware device driver for
details on channels that share resources.
.Sh INTERFACE
.Bl -tag -width indent
.It Fn PWMBUS_CHANNEL_CONFIG "device_t bus" "u_int channel" "u_int period" "u_int duty"
Configure the period and duty (in nanoseconds) in the PWM controller on the bus
for the specified channel.
Returns 0 on success or
.Er EINVAL
if the values are not supported by the controller or
.Er EBUSY
if the PWMBUS controller is in use and does not support changing the value on
the fly.
.It Fn PWMBUS_CHANNEL_COUNT "device_t bus" "u_int *nchannel"
Get the number of channels supported by the controller.
.It Fn PWMBUS_CHANNEL_ENABLE "device_t bus" "u_int channel" "bool enable"
Enable the PWM channel.
.It Fn PWMBUS_CHANNEL_GET_CONFIG "device_t bus" "u_int channel" "u_int *period" "u_int *duty"
Get the current configuration of the period and duty for the specified channel.
.It Fn PWMBUS_CHANNEL_GET_FLAGS "device_t bus" "u_int channel" "uint32_t *flags"
Get the current flags for the channel.
If the driver or controller
does not support this, a default method returns a flags value of zero.
.It Fn PWMBUS_CHANNEL_IS_ENABLED "device_t bus" "u_int channel" "bool *enable"
Test whether the PWM channel is enabled.
.It Fn PWMBUS_CHANNEL_SET_FLAGS "device_t bus" "u_int channel" "uint32_t flags"
Set the flags of the channel (such as inverted polarity).
If the driver or controller does not support this a do-nothing default method
is used.
.El
.Sh HISTORY
The
.Nm pwmbus
interface first appear in
.Fx 13.0 .
The
.Nm pwmbus
interface and manual page was written by
.An Emmanuel Vadot Aq Mt manu@FreeBSD.org .

.\" Copyright (C) 2000 Jason Evans <jasone@FreeBSD.org>.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice(s), this list of conditions and the following disclaimer as
.\"    the first lines of this file unmodified other than the possible
.\"    addition of one or more copyright notices.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice(s), this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) ``AS IS'' AND ANY
.\" EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
.\" BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
.\" OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
.\" EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.Dd August 17, 2018
.Dt PTHREAD_ATTR 3
.Os
.Sh NAME
.Nm pthread_attr_init ,
.Nm pthread_attr_destroy ,
.Nm pthread_attr_setstack ,
.Nm pthread_attr_getstack ,
.Nm pthread_attr_setstacksize ,
.Nm pthread_attr_getstacksize ,
.Nm pthread_attr_setguardsize ,
.Nm pthread_attr_getguardsize ,
.Nm pthread_attr_setstackaddr ,
.Nm pthread_attr_getstackaddr ,
.Nm pthread_attr_setdetachstate ,
.Nm pthread_attr_getdetachstate ,
.Nm pthread_attr_setinheritsched ,
.Nm pthread_attr_getinheritsched ,
.Nm pthread_attr_setschedparam ,
.Nm pthread_attr_getschedparam ,
.Nm pthread_attr_setschedpolicy ,
.Nm pthread_attr_getschedpolicy ,
.Nm pthread_attr_setscope ,
.Nm pthread_attr_getscope
.Nd thread attribute operations
.Sh LIBRARY
.Lb libpthread
.Sh SYNOPSIS
.In pthread.h
.Ft int
.Fn pthread_attr_init "pthread_attr_t *attr"
.Ft int
.Fn pthread_attr_destroy "pthread_attr_t *attr"
.Ft int
.Fn pthread_attr_setstack "pthread_attr_t *attr" " void *stackaddr" "size_t stacksize"
.Ft int
.Fn pthread_attr_getstack "const pthread_attr_t * restrict attr" "void ** restrict stackaddr" "size_t * restrict stacksize"
.Ft int
.Fn pthread_attr_setstacksize "pthread_attr_t *attr" "size_t stacksize"
.Ft int
.Fn pthread_attr_getstacksize "const pthread_attr_t *restrict attr" "size_t *restrict stacksize"
.Ft int
.Fn pthread_attr_setguardsize "pthread_attr_t *attr" "size_t guardsize"
.Ft int
.Fn pthread_attr_getguardsize "const pthread_attr_t * restrict attr" "size_t * restrict guardsize"
.Ft int
.Fn pthread_attr_setstackaddr "pthread_attr_t *attr" "void *stackaddr"
.Ft int
.Fn pthread_attr_getstackaddr "const pthread_attr_t *attr" "void **stackaddr"
.Ft int
.Fn pthread_attr_setdetachstate "pthread_attr_t *attr" "int detachstate"
.Ft int
.Fn pthread_attr_getdetachstate "const pthread_attr_t *attr" "int *detachstate"
.Ft int
.Fn pthread_attr_setinheritsched "pthread_attr_t *attr" "int inheritsched"
.Ft int
.Fn pthread_attr_getinheritsched "const pthread_attr_t *restrict attr" "int *restrct inheritsched"
.Ft int
.Fn pthread_attr_setschedparam "pthread_attr_t *attr" "const struct sched_param *param"
.Ft int
.Fn pthread_attr_getschedparam "const pthread_attr_t *attr" "struct sched_param *param"
.Ft int
.Fn pthread_attr_setschedpolicy "pthread_attr_t *attr" "int policy"
.Ft int
.Fn pthread_attr_getschedpolicy "const pthread_attr_t *restrict attr" "int *restrict policy"
.Ft int
.Fn pthread_attr_setscope "pthread_attr_t *attr" "int contentionscope"
.Ft int
.Fn pthread_attr_getscope "const pthread_attr_t *restrict attr" "int *restrict contentionscope"
.Sh DESCRIPTION
Thread attributes are used to specify parameters to
.Fn pthread_create .
One attribute object can be used in multiple calls to
.Fn pthread_create ,
with or without modifications between calls.
.Pp
The
.Fn pthread_attr_init
function initializes
.Fa attr
with all the default thread attributes.
.Pp
The
.Fn pthread_attr_destroy
function destroys
.Fa attr .
.Pp
The
.Fn pthread_attr_set*
functions set the attribute that corresponds to each function name.
.Pp
The
.Fn pthread_attr_get*
functions copy the value of the attribute that corresponds to each function name
to the location pointed to by the second function parameter.
.Sh RETURN VALUES
If successful, these functions return 0.
Otherwise, an error number is returned to indicate the error.
.Sh ERRORS
The
.Fn pthread_attr_init
function will fail if:
.Bl -tag -width Er
.It Bq Er ENOMEM
Out of memory.
.El
.Pp
The
.Fn pthread_attr_destroy
function will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
Invalid value for
.Fa attr .
.El
.Pp
The
.Fn pthread_attr_setstacksize
and
.Fn pthread_attr_setstack
functions will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
.Fa stacksize
is less than
.Dv PTHREAD_STACK_MIN .
.El
.Pp
The
.Fn pthread_attr_setdetachstate
function will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
Invalid value for
.Fa detachstate .
.El
.Pp
The
.Fn pthread_attr_setinheritsched
function will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
Invalid value for
.Fa attr .
.El
.Pp
The
.Fn pthread_attr_setschedparam
function will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
Invalid value for
.Fa attr .
.It Bq Er ENOTSUP
Invalid value for
.Fa param .
.El
.Pp
The
.Fn pthread_attr_setschedpolicy
function will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
Invalid value for
.Fa attr .
.It Bq Er ENOTSUP
Invalid or unsupported value for
.Fa policy .
.El
.Pp
The
.Fn pthread_attr_setscope
function will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
Invalid value for
.Fa attr .
.It Bq Er ENOTSUP
Invalid or unsupported value for
.Fa contentionscope .
.El
.Sh SEE ALSO
.Xr pthread_attr_affinity_np 3 ,
.Xr pthread_attr_get_np 3 ,
.Xr pthread_create 3
.Sh STANDARDS
.Fn pthread_attr_init ,
.Fn pthread_attr_destroy ,
.Fn pthread_attr_setstacksize ,
.Fn pthread_attr_getstacksize ,
.Fn pthread_attr_setstackaddr ,
.Fn pthread_attr_getstackaddr ,
.Fn pthread_attr_setdetachstate ,
and
.Fn pthread_attr_getdetachstate
functions conform to
.St -p1003.1-96
.Pp
The
.Fn pthread_attr_setinheritsched ,
.Fn pthread_attr_getinheritsched ,
.Fn pthread_attr_setschedparam ,
.Fn pthread_attr_getschedparam ,
.Fn pthread_attr_setschedpolicy ,
.Fn pthread_attr_getschedpolicy ,
.Fn pthread_attr_setscope ,
and
.Fn pthread_attr_getscope
functions conform to
.St -susv2

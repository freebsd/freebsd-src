.\" Copyright (c) 1999 Softweyr LLC.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY Softweyr LLC AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL Softweyr LLC OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd March 27, 2025
.Dt AIO_WRITE 2
.Os
.Sh NAME
.Nm aio_write ,
.Nm aio_write2 ,
.Nm aio_writev
.Nd asynchronous write to a file (REALTIME)
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In aio.h
.Ft int
.Fn aio_write "struct aiocb *iocb"
.Ft int
.Fn aio_write2 "struct aiocb *iocb" "int flags"
.In sys/uio.h
.Ft int
.Fn aio_writev "struct aiocb *iocb"
.Sh DESCRIPTION
The
.Fn aio_write ,
.Fn aio_write2 ,
and
.Fn aio_writev
system calls allow the calling process to write
to the descriptor
.Fa iocb->aio_fildes .
The syscalls return immediately after the write request has been enqueued
to the descriptor; the write may or may not have completed at the time
the call returns.
.Pp
The
.Fn aio_write
call will write
.Fa iocb->aio_nbytes
from the buffer pointed to by
.Fa iocb->aio_buf ,
whereas
.Fn aio_writev
gathers the data from the
.Fa iocb->aio_iovcnt
buffers specified by the members of the
.Fa iocb->aio_iov
array.
.Pp
If the request could not be enqueued, generally due
to invalid arguments, the call returns without having enqueued the
request.
.Pp
For
.Fn aio_writev
the
.Fa iovec
structure is defined in
.Xr writev 2 .
.Pp
If
.Dv O_APPEND
is set for
.Fa iocb->aio_fildes ,
write operations append to the file in the same order as the calls were
made.
If
.Dv O_APPEND
is not set for the file descriptor, the write operation for
.Fn aio_write
will occur at
the absolute position from the beginning of the file plus
.Fa iocb->aio_offset .
.Pp
The
.Fn aio_write2
call takes the
.Fa flags
argument.
If
.Fa flags
is passed as zero, the call behaves identically to
.Fn aio_write .
The following flags can be specified by logical or:
.Bl -tag -width AIO_OP2_VECTORED
.It AIO_OP2_FOFFSET
The write for non
.Dv O_APPEND
file descriptors occurs at the file descriptor offset,
which is advanced by the operation as done by the
.Xr write 2
syscall.
The
.Fa iocb->aio_offset
field is ignored.
.It AIO_OP2_VECTORED
Similar to
.Fn aio_writev ,
the write buffers are specified by the
.Fa aiocb->aio_iov
array.
.El
.Pp
The
.Fa iocb
pointer may be subsequently used as an argument to
.Fn aio_return
and
.Fn aio_error
in order to determine return or error status for the enqueued operation
while it is in progress.
.Pp
If the request is successfully enqueued, the value of
.Fa iocb->aio_offset
can be modified during the request as context, so this value must not
be referenced after the request is enqueued.
.Pp
The
.Fa iocb->aio_sigevent
structure can be used to request notification of the operation's
completion as described in
.Xr aio 4 .
.Sh RESTRICTIONS
The Asynchronous I/O Control Block structure pointed to by
.Fa iocb
and the buffer that the
.Fa iocb->aio_buf
member of that structure references must remain valid until the
operation has completed.
.Pp
The asynchronous I/O control buffer
.Fa iocb
should be zeroed before the
system calls to avoid passing bogus context information to the kernel.
.Pp
Modifications of the Asynchronous I/O Control Block structure or the
buffer contents are not allowed while the request is queued.
.Pp
If the file offset in
.Fa iocb->aio_offset
is past the offset maximum for
.Fa iocb->aio_fildes ,
no I/O will occur.
.Sh RETURN VALUES
.Rv -std aio_write aio_writev
.Sh ERRORS
The
.Fn aio_write ,
.Fn aio_write2 ,
and
.Fn aio_writev
system calls will fail if:
.Bl -tag -width Er
.It Bq Er EAGAIN
The request was not queued because of system resource limitations.
.It Bq Er EFAULT
Part of
.Fa aio_iov
points outside the process's allocated address space.
.It Bq Er EINVAL
The asynchronous notification method in
.Fa iocb->aio_sigevent.sigev_notify
is invalid or not supported.
.It Bq Er EOPNOTSUPP
Asynchronous write operations on the file descriptor
.Fa iocb->aio_fildes
are unsafe and unsafe asynchronous I/O operations are disabled.
.El
.Pp
The following conditions may be synchronously detected when the
.Fn aio_write ,
.Fn aio_write2 ,
or
.Fn aio_writev
system call is made, or asynchronously, at any time thereafter.
If they
are detected at call time, the calls return -1 and set
.Va errno
appropriately; otherwise the
.Fn aio_return
system call must be called, and will return -1, and
.Fn aio_error
must be called to determine the actual value that would have been
returned in
.Va errno .
.Bl -tag -width Er
.It Bq Er EBADF
The
.Fa iocb->aio_fildes
argument
is invalid, or is not opened for writing.
.It Bq Er EINVAL
The offset
.Fa iocb->aio_offset
is not valid, the priority specified by
.Fa iocb->aio_reqprio
is not a valid priority, or the number of bytes specified by
.Fa iocb->aio_nbytes
is not valid.
.El
.Pp
If the request is successfully enqueued, but subsequently canceled
or an error occurs, the value returned by the
.Fn aio_return
system call is per the
.Xr write 2
system call, and the value returned by the
.Fn aio_error
system call is either one of the error returns from the
.Xr write 2
system call, or one of:
.Bl -tag -width Er
.It Bq Er EBADF
The
.Fa iocb->aio_fildes
argument
is invalid for writing.
.It Bq Er ECANCELED
The request was explicitly canceled via a call to
.Fn aio_cancel .
.It Bq Er EINVAL
The offset
.Fa iocb->aio_offset
would be invalid.
.El
.Sh SEE ALSO
.Xr aio_cancel 2 ,
.Xr aio_error 2 ,
.Xr aio_return 2 ,
.Xr aio_suspend 2 ,
.Xr aio_waitcomplete 2 ,
.Xr sigevent 3 ,
.Xr siginfo 3 ,
.Xr aio 4
.Sh STANDARDS
The
.Fn aio_write
system call
is expected to conform to the
.St -p1003.1
standard.
.Pp
The
.Fn aio_write2
and
.Fn aio_writev
system calls are
.Fx
extensions,
and should not be used in portable code.
.Sh HISTORY
The
.Fn aio_write
system call first appeared in
.Fx 3.0 .
The
.Fn aio_writev
system call first appeared in
.Fx 13.0 .
The
.Fn aio_write2
system call first appeared in
.Fx 14.1 .
.Sh AUTHORS
This manual page was written by
.An Wes Peters Aq Mt wes@softweyr.com .
.Sh BUGS
Invalid information in
.Fa iocb->_aiocb_private
may confuse the kernel.

.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd May 22, 2016
.Dt VFORK 2
.Os
.Sh NAME
.Nm vfork
.Nd create a new process without copying the address space
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In unistd.h
.Ft pid_t
.Fn vfork void
.Sh DESCRIPTION
.Bf -symbolic
Since this function is hard to use correctly from application software,
it is recommended to use
.Xr posix_spawn 3
or
.Xr fork 2
instead.
.Ef
.Pp
The
.Fn vfork
system call
can be used to create new processes without fully copying the address
space of the old process, which is inefficient in a paged
environment.
It is useful when the purpose of
.Xr fork 2
would have been to create a new system context for an
.Xr execve 2 .
The
.Fn vfork
system call
differs from
.Xr fork 2
in that the child borrows the parent process's address space and the
calling thread's stack
until a call to
.Xr execve 2
or an exit (either by a call to
.Xr _exit 2
or abnormally).
The calling thread is suspended while the child is using its resources.
Other threads continue to run.
.Pp
The
.Fn vfork
system call
returns 0 in the child's context and (later) the pid of the child in
the parent's context.
.Pp
Many problems can occur when replacing
.Xr fork 2
with
.Fn vfork .
For example, it does not work to return while running in the child's context
from the procedure that called
.Fn vfork
since the eventual return from
.Fn vfork
would then return to a no longer existent stack frame.
Also, changing process state which is partially implemented in user space
such as signal handlers with
.Xr libthr 3
will corrupt the parent's state.
.Pp
Be careful, also, to call
.Xr _exit 2
rather than
.Xr exit 3
if you cannot
.Xr execve 2 ,
since
.Xr exit 3
will flush and close standard I/O channels, and thereby mess up the
parent processes standard I/O data structures.
(Even with
.Xr fork 2
it is wrong to call
.Xr exit 3
since buffered data would then be flushed twice.)
.Sh RETURN VALUES
Same as for
.Xr fork 2 .
.Sh SEE ALSO
.Xr _exit 2 ,
.Xr execve 2 ,
.Xr fork 2 ,
.Xr rfork 2 ,
.Xr sigaction 2 ,
.Xr wait 2 ,
.Xr exit 3 ,
.Xr posix_spawn 3
.Sh HISTORY
The
.Fn vfork
system call appeared in
.Bx 3 .
.Sh BUGS
To avoid a possible deadlock situation,
processes that are children in the middle
of a
.Fn vfork
are never sent
.Dv SIGTTOU
or
.Dv SIGTTIN
signals; rather,
output or
.Xr ioctl 2
calls
are allowed
and input attempts result in an end-of-file indication.

.\" Copyright (c) 1983, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\" Copyright (c) 2016 The FreeBSD Foundation
.\"
.\" Parts of this documentation were written by
.\" Konstantin Belousov <kib@FreeBSD.org> under sponsorship
.\" from the FreeBSD Foundation.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd March 30, 2020
.Dt FSYNC 2
.Os
.Sh NAME
.Nm fdatasync ,
.Nm fsync
.Nd "synchronise changes to a file"
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In unistd.h
.Ft int
.Fn fdatasync "int fd"
.Ft int
.Fn fsync "int fd"
.Sh DESCRIPTION
The
.Fn fsync
system call
causes all modified data and attributes of the file referenced by
the file descriptor
.Fa fd
to be moved to a permanent storage device.
This normally results in all in-core modified copies
of buffers for the associated file to be written to a disk.
.Pp
The
.Fn fdatasync
system call causes all modified data of
.Fa fd
to be moved to a permanent storage device.
Unlike
.Fn fsync ,
the system call does not guarantee that file attributes or
metadata necessary to access the file are committed to the permanent storage.
.Pp
The
.Fn fsync
system call
should be used by programs that require a file to be
in a known state, for example, in building a simple transaction
facility.
If the file metadata has already been committed, using
.Fn fdatasync
can be more efficient than
.Fn fsync .
.Pp
Both
.Fn fdatasync
and
.Fn fsync
calls are cancellation points.
.Sh RETURN VALUES
.Rv -std fsync
.Sh ERRORS
The
.Fn fsync
and
.Fn fdatasync
calls fail if:
.Bl -tag -width Er
.It Bq Er EBADF
The
.Fa fd
argument
is not a valid descriptor.
.It Bq Er EINVAL
The
.Fa fd
argument
refers to a socket, not to a file.
.It Bq Er EIO
An I/O error occurred while reading from or writing to the file system.
.It Bq Er EINTEGRITY
Corrupted data was detected while reading from the file system.
.El
.Sh SEE ALSO
.Xr fsync 1 ,
.Xr sync 2 ,
.Xr syncer 4 ,
.Xr sync 8
.Sh HISTORY
The
.Fn fsync
system call appeared in
.Bx 4.2 .
The
.Fn fdatasync
system call appeared in
.Fx 11.1 .
.Sh BUGS
The
.Fn fdatasync
system call currently does not guarantee that enqueued
.Xr aio 4
requests for the file referenced by
.Fa fd
are completed before the syscall returns.

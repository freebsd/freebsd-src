.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd March 30, 2020
.Dt MKFIFO 2
.Os
.Sh NAME
.Nm mkfifo ,
.Nm mkfifoat
.Nd make a fifo file
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In sys/types.h
.In sys/stat.h
.Ft int
.Fn mkfifo "const char *path" "mode_t mode"
.Ft int
.Fn mkfifoat "int fd" "const char *path" "mode_t mode"
.Sh DESCRIPTION
The
.Fn mkfifo
system call
creates a new fifo file with name
.Fa path .
The access permissions are
specified by
.Fa mode
and restricted by the
.Xr umask 2
of the calling process.
.Pp
The fifo's owner ID is set to the process's effective user ID.
The fifo's group ID is set to that of the parent directory in
which it is created.
.Pp
The
.Fn mkfifoat
system call is equivalent to
.Fn mkfifo
except in the case where
.Fa path
specifies a relative path.
In this case the newly created FIFO is created relative to the
directory associated with the file descriptor
.Fa fd
instead of the current working directory.
If
.Fn mkfifoat
is passed the special value
.Dv AT_FDCWD
in the
.Fa fd
parameter, the current working directory is used and the behavior is
identical to a call to
.Fn mkfifo .
.Sh RETURN VALUES
.Rv -std mkfifo
.Sh ERRORS
The
.Fn mkfifo
system call
will fail and no fifo will be created if:
.Bl -tag -width Er
.It Bq Er ENOTSUP
The kernel has not been configured to support fifo's.
.It Bq Er ENOTDIR
A component of the path prefix is not a directory.
.It Bq Er ENAMETOOLONG
A component of a pathname exceeded 255 characters,
or an entire path name exceeded 1023 characters.
.It Bq Er ENOENT
A component of the path prefix does not exist.
.It Bq Er EACCES
A component of the path prefix denies search permission, or write permission
is denied on the parent directory of the fifo to be created.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating the pathname.
.It Bq Er EROFS
The named file would reside on a read-only file system.
.It Bq Er EEXIST
The named file exists.
.It Bq Er EPERM
The parent directory of the named file has its immutable flag set, see the
.Xr chflags 2
manual page for more information.
.It Bq Er ENOSPC
The directory in which the entry for the new fifo is being placed
cannot be extended because there is no space left on the file
system containing the directory.
.It Bq Er ENOSPC
There are no free inodes on the file system on which the
fifo is being created.
.It Bq Er EDQUOT
The directory in which the entry for the new fifo
is being placed cannot be extended because the
user's quota of disk blocks on the file system
containing the directory has been exhausted.
.It Bq Er EDQUOT
The user's quota of inodes on the file system on
which the fifo is being created has been exhausted.
.It Bq Er EIO
An
.Tn I/O
error occurred while making the directory entry or allocating the inode.
.It Bq Er EINTEGRITY
Corrupted data was detected while reading from the file system.
.It Bq Er EFAULT
The
.Fa path
argument
points outside the process's allocated address space.
.El
.Pp
In addition to the errors returned by the
.Fn mkfifo ,
the
.Fn mkfifoat
may fail if:
.Bl -tag -width Er
.It Bq Er EBADF
The
.Fa path
argument does not specify an absolute path and the
.Fa fd
argument is neither
.Dv AT_FDCWD
nor a valid file descriptor open for searching.
.It Bq Er ENOTDIR
The
.Fa path
argument is not an absolute path and
.Fa fd
is neither
.Dv AT_FDCWD
nor a file descriptor associated with a directory.
.El
.Sh SEE ALSO
.Xr chflags 2 ,
.Xr chmod 2 ,
.Xr mknod 2 ,
.Xr stat 2 ,
.Xr umask 2
.Sh STANDARDS
The
.Fn mkfifo
system call is expected to conform to
.St -p1003.1-90 .
The
.Fn mkfifoat
system call follows The Open Group Extended API Set 2 specification.
.Sh HISTORY
The
.Fn mkfifoat
system call appeared in
.Fx 8.0 .

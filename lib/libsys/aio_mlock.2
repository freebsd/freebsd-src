.\" Copyright (c) 2013 Gleb Smirnoff <glebius@FreeBSD.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd August 19, 2016
.Dt AIO_MLOCK 2
.Os
.Sh NAME
.Nm aio_mlock
.Nd asynchronous
.Xr mlock 2
operation
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In aio.h
.Ft int
.Fn aio_mlock "struct aiocb *iocb"
.Sh DESCRIPTION
The
.Fn aio_mlock
system call allows the calling process to lock into memory the
physical pages associated with the virtual address range starting at
.Fa iocb->aio_buf
for
.Fa iocb->aio_nbytes
bytes.
The call returns immediately after the locking request has
been enqueued; the operation may or may not have completed at the time
the call returns.
.Pp
The
.Fa iocb
pointer may be subsequently used as an argument to
.Fn aio_return
and
.Fn aio_error
in order to determine return or error status for the enqueued operation
while it is in progress.
.Pp
If the request could not be enqueued (generally due to
.Xr aio 4
limits),
then the call returns without having enqueued the request.
.Pp
The
.Fa iocb->aio_sigevent
structure can be used to request notification of the operation's
completion as described in
.Xr aio 4 .
.Sh RESTRICTIONS
The Asynchronous I/O Control Block structure pointed to by
.Fa iocb
and the buffer that the
.Fa iocb->aio_buf
member of that structure references must remain valid until the
operation has completed.
.Pp
The asynchronous I/O control buffer
.Fa iocb
should be zeroed before the
.Fn aio_mlock
call to avoid passing bogus context information to the kernel.
.Pp
Modifications of the Asynchronous I/O Control Block structure or the
memory mapping described by the virtual address range are not allowed
while the request is queued.
.Sh RETURN VALUES
.Rv -std aio_mlock
.Sh ERRORS
The
.Fn aio_mlock
system call will fail if:
.Bl -tag -width Er
.It Bq Er EAGAIN
The request was not queued because of system resource limitations.
.It Bq Er EINVAL
The asynchronous notification method in
.Fa iocb->aio_sigevent.sigev_notify
is invalid or not supported.
.El
.Pp
If the request is successfully enqueued, but subsequently cancelled
or an error occurs, the value returned by the
.Fn aio_return
system call is per the
.Xr mlock 2
system call, and the value returned by the
.Fn aio_error
system call is one of the error returns from the
.Xr mlock 2
system call, or
.Er ECANCELED
if the request was explicitly cancelled via a call to
.Fn aio_cancel .
.Sh SEE ALSO
.Xr aio_cancel 2 ,
.Xr aio_error 2 ,
.Xr aio_return 2 ,
.Xr mlock 2 ,
.Xr sigevent 3 ,
.Xr aio 4
.Sh PORTABILITY
The
.Fn aio_mlock
system call is a
.Fx
extension, and should not be used in portable code.
.Sh HISTORY
The
.Fn aio_mlock
system call first appeared in
.Fx 10.0 .
.Sh AUTHORS
The system call was introduced by
.An Gleb Smirnoff Aq Mt glebius@FreeBSD.org .

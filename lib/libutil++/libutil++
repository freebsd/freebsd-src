/*-
 * SPDX-License-Identifier: BSD-2-Clause
 *
 * Copyright (c) 2025 Chelsio Communications, Inc.
 * Written by: John Baldwin <jhb@FreeBSD.org>
 */

#ifndef __LIBUTILPP__
#define	__LIBUTILPP__

#include <sys/cdefs.h>
#include <netdb.h>
#include <stdarg.h>

#include <memory>

namespace freebsd {
	/*
	 * FILE_up is a std::unique_ptr<> for FILE objects which uses
	 * fclose() to destroy the wrapped pointer.
	 */
	struct fclose_deleter {
		void operator() (FILE *fp) const
		{
			fclose(fp);
		}
	};

	typedef std::unique_ptr<FILE, fclose_deleter> FILE_up;

	/*
	 * addrinfo_up is a std::unique_ptr<> which uses
	 * freeaddrinfo() to destroy the wrapped pointer.  It is
	 * intended to wrap arrays allocated by getaddrinfo().
	 */
	struct freeaddrinfo_deleter {
		void operator() (struct addrinfo *ai) const
		{
			freeaddrinfo(ai);
		}
	};

	typedef std::unique_ptr<addrinfo, freeaddrinfo_deleter> addrinfo_up;

	/*
	 * malloc_up<T> is a std::unique_ptr<> which uses free() to
	 * destroy the wrapped pointer.  This can be used to wrap
	 * pointers allocated implicitly by malloc() such as those
	 * returned by strdup().
	 */
	template <class T>
	struct free_deleter {
		void operator() (T *p) const
		{
			free(p);
		}
	};

	template <class T>
	using malloc_up = std::unique_ptr<T, free_deleter<T>>;

	/*
	 * Returns a std::string containing the same output as
	 * sprintf().  Throws std::bad_alloc if an error occurs.
	 */
	std::string stringf(const char *fmt, ...) __printflike(1, 2);
	std::string stringf(const char *fmt, va_list ap);
}

#endif /* !__LIBUTILPP__ */

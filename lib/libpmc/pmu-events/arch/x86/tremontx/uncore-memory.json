[
    {
        "BriefDescription": "read requests to memory controller. Derived from unc_m_cas_count.rd",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x04",
        "EventName": "LLC_MISSES.MEM_READ",
        "PerPkg": "1",
        "ScaleUnit": "64Bytes",
        "UMask": "0x0f",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "read requests to memory controller",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x04",
        "EventName": "UNC_M_CAS_COUNT.RD",
        "PerPkg": "1",
        "ScaleUnit": "64Bytes",
        "UMask": "0x0f",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "write requests to memory controller. Derived from unc_m_cas_count.wr",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x04",
        "EventName": "LLC_MISSES.MEM_WRITE",
        "PerPkg": "1",
        "ScaleUnit": "64Bytes",
        "UMask": "0x30",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "write requests to memory controller",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x04",
        "EventName": "UNC_M_CAS_COUNT.WR",
        "PerPkg": "1",
        "ScaleUnit": "64Bytes",
        "UMask": "0x30",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Memory controller clock ticks",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventName": "UNC_M_CLOCKTICKS",
        "PerPkg": "1",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Pre-charge for reads",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x02",
        "EventName": "UNC_M_PRE_COUNT.RD",
        "PerPkg": "1",
        "UMask": "0x04",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Pre-charge for writes",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x02",
        "EventName": "UNC_M_PRE_COUNT.WR",
        "PerPkg": "1",
        "UMask": "0x08",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "DRAM Activate Count : All Activates",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x01",
        "EventName": "UNC_M_ACT_COUNT.ALL",
        "PerPkg": "1",
        "PublicDescription": "DRAM Activate Count : All Activates : Counts the number of DRAM Activate commands sent on this channel.  Activate commands are issued to open up a page on the DRAM devices so that it can be read or written to with a CAS.  One can calculate the number of Page Misses by subtracting the number of Page Miss precharges from the number of Activates.",
        "UMask": "0x0B",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "All DRAM CAS commands issued",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x04",
        "EventName": "UNC_M_CAS_COUNT.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of DRAM CAS commands issued on this channel.",
        "UMask": "0x3f",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Number of DRAM Refreshes Issued",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x45",
        "EventName": "UNC_M_DRAM_REFRESH.HIGH",
        "PerPkg": "1",
        "PublicDescription": "Number of DRAM Refreshes Issued : Counts the number of refreshes issued.",
        "UMask": "0x04",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Number of DRAM Refreshes Issued",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x45",
        "EventName": "UNC_M_DRAM_REFRESH.OPPORTUNISTIC",
        "PerPkg": "1",
        "PublicDescription": "Number of DRAM Refreshes Issued : Counts the number of refreshes issued.",
        "UMask": "0x01",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Number of DRAM Refreshes Issued",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x45",
        "EventName": "UNC_M_DRAM_REFRESH.PANIC",
        "PerPkg": "1",
        "PublicDescription": "Number of DRAM Refreshes Issued : Counts the number of refreshes issued.",
        "UMask": "0x02",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Half clockticks for IMC",
        "Counter": "FIXED",
        "CounterType": "FIXED",
        "EventCode": "0xff",
        "EventName": "UNC_M_HCLOCKTICKS",
        "PerPkg": "1",
        "PublicDescription": "Half clockticks for IMC",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "DRAM Precharge commands.",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x02",
        "EventName": "UNC_M_PRE_COUNT.ALL",
        "PerPkg": "1",
        "PublicDescription": "DRAM Precharge commands. : Counts the number of DRAM Precharge commands sent on this channel.",
        "UMask": "0x1C",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "DRAM Precharge commands. : Precharge due to page table",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x02",
        "EventName": "UNC_M_PRE_COUNT.PGT",
        "PerPkg": "1",
        "PublicDescription": "DRAM Precharge commands. : Precharge due to page table : Counts the number of DRAM Precharge commands sent on this channel. : Prechages from Page Table",
        "UMask": "0x10",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Read Pending Queue Allocations",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x10",
        "EventName": "UNC_M_RPQ_INSERTS.PCH0",
        "PerPkg": "1",
        "PublicDescription": "Read Pending Queue Allocations : Counts the number of allocations into the Read Pending Queue.  This queue is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after the CAS command has been issued to memory.  This includes both ISOCH and non-ISOCH requests.",
        "UMask": "0x01",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Read Pending Queue Allocations",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x10",
        "EventName": "UNC_M_RPQ_INSERTS.PCH1",
        "PerPkg": "1",
        "PublicDescription": "Read Pending Queue Allocations : Counts the number of allocations into the Read Pending Queue.  This queue is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after the CAS command has been issued to memory.  This includes both ISOCH and non-ISOCH requests.",
        "UMask": "0x02",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Read Pending Queue Occupancy",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x80",
        "EventName": "UNC_M_RPQ_OCCUPANCY_PCH0",
        "PerPkg": "1",
        "PublicDescription": "Read Pending Queue Occupancy : Accumulates the occupancies of the Read Pending Queue each cycle.  This can then be used to calculate both the average occupancy (in conjunction with the number of cycles not empty) and the average latency (in conjunction with the number of allocations).  The RPQ is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC. They deallocate after the CAS command has been issued to memory.",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Read Pending Queue Occupancy",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x81",
        "EventName": "UNC_M_RPQ_OCCUPANCY_PCH1",
        "PerPkg": "1",
        "PublicDescription": "Read Pending Queue Occupancy : Accumulates the occupancies of the Read Pending Queue each cycle.  This can then be used to calculate both the average occupancy (in conjunction with the number of cycles not empty) and the average latency (in conjunction with the number of allocations).  The RPQ is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC. They deallocate after the CAS command has been issued to memory.",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Write Pending Queue Allocations",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x20",
        "EventName": "UNC_M_WPQ_INSERTS.PCH0",
        "PerPkg": "1",
        "PublicDescription": "Write Pending Queue Allocations : Counts the number of allocations into the Write Pending Queue.  This can then be used to calculate the average queuing latency (in conjunction with the WPQ occupancy count).  The WPQ is used to schedule write out to the memory controller and to track the writes.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the CHA to the iMC.  They deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have posted to the iMC.",
        "UMask": "0x01",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Write Pending Queue Allocations",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x20",
        "EventName": "UNC_M_WPQ_INSERTS.PCH1",
        "PerPkg": "1",
        "PublicDescription": "Write Pending Queue Allocations : Counts the number of allocations into the Write Pending Queue.  This can then be used to calculate the average queuing latency (in conjunction with the WPQ occupancy count).  The WPQ is used to schedule write out to the memory controller and to track the writes.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the CHA to the iMC.  They deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have posted to the iMC.",
        "UMask": "0x02",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Write Pending Queue Occupancy",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x82",
        "EventName": "UNC_M_WPQ_OCCUPANCY_PCH0",
        "PerPkg": "1",
        "PublicDescription": "Write Pending Queue Occupancy : Accumulates the occupancies of the Write Pending Queue each cycle.  This can then be used to calculate both the average queue occupancy (in conjunction with the number of cycles not empty) and the average latency (in conjunction with the number of allocations).  The WPQ is used to schedule write out to the memory controller and to track the writes.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have posted to the iMC.  This is not to be confused with actually performing the write to DRAM.  Therefore, the average latency for this queue is actually not useful for deconstruction intermediate write latencies.  So, we provide filtering based on if the request has posted or not.  By using the not posted filter, we can track how long writes spent in the iMC before completions were sent to the HA.  The posted filter, on the other hand, provides information about how much queueing is actually happenning in the iMC for writes before they are actually issued to memory.  High average occupancies will generally coincide with high write major mode counts.",
        "Unit": "iMC"
    },
    {
        "BriefDescription": "Write Pending Queue Occupancy",
        "Counter": "0,1,2,3",
        "CounterType": "PGMABLE",
        "EventCode": "0x83",
        "EventName": "UNC_M_WPQ_OCCUPANCY_PCH1",
        "PerPkg": "1",
        "PublicDescription": "Write Pending Queue Occupancy : Accumulates the occupancies of the Write Pending Queue each cycle.  This can then be used to calculate both the average queue occupancy (in conjunction with the number of cycles not empty) and the average latency (in conjunction with the number of allocations).  The WPQ is used to schedule write out to the memory controller and to track the writes.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have posted to the iMC.  This is not to be confused with actually performing the write to DRAM.  Therefore, the average latency for this queue is actually not useful for deconstruction intermediate write latencies.  So, we provide filtering based on if the request has posted or not.  By using the not posted filter, we can track how long writes spent in the iMC before completions were sent to the HA.  The posted filter, on the other hand, provides information about how much queueing is actually happenning in the iMC for writes before they are actually issued to memory.  High average occupancies will generally coincide with high write major mode counts.",
        "Unit": "iMC"
    }
]

.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd June 25, 2025
.Dt SCANDIR 3
.Os
.Sh NAME
.Nm scandir ,
.Nm fdscandir ,
.Nm scandirat ,
.Nm scandir_b ,
.Nm fdscandir_b ,
.Nm fdscandirat_b ,
.Nm alphasort ,
.Nm versionsort
.Nd scan a directory
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In dirent.h
.Ft int
.Fo scandir
.Fa "const char *dirname"
.Fa "struct dirent ***namelist"
.Fa "int \*(lp*select\*(rp\*(lpconst struct dirent *\*(rp"
.Fa "int \*(lp*compar\*(rp\*(lpconst struct dirent **, const struct dirent **\*(rp"
.Fc
.Ft int
.Fo fdscandir
.Fa "int dirfd"
.Fa "struct dirent ***namelist"
.Fa "int \*(lp*select\*(rp\*(lpconst struct dirent *\*(rp"
.Fa "int \*(lp*compar\*(rp\*(lpconst struct dirent **, const struct dirent **\*(rp"
.Fc
.Ft int
.Fo scandirat
.Fa "int dirfd"
.Fa "const char *dirname"
.Fa "struct dirent ***namelist"
.Fa "int \*(lp*select\*(rp\*(lpconst struct dirent *\*(rp"
.Fa "int \*(lp*compar\*(rp\*(lpconst struct dirent **, const struct dirent **\*(rp"
.Fc
.Ft int
.Fo scandir_b
.Fa "const char *dirname"
.Fa "struct dirent ***namelist"
.Fa "int \*(lp^select\*(rp\*(lpconst struct dirent *\*(rp"
.Fa "int \*(lp^compar\*(rp\*(lpconst struct dirent **, const struct dirent **\*(rp"
.Fc
.Ft int
.Fo fdscandir_b
.Fa "int dirfd"
.Fa "struct dirent ***namelist"
.Fa "int \*(lp^select\*(rp\*(lpconst struct dirent *\*(rp"
.Fa "int \*(lp^compar\*(rp\*(lpconst struct dirent **, const struct dirent **\*(rp"
.Fc
.Ft int
.Fo scandirat_b
.Fa "int dirfd"
.Fa "const char *dirname"
.Fa "struct dirent ***namelist"
.Fa "int \*(lp^select\*(rp\*(lpconst struct dirent *\*(rp"
.Fa "int \*(lp^compar\*(rp\*(lpconst struct dirent **, const struct dirent **\*(rp"
.Fc
.Ft int
.Fn alphasort "const struct dirent **d1" "const struct dirent **d2"
.Ft int
.Fn versionsort "const struct dirent **d1" "const struct dirent **d2"
.Sh DESCRIPTION
The
.Fn scandir
function
reads the directory
.Fa dirname
and builds an array of pointers to directory
entries using
.Xr malloc 3 .
It returns the number of entries in the array.
A pointer to the array of directory entries is stored in the location
referenced by
.Fa namelist
(even if no entries were selected).
.Pp
The
.Fa select
argument is a pointer to a user supplied subroutine which is called by
.Fn scandir
to select which entries are to be included in the array.
The select routine is passed a
pointer to a directory entry and should return a non-zero
value if the directory entry is to be included in the array.
If
.Fa select
is null, then all the directory entries will be included.
.Pp
The
.Fa compar
argument is a pointer to a user supplied subroutine which is passed to
.Xr qsort 3
to sort the completed array.
If this pointer is null, the array is not sorted.
.Pp
The
.Fn alphasort
function
is a routine which can be used for the
.Fa compar
argument to sort the array alphabetically using
.Xr strcoll 3 .
.Pp
The
.Fn versionsort
function is a routine which can be used for the
.Fa compar
argument to sort the array naturally using
.Xr strverscmp 3 .
.Pp
The memory allocated for the array can be deallocated with
.Xr free 3 ,
by freeing each pointer in the array and then the array itself.
.Pp
The
.Fn fdscandir
function is similar to
.Fn scandir ,
but takes a file descriptor referencing a directory instead of a path.
The file descriptor is left open on return, regardless of outcome.
.Pp
The
.Fn scandirat
function is similar to
.Fn scandir ,
but takes an additional
.Fa dirfd
argument.
If the supplied
.Fa dirname
is absolute, the function's behavior is identical to that of
.Fn scandir ,
the
.Fa dirfd
argument is unused.
If
.Fa dirname
is relative,
.Fa dirfd
must be a valid file descriptor referencing a directory, in
which case the
.Fa dirname
lookup is performed relative to the directory referenced by
.Fa dirfd .
If
.Fa dirfd
has the special value
.Va AT_FDCWD ,
then the current process directory is used as the base for
relative lookups.
See
.Xr openat 2
for additional details.
.Pp
The
.Fn scandir_b ,
.Fn fdscandir_b ,
and
.Fn scandirat_b
functions behave in the same way as
.Fn scandir ,
.Fn fdscandir ,
and
.Fn scandirat ,
respectively,
but take blocks as arguments instead of function pointers and call
.Fn qsort_b
rather than
.Fn qsort .
.Sh DIAGNOSTICS
The
.Fn scandir ,
.Fn fdscandir ,
.Fn scandirat ,
.Fn scandir_b ,
.Fn fdscandir_b ,
and
.Fn scandirat_b
functions return the number of directory entries found on succes.
If the directory cannot be opened for reading, an error occurs
while reading the directory, or
.Xr malloc 3
cannot allocate enough memory to hold all the directory entries,
they return \-1 and set
.Va errno
to an appropriate value.
.Sh ERRORS
The
.Fn scandir ,
.Fn scandirat ,
.Fn scandir_b ,
and
.Fn scandirat_b
functions may fail and set
.Va errno
for any of the errors specified for the
.Xr opendir 3 ,
.Xr malloc 3 ,
.Xr readdir 3 ,
and
.Xr closedir 3
functions.
.Pp
The
.Fn fdscandir
and
.Fn fdscandir_b
functions may fail and set
.Va errno
for any of the errors specified for the
.Xr fdopendir 3 ,
.Xr malloc 3 ,
.Xr readdir 3 ,
and
.Xr closedir 3
functions.
.Sh SEE ALSO
.Xr openat 2 ,
.Xr directory 3 ,
.Xr malloc 3 ,
.Xr qsort 3 ,
.Xr strcoll 3 ,
.Xr strverscmp 3 ,
.Xr dir 5
.Sh STANDARDS
The
.Fn alphasort
and
.Fn scandir
functions are expected to conform to
.St -p1003.1-2008 .
The
.Fn scandirat
and
.Fn versionsort
functions are GNU extensions and conform to no standard.
The
.Fn fdscandir ,
.Fn scandir_b ,
.Fn fdscandir_b ,
and
.Fn scandirat_b
functions are
.Fx
extensions.
.Sh HISTORY
The
.Fn scandir
and
.Fn alphasort
functions appeared in
.Bx 4.2 .
The
.Fn scandir_b
function was added in
.Fx 11.0 .
The
.Fn scandirat
and
.Fn versionsort
functions were added in
.Fx 13.2 .
The
.Fn fdscandir ,
.Fn fdscandir_b ,
and
.Fn scandirat_b
functions were added in
.Fx 15.0 .

.\" Copyright (c) 1992, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software developed by the Computer Systems
.\" Engineering group at Lawrence Berkeley Laboratory under DARPA contract
.\" BG 91-66 and contributed to Berkeley.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd June 22, 2025
.Dt KVM_OPEN 3
.Os
.Sh NAME
.Nm kvm_open ,
.Nm kvm_open2 ,
.Nm kvm_openfiles ,
.Nm kvm_close
.Nd initialize kernel virtual memory access
.Sh LIBRARY
.Lb libkvm
.Sh SYNOPSIS
.In fcntl.h
.In kvm.h
.Ft kvm_t *
.Fn kvm_open "const char *execfile" "const char *corefile" "const char *swapfile" "int flags" "const char *errstr"
.Ft kvm_t *
.Fo kvm_open2
.Fa "const char *execfile"
.Fa "const char *corefile"
.Fa "int flags"
.Fa "char *errbuf"
.Fa "int (*resolver)(const char *name, kvaddr_t *addr)"
.Fc
.Ft kvm_t *
.Fn kvm_openfiles "const char *execfile" "const char *corefile" "const char *swapfile" "int flags" "char *errbuf"
.Ft int
.Fn kvm_close "kvm_t *kd"
.Sh DESCRIPTION
The functions
.Fn kvm_open ,
.Fn kvm_open2 ,
and
.Fn kvm_openfiles
return a descriptor used to access kernel virtual memory
via the
.Xr kvm 3
library routines.
Both active kernels and crash dumps are accessible
through this interface.
.Pp
The
.Fa execfile
argument is the executable image of the kernel being examined.
This file must contain a symbol table.
If this argument is
.Dv NULL ,
the currently running system is assumed,
as determined from
.Xr getbootfile 3 .
.Pp
The
.Fa corefile
argument is the kernel memory device file.
It can be either
.Pa /dev/mem
or a crash dump core generated by
.Xr savecore 8 .
If
.Fa corefile
is
.Dv NULL ,
the default indicated by
.Dv _PATH_MEM
from
.In paths.h
is used.
It can also be set to a special value
.Pa /dev/null
by utilities like
.Xr ps 1
that do not directly access kernel memory.
.Pp
The
.Fa swapfile
argument is currently unused.
.Pp
The
.Fa flags
argument indicates read/write access as in
.Xr open 2
and applies only to the core file.
Only
.Dv O_RDONLY ,
.Dv O_WRONLY ,
and
.Dv O_RDWR
are permitted.
.Pp
The
.Nm kvm
library provides two different error reporting mechanisms.
One provides backward compatibility with the SunOS kvm library, while the
other provides an improved error reporting framework.
The mechanism used by a descriptor is determined by the function used to
open the descriptor.
.Pp
The
.Fn kvm_open
function is the Sun kvm compatible open call.
Here, the
.Fa errstr
argument indicates how errors should be handled.
If it is
.Dv NULL ,
no errors are reported and the application cannot know the
specific nature of the failed kvm call.
If it is not
.Dv NULL ,
errors are printed to
.Dv stderr
with
.Fa errstr
prepended to the message, as in
.Xr perror 3 .
Normally, the name of the program is used here.
The string is assumed to persist at least until the corresponding
.Fn kvm_close
call.
.Pp
The
.Fn kvm_open2
and
.Fn kvm_openfiles
functions provide
.Bx
style error reporting.
Here, error messages are not printed out by the library.
Instead, the application obtains the error message
corresponding to the most recent kvm library call using
.Fn kvm_geterr
(see
.Xr kvm_geterr 3 ) .
The results are undefined if the most recent kvm call did not produce
an error.
Since
.Fn kvm_geterr
requires a kvm descriptor, but the open routines return
.Dv NULL
on failure,
.Fn kvm_geterr
cannot be used to get the error message if open fails.
Thus,
.Fn kvm_open2
and
.Fn kvm_openfiles
will place any error message in the
.Fa errbuf
argument.
This buffer should be _POSIX2_LINE_MAX characters large (from
<limits.h>).
.Pp
The
.Fa resolver
argument points to a function used by the
.Nm kvm
library to map symbol names to kernel virtual addresses.
When the
.Fa resolver
function is called,
.Fa name
specifies the requested symbol name.
If the function is able to resolve the name to an address,
the address should be set in
.Fa addr
and the function should return zero.
If the function is not able to resolve the name to an address,
it should return a non-zero value.
When opening a native kernel image,
.Fa resolver
may be set to
.Dv NULL
to use an internal function to resolve symbol names.
Non-native kernel images
.Pq such as when cross-debugging a crash dump
require a valid
.Fa resolver .
.Sh RETURN VALUES
The
.Fn kvm_open ,
.Fn kvm_open2 ,
and
.Fn kvm_openfiles
functions return a descriptor to be used
in all subsequent kvm library calls.
The library is fully re-entrant.
On failure,
.Dv NULL
is returned, in which case
.Fn kvm_open2
and
.Fn kvm_openfiles
write the error message into
.Fa errbuf .
.Pp
.Rv -std kvm_close
.Sh ERRORS
The
.Fn kvm_close
function may fail and set the global variable
.Va errno
for any of the errors specified for
.Xr close 2 .
.Pp
The
.Fn kvm_close
function may also fail and set
.Va errno
if:
.Bl -tag -width Er
.It Bq Er EINVAL
The value passed via
.Fa kd
was
.Dv NULL .
.El
.Sh NOTE
Full memory dumps taken on 13.x (excluding 13.0) and 14.x amd64 kernels
will cause both
.Fn kvm_open
and
.Fn kvm_open2
to fail since they do not provide sufficient information to figure out
where in physical memory the kernel was loaded.
Full memory dumps have to be explicitly enabled by setting the
.Va debug.minidump
.Xr sysctl 8
to 0.
.Sh SEE ALSO
.Xr dumpon 8 ,
.Xr close 2 ,
.Xr open 2 ,
.Xr kvm 3 ,
.Xr kvm_getargv 3 ,
.Xr kvm_getenvv 3 ,
.Xr kvm_geterr 3 ,
.Xr kvm_getprocs 3 ,
.Xr kvm_native 3 ,
.Xr kvm_nlist 3 ,
.Xr kvm_read 3 ,
.Xr kvm_write 3 ,
.Xr kmem 4 ,
.Xr mem 4
.Sh BUGS
There should not be three open calls.
The ill-defined error semantics
of the Sun library and the desire to have a backward-compatible library
for
.Bx
left little choice.
.Sh HISTORY
The
.Fn kvm_open2
function first appeared in
.Fx 11.0 .

if [ ! "$_NETWORKING_IPADDR_SUBR" ]; then _NETWORKING_IPADDR_SUBR=1
#
# Copyright (c) 2006-2013 Devin Teske
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#
############################################################ INCLUDES

BSDCFG_SHARE="/usr/share/bsdconfig"
. $BSDCFG_SHARE/common.subr || exit 1
f_dprintf "%s: loading includes..." networking/ipaddr.subr
f_include $BSDCFG_SHARE/dialog.subr
f_include $BSDCFG_SHARE/networking/common.subr
f_include $BSDCFG_SHARE/strings.subr

BSDCFG_LIBE="/usr/libexec/bsdconfig" APP_DIR="120.networking"
f_include_lang $BSDCFG_LIBE/$APP_DIR/include/messages.subr

############################################################ FUNCTIONS

# f_dialog_iperror $error $ipaddr
#
# Display a msgbox with the appropriate error message for an error returned by
# the f_validate_ipaddr function.
#
f_dialog_iperror()
{
	local error="$1" ip="$2"

	[ ${error:-0} -ne 0 ] || return $SUCCESS

	case "$error" in
	1) f_show_msg "$msg_ipv4_addr_octet_contains_invalid_chars" "$ip" ;;
	2) f_show_msg "$msg_ipv4_addr_octet_is_null" "$ip" ;;
	3) f_show_msg "$msg_ipv4_addr_octet_exceeds_max_value" "$ip" ;;
	4) f_show_msg "$msg_ipv4_addr_octet_missing_or_extra" "$ip" ;;
	esac
}

# f_dialog_validate_ipaddr $ipaddr
#
# Returns zero if the given argument (an IP address) is of the proper format.
#
# If the IP address is determined to be invalid, the appropriate error will be
# displayed using the f_dialog_iperror function above.
#
f_dialog_validate_ipaddr()
{
	local ip="$1"

	f_validate_ipaddr "$ip"
	local retval=$?

	# Produce an appropriate error message if necessary.
	[ $retval -eq $SUCCESS ] || f_dialog_iperror $retval "$ip"

	return $retval
}

# f_dialog_ip6error $error $ipv6_addr
#
# Display a msgbox with the appropriate error message for an error returned by
# the f_validate_ipaddr6 function above.
#
f_dialog_ip6error()
{
	local error="$1" ip="$2"

	[ ${error:-0} -ne 0 ] || return $SUCCESS

	case "$error" in
	1) f_show_msg "$msg_ipv6_addr_segment_contains_invalid_chars" "$ip" ;;
	2) f_show_msg "$msg_ipv6_addr_too_many_null_segments" "$ip" ;;
	3) f_show_msg "$msg_ipv6_addr_segment_contains_too_many_chars" "$ip" ;;
	4) f_show_msg "$msg_ipv6_addr_too_few_or_extra_segments" "$ip" ;;
	*)
		if [ $(( $error & 0xF )) -eq 5 ]; then
			# IPv4 at the end of IPv6 address is invalid
			f_dialog_iperror $(( $error >> 4 )) "$ip"
		fi
	esac
}

# f_dialog_validate_ipaddr6 $ipv6_addr
#
# Returns zero if the given argument (an IPv6 address) is of the proper format.
#
# If the IP address is determined to be invalid, the appropriate error will be
# displayed using the f_dialog_ip6error function above.
#
f_dialog_validate_ipaddr6()
{
	local ip="$1"

	f_validate_ipaddr6 "$ip"
	local retval=$?

	# Produce an appropriate error message if necessary.
	[ $retval -eq $SUCCESS ] || f_dialog_ip6error $retval "$ip"

	return $retval
}

# f_dialog_input_ipaddr $interface $ipaddr
#
# Allows the user to edit a given IP address. If the user does not cancel or
# press ESC, the $ipaddr environment variable will hold the newly-configured
# value upon return.
#
# Optionally, the user can enter the format "IP_ADDRESS/NBITS" to set the
# netmask at the same time as the IP address. If such a format is entered by
# the user, the $netmask environment variable will hold the newly-configured
# netmask upon return.
#
f_dialog_input_ipaddr()
{
	local interface="$1" _ipaddr="$2" _input

	#
	# Return with-error when there are NFS-mounts currently active. If the
	# IP address is changed while NFS-exported directories are mounted, the
	# system may hang (if any NFS mounts are using that interface).
	#
	if f_nfs_mounted && ! f_jailed; then
		local setting
		f_sprintf setting "$msg_current_ipaddr" "$interface" "$_ipaddr"
		f_noyes "$msg_nfs_mounts_may_cause_hang" "$setting" ||
			return $DIALOG_CANCEL
	fi

	local msg
	f_sprintf msg "$msg_please_enter_new_ip_addr" "$interface"

	#
	# Loop until the user provides taint-free input.
	#
	local retval
	while :; do
		#
		# Return error status if:
		# - User has either pressed ESC or chosen Cancel/No
		# - User has not made any changes to the given value
		#
		f_dialog_input _input "$msg" "$_ipaddr" \
		               "$hline_num_punc_tab_enter" || return $?
		[ "$_ipaddr" = "$_input" ] && return $DIALOG_CANCEL

		# Return success if NULL value was entered
		[ "$_input" ] || return $DIALOG_OK

		# Take only the first "word" of the user's input
		_ipaddr="$_input"
		_ipaddr="${_ipaddr%%[$IFS]*}"

		# Taint-check the user's input
		f_dialog_validate_ipaddr "${_ipaddr%%/*}" && break
	done

	#
	# Support the syntax: IP_ADDRESS/NBITS
	#
	local _netmask=""
	case "$_ipaddr" in
	*/*)
		local nbits="${_ipaddr#*/}" n=0
		_ipaddr="${_ipaddr%%/*}"

		#
		# Taint-check $nbits to be (a) a positive whole-integer,
		# and (b) to be less than or equal to 32. Otherwise, set
		# $n so that the below loop never executes.
		#
		( f_isinteger "$nbits" && [ $nbits -ge 0 -a $nbits -le 32 ] ) \
			|| n=4

		while [ $n -lt 4 ]; do
			_netmask="$_netmask${_netmask:+.}$((
				(65280 >> ($nbits - 8 * $n) & 255)
				* ((8*$n) < $nbits & $nbits <= (8*($n+1)))
				+ 255 * ($nbits > (8*($n+1)))
			))"
			n=$(( $n + 1 ))
		done
		;;
	esac

	ipaddr="$_ipaddr"
	[ "$_netmask" ] && netmask="$_netmask"

	return $DIALOG_OK
}

############################################################ MAIN

f_dprintf "%s: Successfully loaded." networking/ipaddr.subr

fi # ! $_NETWORKING_IPADDR_SUBR

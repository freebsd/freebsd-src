#!/bin/sh
#-
# Copyright (c) 2006-2013 Devin Teske
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#
############################################################ INCLUDES

# Prevent device.subr (included indirectly) from auto scanning; this will be
# performed indirectly later via f_dialog_menu_netdev() -- but only after we've
# successfully completed f_mustberoot_init().
#
DEVICE_SELF_SCAN_ALL=NO

BSDCFG_SHARE="/usr/share/bsdconfig"
. $BSDCFG_SHARE/common.subr || exit 1
f_dprintf "%s: loading includes..." "$0"
f_include $BSDCFG_SHARE/dialog.subr
f_include $BSDCFG_SHARE/mustberoot.subr
f_include $BSDCFG_SHARE/sysrc.subr
f_include $BSDCFG_SHARE/media/tcpip.subr
f_include $BSDCFG_SHARE/networking/device.subr
f_include $BSDCFG_SHARE/networking/ipaddr.subr
f_include $BSDCFG_SHARE/networking/media.subr
f_include $BSDCFG_SHARE/networking/netmask.subr

BSDCFG_LIBE="/usr/libexec/bsdconfig" APP_DIR="120.networking"
f_include_lang $BSDCFG_LIBE/$APP_DIR/include/messages.subr

f_index_menusel_keyword $BSDCFG_LIBE/$APP_DIR/INDEX "$pgm" ipgm &&
	pgm="${ipgm:-$pgm}"

############################################################ MAIN

# Incorporate rc-file if it exists
[ -f "$HOME/.bsdconfigrc" ] && f_include "$HOME/.bsdconfigrc"

#
# Process command-line options
#
while getopts h$GETOPTS_STDARGS flag; do
	case "$flag" in
	h|\?) f_usage $BSDCFG_LIBE/$APP_DIR/USAGE "PROGRAM_NAME" "$pgm" ;;
	esac
done
shift $(( $OPTIND - 1 ))

#
# Initialize
#
f_dialog_title "$msg_networking_devices"
f_dialog_backtitle "${ipgm:+bsdconfig }$pgm"
f_mustberoot_init

#
# Launch application main menu
#
defaultitem=
while :; do
	f_dialog_menu_netdev "$defaultitem" || break
	f_dialog_menutag_fetch interface
	defaultitem="$interface"

	#
	# dialog_menu_netdev adds an asterisk (*) to the right of the
	# device name if the interface is active. Remove the asterisk
	# from the device name if present.
	#
	case "$interface" in
	*\*) interface="${interface%?}" ;;
	esac

	#
	# Obtain initial interface settings to be configured. These will be
	# passed to the f_dialog_menu_netdev_edit function-call below which
	# will block until the user has either cancelled or finished editing
	# the values.
	#
	# First, attempt to read stored configuration from rc.conf(5) and
	# fallback to reading the active configuration if not configured in
	# the rc.conf(5) file(s).
	#
	dhcp=
	_ipaddr=
	_netmask=
	_ifconfig=$( f_sysrc_get ifconfig_$interface )
	if [ "$_ifconfig" ]; then
		# If DHCP, get IP address/netmask later from ifconfig(8)
		glob="[Dd][Hh][Cc][Pp]"
		case "$_ifconfig" in
		$glob) dhcp=1 ;;
		[Ss][Yy][Nn][Cc]$glob) dhcp=1 ;;
		[Nn][Oo][Ss][Yy][Nn][Cc]$glob) dhcp=1 ;;
		*)
			#
			# Get IP address/netmask from rc.conf(5) configuration
			#
			dhcp=
			eval "$(
				exec 2> /dev/null
				set -- $_ifconfig
				while [ $# -gt 0 ]; do
					case "$1" in
					inet)
						shift 1
						echo "_ipaddr='$1'"
						;;
					netmask)
						shift 1
						echo "_netmask='$1'"
						;;
					esac
					shift 1
				done
			)"
			;;
		esac
	fi

	#
	# Fill in IP address/netmask from active settings if no
	# configuration could be extrapolated from rc.conf(5)
	#
	[ "$_ipaddr"  ] || f_ifconfig_inet $interface _ipaddr
	[ "$_netmask" ] || f_ifconfig_netmask $interface _netmask

	# Get the extra options (this always comes from rc.conf(5))
	_options=$( f_ifconfig_options $interface )

	# Block on user-configuration of the probed settings
	f_dialog_menu_netdev_edit \
		"$interface" "$_ipaddr" "$_netmask" "$_options" $dhcp

	# Return to root menu if above returns success
	[ $? -eq $DIALOG_OK ] && break
done

exit $SUCCESS

################################################################################
# END
################################################################################

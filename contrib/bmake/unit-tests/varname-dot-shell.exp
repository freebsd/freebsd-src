Parsing varname-dot-shell.mk:10: ORIG_SHELL:=	${.SHELL}
Global: ORIG_SHELL = # (empty)
Var_Parse: ${.SHELL} (eval-keep-dollar-and-undefined)
Global: ignoring delete '.SHELL' as it is not found
Command: .SHELL = (details omitted)
Global: ORIG_SHELL = (details omitted)
Parsing varname-dot-shell.mk:12: .SHELL=		overwritten
Global: ignoring '.SHELL = overwritten' due to a command line variable of the same name
Parsing varname-dot-shell.mk:13: .if ${.SHELL} != ${ORIG_SHELL}
CondParser_Eval: ${.SHELL} != ${ORIG_SHELL}
Var_Parse: ${.SHELL} != ${ORIG_SHELL} (eval-defined-loud)
Var_Parse: ${ORIG_SHELL} (eval-defined-loud)
Comparing "(details omitted)" != "(details omitted)"
Parsing varname-dot-shell.mk:19: .MAKEFLAGS: .SHELL+=appended
ParseDependency(.MAKEFLAGS: .SHELL+=appended)
Command: ignoring '.SHELL += appended' as it is read-only
Parsing varname-dot-shell.mk:20: .if ${.SHELL} != ${ORIG_SHELL}
CondParser_Eval: ${.SHELL} != ${ORIG_SHELL}
Var_Parse: ${.SHELL} != ${ORIG_SHELL} (eval-defined-loud)
Var_Parse: ${ORIG_SHELL} (eval-defined-loud)
Comparing "(details omitted)" != "(details omitted)"
Parsing varname-dot-shell.mk:27: .undef .SHELL
Global: ignoring delete '.SHELL' as it is not found
Parsing varname-dot-shell.mk:28: .SHELL=		newly overwritten
Global: ignoring '.SHELL = newly overwritten' due to a command line variable of the same name
Parsing varname-dot-shell.mk:29: .if ${.SHELL} != ${ORIG_SHELL}
CondParser_Eval: ${.SHELL} != ${ORIG_SHELL}
Var_Parse: ${.SHELL} != ${ORIG_SHELL} (eval-defined-loud)
Var_Parse: ${ORIG_SHELL} (eval-defined-loud)
Comparing "(details omitted)" != "(details omitted)"
Parsing varname-dot-shell.mk:33: .MAKEFLAGS: -d0
ParseDependency(.MAKEFLAGS: -d0)
Global: .MAKEFLAGS =  -r -k -d cpv -d
Global: .MAKEFLAGS =  -r -k -d cpv -d 0
exit status 0

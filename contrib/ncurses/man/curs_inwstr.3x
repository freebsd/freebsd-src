.\"***************************************************************************
.\" Copyright 2018-2023,2024 Thomas E. Dickey                                *
.\" Copyright 2002-2012,2017 Free Software Foundation, Inc.                  *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_inwstr.3x,v 1.41 2024/04/20 21:20:07 tom Exp $
.TH curs_inwstr 3X 2024-04-20 "ncurses @NCURSES_MAJOR@.@NCURSES_MINOR@" "Library calls"
.ie \n(.g \{\
.ds `` \(lq
.ds '' \(rq
.\}
.el \{\
.ie t .ds `` ``
.el   .ds `` ""
.ie t .ds '' ''
.el   .ds '' ""
.\}
.de bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.SH NAME
\fB\%inwstr\fP,
\fB\%innwstr\fP,
\fB\%winwstr\fP,
\fB\%winnwstr\fP,
\fB\%mvinwstr\fP,
\fB\%mvinnwstr\fP,
\fB\%mvwinwstr\fP,
\fB\%mvwinnwstr\fP \-
get a wide-character string from a \fIcurses\fR window
.SH SYNOPSIS
.nf
\fB#include <curses.h>
.PP
\fBint inwstr(wchar_t *\fIwstr\fP);
\fBint innwstr(wchar_t *\fIwstr\fP, int \fIn\fP);
\fBint winwstr(WINDOW *\fIwin\fP, wchar_t *\fIwstr\fP);
\fBint winnwstr(WINDOW *\fIwin\fP, wchar_t *\fIwstr\fP, int \fIn\fP);
.PP
\fBint mvinwstr(int \fIy\fP, int \fIx\fP, wchar_t *\fIwstr\fP);
\fBint mvinnwstr(int \fIy\fP, int \fIx\fP, wchar_t *\fIwstr\fP, int \fIn\fP);
\fBint mvwinwstr(WINDOW *\fIwin\fP, int \fIy\fP, int \fIx\fP, wchar_t *\fIwstr\fP);
\fBint mvwinnwstr(WINDOW *\fIwin\fP, int \fIy\fP, int \fIx\fP, wchar_t *\fIwstr\fP, int \fIn\fP);
.fi
.SH DESCRIPTION
These routines return a string of \fBwchar_t\fP wide characters in \fIwstr\fP,
starting at the current cursor position in the named window.
.PP
The four functions with \fIn\fP as the last argument return
a leading substring at most \fIn\fP characters long
(exclusive of the trailing NUL).
Transfer stops at the end of the current line, or when \fIn\fP characters have
been stored at the location referenced by \fIwstr\fP.
.PP
If the size \fIn\fP is not large enough to store a complete complex character,
an error is generated.
.SH RETURN VALUE
All routines return
\fBERR\fP
upon failure.
Upon
successful completion, the *\fBinwstr\fP
routines return
\fBOK\fP, and the *\fBinnwstr\fP
routines return the
number of characters read into the string.
.PP
X/Open defines no error conditions.
This implementation returns an error
.bP
if the \fIwin\fP parameter is null or
.bP
if the \fIwstr\fP parameter is null, or
.bP
if no characters could be read.
.PP
Functions prefixed with \*(``mv\*('' first perform cursor movement and
fail if the position
.RI ( y ,
.IR x )
is outside the window boundaries.
.SH NOTES
All routines except
\fBwinnwstr\fP
may be macros.
.PP
Each cell in the window holds a complex character
(a spacing character and zero or more non-spacing characters)
together with attributes and color.
These functions store only the wide characters,
ignoring attributes and color.
Use \fBin_wchstr\fP to return the complex characters from a window.
.PP
Reading a line that overflows the array pointed to by
\fIwstr\fP
with
\fBinwstr\fP,
\fBmvinwstr\fP,
\fBmvwinwstr\fP
or
\fBwinwstr\fP
causes undefined results.
Therefore, the use of
\fBinnwstr\fP,
\fBmvinnwstr\fP,
\fBmvwinnwstr\fP, or
\fBwinnwstr\fP
is recommended.
.SH PORTABILITY
These functions are described in X/Open Curses, Issue 4.
.SH SEE ALSO
\fB\%curses\fP(3X),
\fB\%curs_inch\fP(3X),
\fB\%curs_inchstr\fP(3X),
\fB\%curs_instr\fP(3X),
\fB\%curs_in_wchstr\fP(3X)

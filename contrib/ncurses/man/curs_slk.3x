.\"***************************************************************************
.\" Copyright 2018-2023,2024 Thomas E. Dickey                                *
.\" Copyright 1998-2016,2017 Free Software Foundation, Inc.                  *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: curs_slk.3x,v 1.71 2024/04/20 18:54:36 tom Exp $
.TH curs_slk 3X 2024-04-20 "ncurses @NCURSES_MAJOR@.@NCURSES_MINOR@" "Library calls"
.ie \n(.g \{\
.ds `` \(lq
.ds '' \(rq
.\}
.el \{\
.ie t .ds `` ``
.el   .ds `` ""
.ie t .ds '' ''
.el   .ds '' ""
.\}
.
.de bP
.ie n  .IP \(bu 4
.el    .IP \(bu 2
..
.SH NAME
\fB\%slk_init\fP,
\fB\%slk_set\fP,
\fB\%slk_wset\fP,
\fB\%slk_refresh\fP,
\fB\%slk_noutrefresh\fP,
\fB\%slk_label\fP,
\fB\%slk_clear\fP,
\fB\%slk_restore\fP,
\fB\%slk_touch\fP,
\fB\%slk_attron\fP,
\fB\%slk_attrset\fP,
\fB\%slk_attroff\fP,
\fB\%slk_attr_on\fP,
\fB\%slk_attr_set\fP,
\fB\%slk_attr_off\fP,
\fB\%slk_attr\fP,
\fB\%slk_color\fP,
\fB\%extended_slk_color\fP \-
\fIcurses\fR soft label key routines
.SH SYNOPSIS
.nf
\fB#include <curses.h>
.PP
\fBint slk_init(int \fIfmt\fP);
.PP
\fBint slk_set(int \fIlabnum\fP, const char *\fIlabel\fP, int \fIalign\fP);
\fBint slk_wset(int \fIlabnum\fP, const wchar_t *\fIlabel\fP, int \fIalign\fP);
.PP
\fBchar *slk_label(int \fIlabnum\fP);
.PP
\fBint slk_refresh(void);
\fBint slk_noutrefresh(void);
\fBint slk_clear(void);
\fBint slk_restore(void);
\fBint slk_touch(void);
.PP
\fBint slk_attron(const chtype \fIattrs\fP);
\fBint slk_attroff(const chtype \fIattrs\fP);
\fBint slk_attrset(const chtype \fIattrs\fP);
\fBint slk_attr_on(attr_t \fIattrs\fP, void *\fIopts\fP);
\fBint slk_attr_off(const attr_t \fIattrs\fP, void *\fIopts\fP);
\fBint slk_attr_set(const attr_t \fIattrs\fP, short \fIpair\fP, void*\fIopts\fP);
\fI/* extension */
\fBattr_t slk_attr(void);
.PP
\fBint slk_color(short \fIpair\fP);
\fI/* extension */
\fBint extended_slk_color(int \fIpair\fP);
.fi
.SH DESCRIPTION
These functions manipulate the soft function key labels that some
hardware terminals support.
For those terminals that do not have soft labels,
\fIcurses\fP takes over the bottom line of \fB\%stdscr\fP,
reducing its vertical size and the value of \fBLINES\fP by one.
By default,
\fIcurses\fP uses eight labels of up to eight characters each.
.PP
\fI\%ncurses\fP
furthermore supports a mode comprising twelve labels of up to five
characters each,
following a convention associated with the IBM PC/AT keyboard.
\fI\%ncurses\fP simulates this mode by taking over up to two lines at
the bottom of the screen;
it does not try to use any hardware support for this
mode.
.SS Initialization
\fB\%slk_init\fP must be called before \fB\%initscr\fP or
\fB\%newterm\fP.
If \fB\%initscr\fP eventually uses a line from \fB\%stdscr\fP to
emulate the soft labels,
then \fIfmt\fP determines how the labels are arranged on the screen.
.TP 3
.B 0
indicates a 3\-2\-3 arrangement of
the labels.
.TP 3
.B 1
indicates a 4\-4 arrangement
.TP 3
.B 2
indicates the PC-like 4\-4\-4 mode.
.TP 3
.B 3
is again the PC-like 4\-4\-4 mode,
but in addition an index line is generated,
helping the user to associate each label with its numbered function key.
\fBLINES\fP and the vertical size of \fB\%stdscr\fP are further reduced.
.SS Labels
Populate the labels with normal strings
(\fB\%slk_set\fP)
or wide-character strings
(\fB\%slk_wset\fP).
Each function takes three parameters.
.TP 8 \" "labnum" + 2n
.I labnum
is the label number, from \fB1\fP to \fB8\fP
(12 if \fIfmt\fP in \fB\%slk_init\fP is \fB2\fP or \fB3\fP);
.TP
.I label
is be the string to put on the label,
up to eight
(five if \fIfmt\fP in \fB\%slk_init\fP is \fB2\fP or \fB3\fP)
characters in length.
A empty string or a null pointer sets up a blank label.
.TP
.I align
is
.BR 0 ,
.BR 1 ,
or
.BR 2 ,
aligning
.I label
to the left,
center,
or right,
respectively,
within the 8 (5) character cells housing it.
.PP
\fB\%slk_label\fP obtains the string assigned to label number
\fIlabnum\fP,
with any leading and trailing blanks stripped.
.SS "Screen Updates"
\fB\%slk_refresh\fP and \fB\%slk_noutrefresh\fP affect the soft key
label lines as \fB\%wrefresh\fP and \fB\%wnoutrefresh\fP do the
.I curses
window.
.PP
The \fB\%slk_clear\fP routine clears the soft labels from the screen.
.PP
The \fB\%slk_restore\fP routine restores the soft labels to the screen
after a \fB\%slk_clear\fP has been performed.
.PP
The \fB\%slk_touch\fP routine forces all the soft labels to be output
the next time a \fB\%slk_noutrefresh\fP is performed.
.SS "Video Attributes"
The
\fB\%slk_attron\fP,
\fB\%slk_attrset\fP,
\fB\%slk_attroff\fP,
and
\fB\%slk_attr\fP
routines correspond to
\fB\%attron\fP,
\fB\%attrset\fP,
\fB\%attroff\fP,
and
\fB\%attr_get\fP,
respectively.
They have an effect only if soft labels are simulated on the bottom line
of the screen.
The default highlight for soft key labels is \fB\%A_STANDOUT\fP
(as in System\ V \fIcurses\fP,
which does not document this fact).
.SS Colors
The \fB\%slk_color\fP routine corresponds to \fB\%color_set\fP.
It has an effect only
if soft labels are simulated on the bottom line of the screen.
.PP
Because \fB\%slk_color\fP accepts
only \fIshort\fP
(signed 16-bit integer)
values,
this implementation provides
\fB\%extended_slk_color\fP,
which accepts an \fIint\fP value of at least 32 bits.
.SH RETURN VALUE
Routines that return an integer return \fBERR\fP upon failure and
\fBOK\fP
(SVr4 specifies only
\*(``an integer value other than \fBERR\fP\*('')
upon successful completion.
.PP
X/Open Curses defines no error conditions.
.PP
In this implementation
.RS 3
.TP 5
\fBslk_attr\fP
returns the attribute used for the soft keys.
.TP 5
\fBslk_attroff\fP, \fBslk_attron\fP, \fBslk_clear\fP, \fBslk_noutrefresh\fP, \fBslk_refresh\fP, \fBslk_touch\fP
return an error
if the terminal or the softkeys were not initialized.
.TP 5
\fBslk_attrset\fP
returns an error
if the terminal or the softkeys were not initialized.
.TP 5
\fBslk_attr_set\fP
returns an error
if the terminal or the softkeys were not initialized, or
the color pair is outside the range 0..\fBCOLOR_PAIRS\fP\-1.
.TP 5
\fBslk_color\fP
returns an error
if the terminal or the softkeys were not initialized, or
the color pair is outside the range 0..\fBCOLOR_PAIRS\fP\-1.
.TP 5
\fBslk_init\fP
returns an error
if the format parameter is outside the range 0..3.
.TP 5
\fBslk_label\fP
returns \fBNULL\fP on error.
.TP 5
\fBslk_set\fP
returns an error
if the terminal or the softkeys were not initialized, or
the \fIlabnum\fP parameter is outside the range of label counts, or
if the format parameter is outside the range 0..2, or if
memory for the labels cannot be allocated.
.RE
.SH NOTES
Most applications would use \fB\%slk_noutrefresh\fP because a
\fB\%wrefresh\fP is likely to follow soon.
.SH EXTENSIONS
X/Open Curses documents the \fIopts\fP argument
as reserved for future use,
saying that it must be null.
This implementation
uses that parameter in ABI 6 for the functions which have a color pair
parameter to support extended color pairs.
.PP
For functions which modify the color,
e.g.,
\fB\%slk_attr_set\fP,
if \fIopts\fP is set it is treated as a pointer to \fIint\fP,
and used to set the color pair instead of the \fIshort\fP pair
parameter.
.SH PORTABILITY
X/Open Curses,
Issue 4 describes these functions,
with some differences from SVr4 \fIcurses\fP:
.bP
X/Open added functions like the SVr4 attribute-manipulation functions
\fB\%slk_attron\fP,
\fB\%slk_attroff\fP,
and
\fB\%slk_attrset\fP,
but which use \fI\%attr_t\fP parameters
(rather than \fI\%chtype\fP),
along with a reserved \fIopts\fP parameter.
.IP
Two of these new functions
(unlike the SVr4 functions)
have no provision for color:
\fB\%slk_attr_on\fP and \fB\%slk_attr_off\fP.
.IP
The third function \%(\fBslk_attr_set\fP) has a color pair parameter.
.bP
It added \fIconst\fP qualifiers to parameters (unnecessarily),
and
.bP
It added \fB\%slk_color\fP.
.PP
Although \fB\%slk_start\fP is declared in the \fIcurses\fP header file,
it was not documented by SVr4 other than its presence in a list
of libtermlib.so.1 symbols.
Reading the source code (i.e., Illumos):
.bP
\fB\%slk_start\fP has two parameters:
.RS
.bP
\fIng\fP (number of groups) and
.bP
\fIgp\fP (group pointer).
.RE
.bP
Soft-key groups are an array of \fIng\fP integers.
.bP
In SVr4, \fB\%slk_init\fP calls \fB\%slk_start\fP passing a null for \fIgp\fP.
For this case, \fB\%slk_start\fP uses the number of groups \fIng\fP
(3 for the 3-2-3 layout, 2 for the 4-4 layout) which \fB\%slk_init\fP provided.
.IP
If \fIng\fP is neither 2 or 3,
\fB\%slk_start\fP checks the terminfo \fBfln\fP (label_format) capability,
interpreting that as a comma-separated list of numbers,
e.g., \*(``3,2,3\*('' for the 3-2-3 layout.
.IP
Finally, if there is no \fBfln\fP capability,
\fB\%slk_start\fP returns \fBERR\fP.
.bP
If \fB\%slk_start\fP is given a non-null \fIgp\fP,
it copies the \fIng\fP elements of the group of soft-keys, up to 16.
.IP
If there are more than 16 elements, \fB\%slk_start\fP returns an error.
.bP
The format codes \fB2\fP and \fB3\fP for \fB\%slk_init\fP
were added by \fI\%ncurses\fP in 1996.
PDCurses 2.4 added this feature in 2001.
.PP
The function \fB\%slk_attr\fP was added by \fI\%ncurses\fP in 1996.
.PP
X/Open Curses does not specify a limit for the number of colors and
color pairs which a terminal can support.
However, in its use of \fIshort\fP for the parameters,
it carries over SVr4's implementation detail for the compiled
terminfo database, which uses signed 16-bit numbers.
This implementation provides extended versions of those functions
which use \fIint\fP parameters,
allowing applications to use larger color- and pair-numbers.
.SH HISTORY
SVr3 introduced these functions:
  \fBslk_clear\fP
  \fBslk_init\fP
  \fBslk_label\fP
  \fBslk_noutrefresh\fP
  \fBslk_refresh\fP
  \fBslk_restore\fP
  \fBslk_set\fP
  \fBslk_touch\fP
.PP
SVr4 added these functions:
  \fBslk_attroff\fP
  \fBslk_attron\fP
  \fBslk_attrset\fP
  \fBslk_start\fP
.PP
X/Open Curses added these:
  \fBslk_attr_off\fP
  \fBslk_attr_on\fP
  \fBslk_attr_set\fP
  \fBslk_color\fP
  \fBslk_wset\fP
.SH SEE ALSO
\fB\%curses\fP(3X),
\fB\%curs_attr\fP(3X),
\fB\%curs_initscr\fP(3X),
\fB\%curs_refresh\fP(3X),
\fB\%curs_variables\fP(3X)

.\" Copyright (c) 2011 Kai Wang
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $Id: dwarf_get_arange_info.3 3644 2018-10-15 19:55:01Z jkoshy $
.\"
.Dd April 16, 2011
.Dt DWARF_GET_ARANGE_INFO 3
.Os
.Sh NAME
.Nm dwarf_get_arange_info
.Nd extract address range information from a descriptor
.Sh LIBRARY
.Lb libdwarf
.Sh SYNOPSIS
.In libdwarf.h
.Ft int
.Fo dwarf_get_arange_info
.Fa "Dwarf_Arange ar"
.Fa "Dwarf_Addr *start"
.Fa "Dwarf_Unsigned *length"
.Fa "Dwarf_Off *cu_die_offset"
.Fa "Dwarf_Error *err"
.Fc
.Sh DESCRIPTION
Function
.Fn dwarf_get_arange_info
extracts address range information from a
.Vt Dwarf_Arange
descriptor.
.Pp
Argument
.Ar ar
should reference a valid
.Vt Dwarf_Arange
descriptor returned by function
.Xr dwarf_get_aranges 3 .
.Pp
Argument
.Ar start
should point to a location which will hold the start value of the
address range associated with the descriptor.
.Pp
Argument
.Ar length
should point to a location which will hold the length in bytes of the
address range associated with the descriptor.
.Pp
Argument
.Ar cu_die_offset
should point to a location which will be set to an offset, relative to
the
.Dq ".debug_info"
section, of the first debugging information entry in the compilation
unit associated with argument
.Ar ar .
.Pp
If argument
.Ar err
is not NULL, it will be used to store error information in case of an
error.
.Sh RETURN VALUES
Function
.Fn dwarf_get_arange_info
returns
.Dv DW_DLV_OK
when it succeeds.
In case of an error, it returns
.Dv DW_DLV_ERROR
and sets the argument
.Ar err .
.Sh EXAMPLES
To loop through all the address lookup table entries, use:
.Bd -literal -offset indent
Dwarf_Debug dbg;
Dwarf_Addr start;
Dwarf_Arange *aranges;
Dwarf_Off die_off;
Dwarf_Signed i, cnt;
Dwarf_Unsigned length;
Dwarf_Error de;

if (dwarf_get_aranges(dbg, &aranges, &cnt, &de) != DW_DLV_OK)
	errx(EXIT_FAILURE, "dwarf_get_aranges: %s",
	    dwarf_errmsg(de));
for (i = 0; i < cnt; i++) {
	if (dwarf_get_arange_info(aranges[i], &start, &length,
	    &die_off, &de) != DW_DLV_OK) {
		warnx("dwarf_get_arange_info: %s",
		    dwarf_errmsg(de));
		continue;
	}
	/* Do something with the returned information. */
}
.Ed
.Sh ERRORS
Function
.Fn dwarf_get_arange_info
can fail with:
.Bl -tag -width ".Bq Er DW_DLE_ARGUMENT"
.It Bq Er DW_DLE_ARGUMENT
One of the arguments
.Ar ar ,
.Ar start ,
.Ar length
or
.Ar cu_die_offset
was NULL.
.El
.Sh SEE ALSO
.Xr dwarf 3 ,
.Xr dwarf_get_arange 3 ,
.Xr dwarf_get_arange_cu_header_offset 3 ,
.Xr dwarf_get_aranges 3 ,
.Xr dwarf_get_cu_die_offset 3

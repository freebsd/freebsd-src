.\" Copyright (c) 2011 Kai Wang
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $Id: dwarf_get_fde_list.3 3644 2018-10-15 19:55:01Z jkoshy $
.\"
.Dd November 9, 2011
.Dt DWARF_GET_FDE_LIST 3
.Os
.Sh NAME
.Nm dwarf_get_fde_list
.Nd retrieve frame information
.Sh LIBRARY
.Lb libdwarf
.Sh SYNOPSIS
.In libdwarf.h
.Ft int
.Fo dwarf_get_fde_list
.Fa "Dwarf_Debug dbg"
.Fa "Dwarf_Cie **cie_list"
.Fa "Dwarf_Signed *cie_count"
.Fa "Dwarf_Fde **fde_list"
.Fa "Dwarf_Signed *fde_count"
.Fa "Dwarf_Error *err"
.Fc
.Ft int
.Fo dwarf_get_fde_list_eh
.Fa "Dwarf_Debug dbg"
.Fa "Dwarf_Cie **cie_list"
.Fa "Dwarf_Signed *cie_count"
.Fa "Dwarf_Fde **fde_list"
.Fa "Dwarf_Signed *fde_count"
.Fa "Dwarf_Error *err"
.Fc
.Sh DESCRIPTION
These functions retrieve frame related information for the specified
DWARF debug context.
.Pp
Function
.Fn dwarf_get_fde_list
retrieves frame information from the DWARF section named
.Dq ".debug_frame" .
For objects containing GNU style C++ exception handling
information, the function
.Fn dwarf_get_fde_list_eh
retrieves frame information from the section named
.Dq ".eh_frame" .
.Pp
Frame information is returned using opaque descriptors
of type
.Vt Dwarf_Cie
and
.Vt Dwarf_Fde .
Applications need to use the other frame related functions in the
DWARF(3) API set to retrieve the information contained in these
descriptors.
.Pp
Argument
.Ar dbg
should reference a DWARF debug context allocated using
.Xr dwarf_init 3 .
.Pp
Argument
.Ar cie_list
should point to a location that will be set to a pointer to an array
of
.Vt Dwarf_Cie
descriptors.
.Pp
Argument
.Ar cie_count
should point to a location that will be set to the number of
.Vt Dwarf_Cie
descriptors returned.
.Pp
Argument
.Ar fde_list
should point to a location that will be set to a pointer to an array
of
.Vt Dwarf_Fde
descriptors.
.Pp
Argument
.Ar fde_count
should point to a location that will be set to the number of
.Vt Dwarf_Fde
descriptors returned.
.Pp
If argument
.Ar err
is not NULL, it will be used to store error information in case of an
error.
.Ss Memory Management
The memory areas used for the arrays returned in arguments
.Ar cie_list
and
.Ar fde_list
are owned by the
.Lb libdwarf .
Application code should not attempt to directly free these areas.
Portable applications should instead use the
.Xr dwarf_fde_cie_list_dealloc 3
function to indicate that these memory areas may be freed.
.Sh RETURN VALUES
On success, these functions returns
.Dv DW_DLV_OK .
They return
.Dv DW_DLV_NO_ENTRY
if there is no frame information associated with the given DWARF
debug context.
In case of an error, they return
.Dv DW_DLV_ERROR
and set the argument
.Ar err .
.Sh EXAMPLES
To obtain frame information from the
.Dq ".debug_frame"
section, use:
.Bd -literal -offset indent
Dwarf_Debug dbg;
Dwarf_Cie *cie_list, cie;
Dwarf_Fde *fde_list, fde;
Dwarf_Off fde_offset, cie_offset;
Dwarf_Unsigned func_len, fde_length, fde_instlen;
Dwarf_Signed cie_count, fde_count, cie_index;
Dwarf_Addr low_pc;
Dwarf_Ptr fde_addr, fde_inst, cie_inst;
Dwarf_Error de;
int i;

if (dwarf_get_fde_list(dbg, &cie_list, &cie_count,
    &fde_list, &fde_count, &de) != DW_DLV_OK) {
	errx(EXIT_FAILURE, "dwarf_get_fde_list failed: %s",
	    dwarf_errmsg(de));
}

for (i = 0; i < fde_count; i++) {
	if (dwarf_get_fde_n(fde_list, i, &fde, &de) != DW_DLV_OK) {
		warnx("dwarf_get_fde_n failed: %s",
		    dwarf_errmsg(de));
		continue;
	}
	if (dwarf_get_cie_of_fde(fde, &cie, &de) != DW_DLV_OK) {
		warnx("dwarf_get_fde_n failed: %s",
		    dwarf_errmsg(de));
		continue;
	}
	if (dwarf_get_fde_range(fde, &low_pc, &func_len, &fde_addr,
	    &fde_length, &cie_offset, &cie_index, &fde_offset,
	    &de) != DW_DLV_OK) {
		warnx("dwarf_get_fde_range failed: %s",
		    dwarf_errmsg(de));
		continue;
	}
	if (dwarf_get_fde_instr_bytes(fde, &fde_inst, &fde_instlen,
	    &de) != DW_DLV_OK) {
		warnx("dwarf_get_fde_instr_bytes failed: %s",
		    dwarf_errmsg(de));
		continue;
	}

	/* ... Use the retrieved frame information ... */
}

/* Indicate that the returned arrays may be freed. */
dwarf_fde_cie_list_dealloc(dbg, cie_list, cie_count, fde_list,
    fde_count);
.Ed
.Sh ERRORS
These functions may fail with the following errors:
.Bl -tag -width ".Bq Er DW_DLE_ARGUMENT"
.It Bq Er DW_DLE_ARGUMENT
One of the arguments
.Va dbg ,
.Va cie_list ,
.Va cie_count ,
.Va fde_list
or
.Va fde_count
was NULL.
.It Bq Er DW_DLE_NO_ENTRY
There is no frame information associated with the giving DWARF debug
context.
.El
.Sh SEE ALSO
.Xr dwarf 3 ,
.Xr dwarf_fde_cie_list_dealloc 3 ,
.Xr dwarf_get_cie_index 3 ,
.Xr dwarf_get_cie_of_fde 3 ,
.Xr dwarf_get_fde_at_pc 3 ,
.Xr dwarf_get_fde_instr_bytes 3 ,
.Xr dwarf_get_fde_n 3 ,
.Xr dwarf_get_fde_range 3 ,
.Xr dwarf_set_frame_cfa_value 3 ,
.Xr dwarf_set_frame_rule_initial_value 3 ,
.Xr dwarf_set_frame_rule_table_size 3 ,
.Xr dwarf_set_frame_same_value 3 ,
.Xr dwarf_set_frame_undefined_value 3

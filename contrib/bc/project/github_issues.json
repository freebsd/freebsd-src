[
  {
    "assignees": [],
    "author": {
      "id": "U_kgDOCpvj3Q",
      "is_bot": false,
      "login": "Palafitas",
      "name": "Palafitas"
    },
    "body": "I'm using 'bc' to perform a calculation in a shell script and I'm getting the incorrect result from a simple calculation...\n\n80 - (30 * 0) / 50 - (80 / 100) * 38\n\nbc returns value 80\n\nReal value is 49.6\n\n\nOBS.: Can use the calculation direct in bc command to see output\nOBS.: bc version is 1.07.1",
    "closed": true,
    "closedAt": "2025-02-25T19:10:08Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc6f65pc",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Two things.\n\nFirst, `bc` is not like other calculators that figure out what precision they need. Instead, `bc` requires you to set the precision before doing any calculation.\n\nThe way to do this is to set the special variable `scale` to an integer value, and then calculations will be done to at least that precision, in digits after the decimal point.\n\nOne quirk of `bc` is that `scale` is set to 0 by default, which means integer-only math.\n\nApplying integer-only math to the expression you gave, we get:\n\n```\n80 - (30 * 0) / 50 - (80 / 100) * 38\n80 - 0 / 50 - (80 / 100) * 38\n80 - 0 - (80 / 100) * 38\n80 - (80 / 100) * 38\n80 - 0 * 38\n80\n```\n\nNotice that `80 / 100` simplifies to 0 with integer-only arithmetic. That is expected.\n\nNow, watch what happens when we set `scale` to 1 first:\n\n```\nscale = 1\n80 - (30 * 0) / 50 - (80 / 100) * 38\n80 - 0 / 50 - (80 / 100) * 38\n80 - 0 - (80 / 100) * 38\n80 - (80 / 100) * 38\n80 - 0.8 * 38\n80 - 30.4\n49.6\n```\n\nAnd that is the value you expected.\n\nSo there is no calculation error; just be sure to set the precision with `scale` before running a calculation.\n\nSecond, this `bc` has never had a `1.07.1` version. That is, in fact, the latest version of the [GNU `bc`][1], so you are not even running this `bc`. So I am closing this issue as invalid.\n\n[1]: https://www.gnu.org/software/bc/",
        "createdAt": "2025-02-25T19:10:08Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/87#issuecomment-2683017820",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc6f9KsZ",
        "author": {
          "login": "Palafitas"
        },
        "authorAssociation": "NONE",
        "body": "Thanks, i solved the problem with '-l' to 'bc'\n\ne.g:\necho '1 + 1' | bc -l",
        "createdAt": "2025-02-26T00:44:54Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/87#issuecomment-2683611929",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2025-02-25T17:57:06Z",
    "id": "I_kwDOCL0xJc6rnKtq",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 87,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Calculation error",
    "updatedAt": "2025-02-26T00:44:54Z",
    "url": "https://github.com/gavinhoward/bc/issues/87"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjI2Nzg4ODg=",
      "is_bot": false,
      "login": "shpati",
      "name": ""
    },
    "body": "Hi! \r\nI am trying to load multiple .bc files stored in the same directory as the program (from your modified function files from Carl's collection) but bc will not load them. \r\n\r\nThe command I give is: \r\n`bc -l *.bc`\r\n\r\nThe error I get is: \r\n```\r\nFatal error: cannot open file: *.bc\r\n    0: (main)\r\n```\r\nLoading files separately works, e.g. bc -l file1.bc file2.bc\r\nLoading files using wildcards works in the gnu bc, and it is practical.  \r\n\r\nI am using the windows 10 terminal. ",
    "closed": true,
    "closedAt": "2024-11-10T14:27:05Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc6TB7mr",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Hello.\r\n\r\nI am actually really surprised that GNU `bc` will load the files in the Windows 10 terminal, and that is because, as far as I know, wildcard expansion is done by the shell, not the program. So GNU `bc` doesn't actually do it, or so I thought.\r\n\r\nIf you were to run my `bc` with that command under bash on Linux, it would work fine because bash would expand the wildcard into a list of file names and pass that to my `bc`. It seems the Windows 10 terminal does not do that, but passes the wildcard to my `bc`, which does not know how to expand it.\r\n\r\nUnfortunately, wildcard expansion is a heavy feature, not one I can implement in an afternoon. I think it is out of scope for my `bc`, and I don't plan on implementing it.\r\n\r\nThere might be some way to get the Windows 10 terminal to do wildcard expansion, but if that doesn't work, you can run my `bc` under bash using the Windows Subsystem for Linux.",
        "createdAt": "2024-11-10T14:27:05Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/85#issuecomment-2466757035",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc6TC19F",
        "author": {
          "login": "shpati"
        },
        "authorAssociation": "NONE",
        "body": "Thanks a lot for the detailed answer Gavin! It seems like the solution is simple and does not need any change in code. You only need to change the linker used during compiling, like this: \r\n\r\n`cl example.c /link setargv.obj`\r\n\r\nCan you try it please? 🙂\r\n\r\nSource: https://learn.microsoft.com/en-us/cpp/c-language/expanding-wildcard-arguments?view=msvc-170",
        "createdAt": "2024-11-11T00:00:13Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/85#issuecomment-2466996037",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc6UKlNz",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I tried adding `setargv.obj` to the linker command (next to `bcrypt.lib`), and that didn't work.\r\n\r\nIf you can get it working, feel free to send me a PR, and I will probably accept it.",
        "createdAt": "2024-11-19T14:00:38Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/85#issuecomment-2485801843",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2024-11-10T09:58:36Z",
    "id": "I_kwDOCL0xJc6dxwXg",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 85,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "NOT_PLANNED",
    "title": "Does not load multiple .bc files using * wildcard",
    "updatedAt": "2024-11-19T14:00:40Z",
    "url": "https://github.com/gavinhoward/bc/issues/85"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjgyNzIwNQ==",
      "is_bot": false,
      "login": "DanielRuf",
      "name": "Daniel Ruf"
    },
    "body": "I'm new to C and I try to create a PHP extension of bc with SWIG, but as direct replacement for `eval()` in PHP.\r\n\r\nWhat is the **correct function from the bc code to parse a string** and return the calculation result or some error / null when parsing fails?\r\n\r\nI tried looking at the code, but didn't find the right one.",
    "closed": true,
    "closedAt": "2025-02-16T13:40:55Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc6LSQRq",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I'm not sure what you're asking. `bc` is a program, not a library, and even though I *do* have a library, it does not include expression parsing.\r\n\r\nAre you wanting a library that can parse `bc` expressions? Unfortunately, this `bc` cannot do that, and to do so would require refactoring that I don't have time for.",
        "createdAt": "2024-09-08T20:42:08Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/83#issuecomment-2336818282",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc6LSRDF",
        "author": {
          "login": "DanielRuf"
        },
        "authorAssociation": "NONE",
        "body": "Understood, so I can not do some `bc_parse(some-string-from-stdin)` with that and I have to resort to some other solution then.\r\n\r\nWhere can I find the current logic of the CLI? Maybe I can do something with that.",
        "createdAt": "2024-09-08T20:56:06Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/83#issuecomment-2336821445",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc6LSRiv",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "You are correct.\r\n\r\nHowever, what is easiest depends on what you are trying to do. Do you need the full `bc` language? Or do you just need simple expressions? Or something else?\r\n\r\nIf you need the full language, the best solution would be to run `bc` as a child process and just feed it data.\r\n\r\nIf you need simple expression parsing, then you could implement the parsing with Lex and Yacc, and then use `bcl`, the `bc` library, to do the math.\r\n\r\nIf you need something else, we can see what might work best.",
        "createdAt": "2024-09-08T21:03:51Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/83#issuecomment-2336823471",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc6LSSix",
        "author": {
          "login": "DanielRuf"
        },
        "authorAssociation": "NONE",
        "body": "> Or do you just need simple expressions? Or something else?\r\n\r\nJust basic calculations like `eval(1+2/3*4-5)`.\r\n\r\n> If you need the full language, the best solution would be to run bc as a child process and just feed it data.\r\n\r\nUnfortunately this brings much overhead, I already tested that with `exec(\"bc ...\")` in PHP.\r\n\r\n> If you need simple expression parsing, then you could implement the parsing with Lex and Yacc, and then use bcl, the bc library, to do the math.\r\n\r\nThis sounds more like what I am looking for, even though I wanted to avoid Yacc.",
        "createdAt": "2024-09-08T21:19:11Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/83#issuecomment-2336827569",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc6LSSw-",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "While refactoring to bring the full `bc` parser into the library may be too much, I may be able to whip a small expression parser in a few hours.\r\n\r\nDo you just need the four basic arithmetic operators? Do you need parentheses? Do you need square root?\r\n\r\nLet me know what you need. I may need a week to get it to you.",
        "createdAt": "2024-09-08T21:22:48Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/83#issuecomment-2336828478",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc6LSTkN",
        "author": {
          "login": "DanielRuf"
        },
        "authorAssociation": "NONE",
        "body": "I will check that and let you know in the next days. At least parentheses are also needed.\r\n\r\nIf there is at least one function (like sqrt or max) implemened, then I can check the implementation and contribute some of my time to implement more or at least I can help with that.",
        "createdAt": "2024-09-08T21:35:19Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/83#issuecomment-2336831757",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc6LSUHv",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "`sqrt()` is already builtin; I'll add parsing for it. I can also add parsing for `max()` and `min()`.\r\n\r\nYou can see everything that's builtin [here](https://github.com/gavinhoward/bc/blob/master/manuals/bcl.3.md).",
        "createdAt": "2024-09-08T21:44:30Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/83#issuecomment-2336834031",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc6LTBjd",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Ack! I'm sorry! I just had something come up in my personal life that will take a lot of time to resolve!\r\n\r\nSo despite hoping to help with the parsing, I can't even help with a simple thing anymore.\r\n\r\nHowever, I can point you in the right direction. Use the [Shunting-Yard Algorithm](https://en.wikipedia.org/wiki/Shunting-yard_algorithm) like [this](https://softwareengineering.stackexchange.com/questions/254074/how-exactly-is-an-abstract-syntax-tree-created/254075#254075) to make an abstract syntax tree, and then do a post-order traversal.\r\n\r\nIf you need examples of how to use `bcl`, then [its test code](https://github.com/gavinhoward/bc/blob/master/tests/bcl.c) is a good start.\r\n\r\nAgain, I'm really sorry about this, but I figured it would be better to tell you sooner rather than later.",
        "createdAt": "2024-09-09T03:03:41Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/83#issuecomment-2337020125",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc6LTUUy",
        "author": {
          "login": "DanielRuf"
        },
        "authorAssociation": "NONE",
        "body": "No problem and thanks for letting me know. I will try to understand and solve it.",
        "createdAt": "2024-09-09T04:37:26Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/83#issuecomment-2337097010",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2024-09-08T20:22:38Z",
    "id": "I_kwDOCL0xJc6Vwp4y",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 83,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "what function to call for parsing string expressions",
    "updatedAt": "2025-02-16T13:40:55Z",
    "url": "https://github.com/gavinhoward/bc/issues/83"
  },
  {
    "assignees": [],
    "author": {
      "id": "U_kgDOBqIXaQ",
      "is_bot": false,
      "login": "GregTonoski",
      "name": "Greg Tonoski"
    },
    "body": "Would you like to add elliptic curve point multiplication (https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication) to math library, perhaps?",
    "closed": true,
    "closedAt": "2024-08-31T18:09:54Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc6Kdiqk",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I have wanted to, but I haven't *despite* wanting to. And there is a good reason: someone is going to use my `bc` to implement cryptography with vulnerabilities.\r\n\r\nIf my `bc` ships the elliptic curve arithmetic to do that, I will feel responsible. If they write the arithmetic themselves, well, they are responsible.\r\n\r\nOf course, there are other reasons to want it, but because of cryptography, I hesitate to add it.\r\n\r\nSorry!",
        "createdAt": "2024-08-31T18:09:54Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/82#issuecomment-2322999972",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2024-08-31T07:57:25Z",
    "id": "I_kwDOCL0xJc6U72YL",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 82,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Feature request: elliptic curve point multiplication",
    "updatedAt": "2024-08-31T18:09:55Z",
    "url": "https://github.com/gavinhoward/bc/issues/82"
  },
  {
    "assignees": [],
    "author": {
      "id": "U_kgDOBqIXaQ",
      "is_bot": false,
      "login": "GregTonoski",
      "name": "Greg Tonoski"
    },
    "body": "",
    "closed": true,
    "closedAt": "2024-08-30T14:14:44Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc6KXcRi",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Thank you so much for the compliment! I hardly get them nowadays. You made my day!\r\n\r\nI presume \"EOM\" means \"End of Message\" which means there is no bug? So I'm going to close this now, but if you do have a bug, feel free to reopen.",
        "createdAt": "2024-08-30T14:14:44Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/80#issuecomment-2321400930",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2024-08-30T07:30:14Z",
    "id": "I_kwDOCL0xJc6UzPqQ",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 80,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Excellent. Works fine. Thank you. [EOM]",
    "updatedAt": "2024-08-30T14:14:44Z",
    "url": "https://github.com/gavinhoward/bc/issues/80"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjU3MDY1NjU3",
      "is_bot": false,
      "login": "exikyut",
      "name": ""
    },
    "body": "Was just playing around and happened to get my stack out of sync:\r\n\r\n```\r\n1\r\n+\r\n\r\nRuntime error: stack has too few elements\r\n    0: (main)\r\n```\r\n\r\nBut I noticed this cleared the stack:\r\n\r\n<pre>\r\nf\r\n<i>(no output)</i>\r\n</pre>\r\n\r\nTrying to improve my edge-case-fu spidey sense :) I thought I'd check how other dc implementations behave.\r\n\r\nGNU `dc` immediately showed me something might be up:\r\n\r\n```\r\n1\r\n+\r\ndc: stack empty\r\nf\r\n1\r\nq\r\n$ _\r\n```\r\n\r\nHuh.\r\n\r\nOpenBSD `dc` produced byte-identical output to the above.\r\n\r\nOK... what should arbitrate as reference here? I guess some form of going back to the beginning.\r\n\r\nHow far can we go back?\r\n\r\nApparently the first version of `dc` was written in B while UNIX was being ported. Man that would be fun to play with. Perhaps there's a printout of it starting on page 9,576 of an OCR-averse PDF on bitsavers just waiting to be found :smile: \r\n\r\nhttp://takahirox.github.io/pdp11-js/unixv6.html and http://pdp11.aiju.de/ both emulate UNIX v6 in-browser, which is nice and accessible. The `dc` in both of these has the same size and timestamp; copying from the second emulator for fun, which emulates an uppercase teletype, we get:\r\n\r\n```\r\n# DC\r\n1\r\n+\r\n( +) ?\r\nF\r\n1\r\nQ\r\n# # \r\n```\r\n\r\nHrm. That's V6 UNIX. Can we go further back?\r\n\r\nYes and no, as far as I can manage.\r\n\r\nIt looks like a V1+V2 amalgamation was put together using surviving source code and tape dumps: https://www.in-ulm.de/~mascheck/various/ancient/\r\n\r\nThe project appears to have been quietly migrated to https://github.com/DoctorWkt/unix-jun72, with terrifying instructions to \"now run `make`\" underneath a wall of \"last modified: 16 years ago\" :melting_face:, but I discovered some pre-built SIMH images at https://code.google.com/archive/p/unix-jun72/downloads, which is where the project previously lived (and is what the page in the previous paragraph links to), which still work perfectly - you just run `pdp11 simh.cfg`.\r\n\r\nUnfortunately, while the system is already saying `:login:` before you can even blink and figure out whether it worked, and the distribution includes `dc`, its `f` command appears to be broken... even though I see references to support for an `f` command [on line 949 in dc1.s](https://github.com/DoctorWkt/unix-jun72/blob/1d438bd5874ec628157fbeab370c8e3f3a3ecb8b/src/cmd/dc1.s#L949) (the source is distributed across [dc2.s](https://github.com/DoctorWkt/unix-jun72/blob/1d438bd5874ec628157fbeab370c8e3f3a3ecb8b/src/cmd/dc2.s), [dc3.s](https://github.com/DoctorWkt/unix-jun72/blob/1d438bd5874ec628157fbeab370c8e3f3a3ecb8b/src/cmd/dc3.s), [dc4.s](https://github.com/DoctorWkt/unix-jun72/blob/1d438bd5874ec628157fbeab370c8e3f3a3ecb8b/src/cmd/dc4.s) and [dc5.s](https://github.com/DoctorWkt/unix-jun72/blob/1d438bd5874ec628157fbeab370c8e3f3a3ecb8b/src/cmd/dc5.s), presumably due to memory constraints). I'm not sure if I'm falling through a `default: exit(0);`, a segfault, or a case of mismatching binary/source.\r\n\r\nThe path forward there would be figuring out how to recompile the `dc` implementation; I think this might be possible but it's beyond the scope of the cursory level of interest I approached this with.\r\n\r\nIf anyone wants a rainy day project, I would be really interested to learn more about the result of others' digging around to get the earliest surviving copies of `dc` running.\r\n\r\nZooming back out to the topic, it would **seem** that current consensus is that errors *of this type* don't consume the stack; they leave it alone. But it would be nice to formally qualify this situation better. How should that be framed? Parser consumption expectations? Stack effects by errors in general?\r\n\r\nThis bugreport is somewhat of a thought experiment. I don't have any authoritative ideas or suggestions myself.",
    "closed": true,
    "closedAt": "2024-08-23T03:03:02Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc6Bc1ec",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Thank you for digging up the history!\r\n\r\nYou are correct that my `dc` clears the stack. When I was implementing `bc` and `dc`, I wanted to minimize the possibility that an error could screw up code later.\r\n\r\nHence, my `bc` and `dc` both [\"reset\"][1] on error, which means they clear everything and try to start completely fresh.\r\n\r\nThat said, the documentation could be clearer on that; I could make it say that errors clear the stack too. (And they do clear the stack because they have to clear the stack in `bc` since the stack is implicit.)\r\n\r\nHowever, this could go both ways:\r\n\r\n* I could declare this as a mere *documentation bug*, since `dc` is *not* standardized. In that case, I would just update the manual.\r\n* Or I could declare this a *conformance bug*, because while there is no standard, all other `dc` implementations do the opposite. In this case, I would make the change and fix the bugs that pop up.\r\n\r\nQuite frankly, I'm not looking forward to doing a full release cycle, which includes 2 weeks of fuzzing (during which my machine is unusable) and 24 hours of tests, possibly repeated. This means I want to fix the docs and call it a day, but going off of what I *want* to do is not rational.\r\n\r\nI don't know if anyone watches this repo, but this is one case where I'd like to hear comments from users.\r\n\r\n[1]: https://github.com/gavinhoward/bc/blob/master/manuals/bc/A.1.md#reset",
        "createdAt": "2024-06-16T19:15:40Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/79#issuecomment-2171819932",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc6BfXEg",
        "author": {
          "login": "exikyut"
        },
        "authorAssociation": "NONE",
        "body": "> You are correct that my `dc` clears the stack. When I was implementing `bc` and `dc`, I wanted to minimize the possibility that an error could screw up code later.\r\n> \r\n> Hence, my `bc` and `dc` both [\"reset\"](https://github.com/gavinhoward/bc/blob/master/manuals/bc/A.1.md#reset) on error, which means they clear everything and try to start completely fresh.\r\n\r\nHuh. That makes pedagogical sense, upon consideration.\r\n\r\n> That said, the documentation could be clearer on that; I could make it say that errors clear the stack too.\r\n\r\nThat would probably be a good idea, both because `gh-dc` deviates from the norm, and because there *is* no norm; this would be the first point at which this particular graph edge / state machine transition is properly documented. Until now it's lived as an edge case in UB land.\r\n\r\n> (And they do clear the stack because they have to clear the stack in `bc` since the stack is implicit.)\r\n\r\nHuh. I wonder how other `bc`->`dc` architectural approaches have handled this situation?\r\n\r\n> However, this could go both ways:\r\n> \r\n> * I could declare this as a mere _documentation bug_, since `dc` is _not_ standardized. In that case, I would just update the manual.\r\n> * Or I could declare this a _conformance bug_, because while there is no standard, all other `dc` implementations do the opposite. In this case, I would make the change and fix the bugs that pop up.\r\n> \r\n> Quite frankly, I'm not looking forward to doing a full release cycle, which includes 2 weeks of fuzzing (during which my machine is unusable) and 24 hours of tests, possibly repeated. This means I want to fix the docs and call it a day, but going off of what I _want_ to do is not rational.\r\n\r\nGood net question. Hmm.\r\n\r\n> I don't know if anyone watches this repo, but this is one case where I'd like to hear comments from users.\r\n\r\nI am too.\r\n\r\nBut I'll add my 2&cent;:\r\n\r\n- Nobody has screamed until now, but `gh-dc` adoption is still rising.\r\n\r\n- Taking on the complexity of making this a `./configure`able option doesn't sound reasonable in practice.\r\n\r\n- I can only imagine a `dc` script generating different results after being switched to this implementation after some sort of upgrade process that presumably has capable humans involved in it. It would follow that said humans would presumably classify the deviation in output as the result of logic bugs and then fix them, so keeping this architectural approach is theoretically a net positive.\r\n\r\n- Applying to make `dc` a POSIX standard would make for an interesting 180-season TV series that would be excellent mid-afternoon watching while having a nap (and dreaming of how to make `dc` count to infinity twice). I'd definitely seed all 4,961 episodes.\r\n\r\n- Given that `gh-dc` is now in FreeBSD, it may well meet the theoretical/implicational interpretation (and possibly beyond) of \"significant user base\" required to [apply for OSS-Fuzz](https://google.github.io/oss-fuzz/getting-started/accepting-new-projects/) which would subject it to continual analysis and, if accepted, probably provide a slow trickle of genuinely interesting feedback. It also sounds like it would unblock a significant burnout barrier to commoditizing the process of cutting new releases - opting to letting new versions sit in OSS-Fuzz for a fortnight before releasing them (a cool strategy, and if only everything was architecturally simple enough that this could be applied everywhere) would no longer have a local performance impact.\r\n",
        "createdAt": "2024-06-17T07:21:08Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/79#issuecomment-2172481824",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc6BmRt8",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "> Nobody has screamed until now, but `gh-dc` adoption is still rising.\r\n\r\nYes, I agree. In fact, I initially wanted to dismiss your report as \"only one user,\" but I did not for this reason.\r\n\r\n> Taking on the complexity of making this a `./configure`able option doesn't sound reasonable in practice.\r\n\r\nI do not want that to be a build-time option. I have too many as it is.\r\n\r\n> I can only imagine a `dc` script generating different results after being switched to this implementation after some sort of upgrade process that presumably has capable humans involved in it. It would follow that said humans would presumably classify the deviation in output as the result of logic bugs and then fix them, so keeping this architectural approach is theoretically a net positive.\r\n\r\nTrue, although people would be better served to switch to `bc` since it's standard and portable.\r\n\r\n> Applying to make `dc` a POSIX standard would make for an interesting 180-season TV series that would be excellent mid-afternoon watching while having a nap (and dreaming of how to make dc count to infinity twice). I'd definitely seed all 4,961 episodes.\r\n\r\nThe [rationale in the `bc` standard][1] says these two things:\r\n\r\n> `dc` was not selected to be part of this volume of POSIX.1-2017 because `bc` was thought to have a more intuitive programmatic interface.\r\n\r\n> The consensus of the standard developers was that `dc` is a fundamentally less usable language and that that would be far too severe a penalty for avoiding the issue of being similar to but incompatible with C.\r\n\r\nYes, that is from the 2017 standard, but that language goes back to the beginning, I believe. This means that standardizing `dc` will not happen, barring some rich fellow deciding that it's his life mission to make it happen.\r\n\r\n> Given that `gh-dc` is now in FreeBSD, it may well meet the theoretical/implicational interpretation (and possibly beyond) of \"significant user base\" required to [apply for OSS-Fuzz](https://google.github.io/oss-fuzz/getting-started/accepting-new-projects/) which would subject it to continual analysis and, if accepted, probably provide a slow trickle of genuinely interesting feedback. It also sounds like it would unblock a significant burnout barrier to commoditizing the process of cutting new releases - opting to letting new versions sit in OSS-Fuzz for a fortnight before releasing them (a cool strategy, and if only everything was architecturally simple enough that this could be applied everywhere) would no longer have a local performance impact.\r\n\r\nI agree with this, so [I have applied][2]. We'll see where that goes.\r\n\r\n[1]: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/bc.html#tag_20_09_18\r\n[2]: https://github.com/google/oss-fuzz/pull/12078",
        "createdAt": "2024-06-17T19:45:51Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/79#issuecomment-2174294908",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc6BpTwG",
        "author": {
          "login": "exikyut"
        },
        "authorAssociation": "NONE",
        "body": "> > Nobody has screamed until now, but `gh-dc` adoption is still rising.\r\n> \r\n> Yes, I agree. In fact, I initially wanted to dismiss your report as \"only one user,\" but I did not for this reason.\r\n\r\n(Sentiment of appreciation)\r\n\r\n> > Taking on the complexity of making this a `./configure`able option doesn't sound reasonable in practice.\r\n> \r\n> I do not want that to be a build-time option. I have too many as it is.\r\n\r\nI was genuinely surprised at the number of configurable options :) completely agree there haha\r\n\r\n> > I can only imagine a `dc` script generating different results after being switched to this implementation after some sort of upgrade process that presumably has capable humans involved in it. It would follow that said humans would presumably classify the deviation in output as the result of logic bugs and then fix them, so keeping this architectural approach is theoretically a net positive.\r\n> \r\n> True, although people would be better served to switch to `bc` since it's standard and portable.\r\n> \r\n> > Applying to make `dc` a POSIX standard would make for an interesting 180-season TV series that would be excellent mid-afternoon watching while having a nap (and dreaming of how to make dc count to infinity twice). I'd definitely seed all 4,961 episodes.\r\n> \r\n> The [rationale in the `bc` standard](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/bc.html#tag_20_09_18) says these two things:\r\n> \r\n> > `dc` was not selected to be part of this volume of POSIX.1-2017 because `bc` was thought to have a more intuitive programmatic interface.\r\n\r\nThanks for the TIL! I should have expected there to be extant discussion on the matter...\r\n\r\n> > The consensus of the standard developers was that `dc` is a fundamentally less usable language and that that would be far too severe a penalty for avoiding the issue of being similar to but incompatible with C.\r\n> \r\n> Yes, that is from the 2017 standard, but that language goes back to the beginning, I believe. This means that standardizing `dc` will not happen, barring some rich fellow deciding that it's his life mission to make it happen.\r\n\r\nI see. Thanks very much for the insight.\r\n\r\n> \r\n> > Given that `gh-dc` is now in FreeBSD, it may well meet the theoretical/implicational interpretation (and possibly beyond) of \"significant user base\" required to [apply for OSS-Fuzz](https://google.github.io/oss-fuzz/getting-started/accepting-new-projects/) which would subject it to continual analysis and, if accepted, probably provide a slow trickle of genuinely interesting feedback. It also sounds like it would unblock a significant burnout barrier to commoditizing the process of cutting new releases - opting to letting new versions sit in OSS-Fuzz for a fortnight before releasing them (a cool strategy, and if only everything was architecturally simple enough that this could be applied everywhere) would no longer have a local performance impact.\r\n> \r\n> I agree with this, so [I have applied](https://github.com/google/oss-fuzz/pull/12078). We'll see where that goes.\r\n\r\n**YOU GOT ACCEPTED :D :face_holding_back_tears:**\r\n\r\nI forgot that it ships in macOS, and TIL it ships in Android as well. OSS-Fuzz's scope tries to extend beyond Google-immediate interests, so this broader status quo (incl. FreeBSD) constitutes a meaningful precedent of relevance &ndash; potentially represented by the speed with which the project was accepted without further question (basically 45 minutes).",
        "createdAt": "2024-06-18T06:03:35Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/79#issuecomment-2175089670",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc6B3Zis",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "> YOU GOT ACCEPTED :D 🥹\r\n\r\nYes, unfortunately, I [ran into problems integrating fuzzers][1], and I don't know what to do next, so I have to put OSS-Fuzz on the back plate. Thus, we're back to where we started.\r\n\r\nThank you for the suggestion, though.\r\n\r\n[1]: https://github.com/google/oss-fuzz/pull/12098",
        "createdAt": "2024-06-19T13:54:56Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/79#issuecomment-2178783404",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc6C-bO7",
        "author": {
          "login": "spatula75"
        },
        "authorAssociation": "NONE",
        "body": "I also noticed this behavioral change, because on occasion I need to add a long list of numbers in `dc`, and rather than count how many numbers I have and issuing the right number of `+` operators, I have a habit of just entering way more `+` operators than I need and then grabbing the stack top value afterward.  e.g.:\r\n```\r\n1 7 8 6 4 9 1 2 3 6 4 + + + + + + + + + + + + + + + + + + p\r\n```\r\nHistorically, and with other implementations of `dc`, this would result in a lot of `dc: stack empty` messages followed by the sum at the end.  Now it results in a clear stack with no result.\r\n\r\nI can certainly see the merit of returning to a clean slate on an error condition when running in an \"automated\" fashion - blowing the stack in this case would generally mean you did something wrong and the results might not be trustworthy.\r\n\r\nI guess what frustrates me is that in interactive mode, this is a significant change from historical behavior that caught me off-guard and also blows up my use case, requiring me to now count how many numbers I have on the stack, and then to supply N-1 operators to get to the result I want.  It's also making my stack more \"fragile\" in the sense that I now have to be very careful about my interactions with `dc`.\r\n\r\nI agree that changing behavior based on configuration-time options sounds like overkill and a lot of added complexity, especially when some users of a system might find the new behavior desirable.\r\n\r\nI see a few other possibilities:\r\n- A command line switch to either enable or disable stack clearing when running in `dc` mode, so a user can be explicit about whether they want the new behavior or the historical behavior.  Whether the switch enables the old behavior, or enables the new behavior doesn't matter much to me; I'd just add a shell alias if I needed to always supply a switch.\r\n- A rule that when running in interactive mode (ie, from a keyboard not from a pipe or a file), you get the historical (non-clearing) behavior, but in non-interactive mode you always get the new (stack-clearing) behavior.\r\n- Some hybrid of the two: maybe in interactive mode you get the historical behavior _unless_ you supply a command-line switch\r\n\r\nOf course I realize that all of these options add complexity too, but hopefully not altogether too much.  Any one of them would make me a happy camper.",
        "createdAt": "2024-06-28T17:58:14Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/79#issuecomment-2197402555",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc6DCMZY",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I am not a fan of having different behavior in interative mode vs non-interactive mode.\r\n\r\nHowever, I think `dc` implementations tend to exit on any error in non-interactive mode anyway. At least GNU `dc` does, IIRC. This one definitely does, and this behavior is documented.\r\n\r\nSo this change would only affect interactive uses anyway.\r\n\r\nI will go ahead and make the change. I will start fuzzing as well. If few or no problems appear, I will make a release.",
        "createdAt": "2024-06-30T00:55:05Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 2
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/79#issuecomment-2198390360",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc6JdDT8",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Okay, it took me a long time to have the time for fuzzing and testing, but this change made it into 7.0.0.\r\n\r\nI think I can close this report now, but if there are still problems, feel free to reopen.",
        "createdAt": "2024-08-23T03:03:02Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/79#issuecomment-2306094332",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2024-06-16T10:02:06Z",
    "id": "I_kwDOCL0xJc6MaBsK",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 79,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Stack-consumption-on-error headscratch in comparison to other `dc`s",
    "updatedAt": "2024-08-23T03:03:02Z",
    "url": "https://github.com/gavinhoward/bc/issues/79"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjI2NjI1MTQx",
      "is_bot": false,
      "login": "freebrowser1",
      "name": ""
    },
    "body": "Excellent software !\r\n\r\nThis `bc` is MUCH faster than the bc supplied to Linux distros. I downloaded the source package, compiled under Ubuntu ARM and it worked. I did the same on Termux on an Android cellphone (which also has the slow 1.7 version) and it was blazingly fast as well !\r\nIt can be used for other bases up till sixteen. I changed it (locally, not on this Github site) to max base 36.\r\nMaybe that can be an option to publish it here.",
    "closed": true,
    "closedAt": "2024-05-15T15:52:29Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc59oi_N",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Thank you for your compliments!\r\n\r\nAs it turns out, it's the accompanying `dc` that only goes up to base 16. `bc` goes up to base 36.\r\n\r\nThere is a reason for base 36: according to the `bc` standard, it must be possible to set all input bases with a one character number. This is so any input base could be set no matter the *current* input base.\r\n\r\nFor example, say you write a function that should work in multiple bases. What if it temporarily has to set a new input base. How does it do that when the input base could be anything from binary to hexadecimal?\r\n\r\nThe answer is [here][1] (scroll down to where it says, \"When either ibase or obase is assigned a single digit value...\").\r\n\r\nNow my `bc` does take that up to base 35, which is the base you can reach by using `Z` as the single digit value.\r\n\r\nTo test this, try this code:\r\n\r\n```\r\n$ bc\r\n>>> obase=Z\r\n>>> 35\r\n01 00\r\n>>> quit\r\n```\r\n\r\nI hope this helps.\r\n\r\n[1]: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/bc.html#tag_20_09_13_03",
        "createdAt": "2024-05-13T14:35:35Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/78#issuecomment-2107781069",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc59sMoG",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I realize I forgot to include an example with `ibase`.\r\n\r\n```\r\n$ bc\r\n>>> ibase=Z\r\n>>> 10\r\n35\r\n>>> ibase=6*6\r\n>>> 10\r\n36\r\n>>> quit\r\n```\r\n\r\nSo yes, my `bc` already goes up to base 36 for `ibase` too, although you do need some special way, like `6*6`, to get it.",
        "createdAt": "2024-05-13T20:24:59Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/78#issuecomment-2108738054",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5978rz",
        "author": {
          "login": "freebrowser1"
        },
        "authorAssociation": "NONE",
        "body": "I have changed a few source files (find in the files in the accompanied zip lines with //!!).\r\nThis allows using max base 36 with all digits and all UPPERCASE letters. When I and O are not wanted, use `export NO_I_O_DIGITS=1` (or any value) before executing bc and 34 = @, 35 = #.\r\n\r\n[src.zip](https://github.com/gavinhoward/bc/files/15323750/src.zip)\r\n",
        "createdAt": "2024-05-15T15:31:15Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/78#issuecomment-2112867059",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc598Hyk",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "You did not read my comments. My `bc` already supports up to base 36.\r\n\r\nYour changes are not needed.\r\n\r\nClosing.",
        "createdAt": "2024-05-15T15:52:29Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/78#issuecomment-2112912548",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5-Emcm",
        "author": {
          "login": "freebrowser1"
        },
        "authorAssociation": "NONE",
        "body": "I checked again, downloaded the source kit, compiled it (Ubuntu arm64) and ran this:\r\n' bin/bc -l <<< \"ibase=obase=24; 2^G;\"'\r\nThis results in `04 17 18 16`, i.e. decimal numbers as 'digits' which should only appear with base above 36.\r\nAfter applying my changes, it issues the correct value '4HIG'.\r\n",
        "createdAt": "2024-05-16T12:35:20Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/78#issuecomment-2115135270",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5-E7EK",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "This cannot be changed.\r\n\r\nThere is a [standard for `bc`][1], and in that standard, it says,\r\n\r\n> For bases greater than 16, each digit shall be written as a separate multi-digit decimal number. Each digit except the most significant fractional digit shall be preceded by a single <space>. For bases from 17 to 100, bc shall write two-digit decimal numbers; for bases from 101 to 1000, three-digit decimal strings, and so on.\r\n\r\nSo no, as much as I would like to change it, it cannot be changed.\r\n\r\n[1]: https://pubs.opengroup.org/onlinepubs/009696799/utilities/bc.html",
        "createdAt": "2024-05-16T13:15:39Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/78#issuecomment-2115219722",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2024-05-13T07:31:19Z",
    "id": "I_kwDOCL0xJc6Infdz",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 78,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "NOT_PLANNED",
    "title": "Not an issue, but a change proposal",
    "updatedAt": "2024-05-16T13:15:40Z",
    "url": "https://github.com/gavinhoward/bc/issues/78"
  },
  {
    "assignees": [],
    "author": {
      "id": "U_kgDOB00gDQ",
      "is_bot": false,
      "login": "oliverkwebb",
      "name": "Oliver Webb"
    },
    "body": "First I'd like to thank you for the work and care in making bc.\r\n\r\nI replaced GNU bc with your bc on my system, and ran into a error trying to run bc with some external bc libraries that define functions such as `abs()`\r\n\r\nThis is because your bc already has a built in `abs()`, and unlike the functions in the -l math library, will not let you redefine it because it appear to not just be a function, but also a lexer tokens/keyword.\r\n\r\nIs this a problem that you've ran into or considered before? ",
    "closed": true,
    "closedAt": "2024-05-08T17:39:46Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc59O96s",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Yup! And my `bc` already has a solution:\r\n\r\n```\r\n$ bc -r abs <other_args...>\r\n```\r\n\r\nSee [here][1], scroll to the `-r`/`--redefine` option.\r\n\r\nIn short, it allows you to \"redefine\" keywords as functions, variables, or arrays.\r\n\r\nOf course, if that doesn't fix your problem, then it is a bug.\r\n\r\n[1]: https://github.com/gavinhoward/bc/blob/master/manuals/bc/A.1.md#options",
        "createdAt": "2024-05-08T17:34:29Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/77#issuecomment-2101075628",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc59O_7j",
        "author": {
          "login": "oliverkwebb"
        },
        "authorAssociation": "NONE",
        "body": "Putting `-r abs` in my function arguments will run the library.\r\n\r\nThank you for your help",
        "createdAt": "2024-05-08T17:39:46Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/77#issuecomment-2101083875",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2024-05-08T17:29:50Z",
    "id": "I_kwDOCL0xJc6IQwkm",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 77,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Allowing redefinition of builtin function such as abs() for compatibility with bc scripts",
    "updatedAt": "2024-05-08T17:39:46Z",
    "url": "https://github.com/gavinhoward/bc/issues/77"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjc0MzM1NDcx",
      "is_bot": false,
      "login": "mogando668",
      "name": ""
    },
    "body": "Dear Mr. Howard,\r\n\r\nFor gigantic `obase`s, like those below the line, even though they're clearly beyond the hard-coded `obase `max of `2,147,483,647`,`bc` appears to calculate the expression to full precision before erroring out, thus undermining any early exit criteria that ensure built-in named variables are within designated limits. I haven't tested against `ibase` but I suspect something similar would plague it, i.e. the right hand side expression is being calculated to full precision before any attempts to check them against caps.\r\n\r\nThe full `zsh`-based testing code and output are attached below.\r\n\r\nYours Sincerely\r\nJason K\r\n\r\nps : I've noticed the same issue plagues both `gnu-bc` I've installed via Homebrew as well as the macOS built-in `bc`. \r\n\r\n```\r\n 2 ^ 8 ^  1 := 2 ^          8\r\n 2 ^ 8 ^  2 := 2 ^         64\r\n 2 ^ 8 ^  3 := 2 ^        512\r\n 2 ^ 8 ^  4 := 2 ^       4096\r\n 2 ^ 8 ^  5 := 2 ^      32768\r\n 2 ^ 8 ^  6 := 2 ^     262144\r\n 2 ^ 8 ^  7 := 2 ^    2097152\r\n----------------------------\r\n 2 ^ 8 ^  8 := 2 ^   16777216\r\n 2 ^ 8 ^  9 := 2 ^  134217728\r\n 2 ^ 8 ^ 10 := 2 ^ 1073741824\r\n```\r\n\r\n\r\n```\r\nbc 1.07.1\r\nCopyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.\r\n\r\nDarwin m1mx4CT 22.3.0 Darwin Kernel Version 22.3.0: Mon Jan 30 20:38:37 PST 2023; root:xnu-8792.81.3~2/RELEASE_ARM64_T6000 arm64\r\n\r\ngbc is /usr/local/bin/gbc\r\n\r\nBC_BASE_MAX     = 2147483647\r\nBC_DIM_MAX      = 16777215\r\nBC_SCALE_MAX    = 2147483647\r\nBC_STRING_MAX   = 2147483647\r\nMAX Exponent    = 9223372036854775807\r\nNumber of vars  = 32767\r\n\r\n```\r\n\r\n`for __ in $( jot 10 ); do ( time ( printf 'obase=2^8^%d\\0' \"$__\" | xargs -0 -n 1 -P 24 timeout -v --preserve-status --foreground 8 dash -c 'for __; do echo \"$__\" | gbc; done' _ ) ); echo \"\\f ----------\\n\\t finished 2^8^$__ with exit status $? ... \\n --------\"; done`\r\n\r\n```\r\n( printf 'obase=2^8^%d\\0' \"$__\" | xargs -0 -n 1 -P 24 timeout -v  --foregroun)  0.00s user 0.01s system 86% cpu 0.008 total\r\n\r\n ----------\r\n\t finished 2^8^1 with exit status 0 ... \r\n --------\r\nRuntime warning (func=(main), adr=13): obase too large, set to 2147483647\r\n( printf 'obase=2^8^%d\\0' \"$__\" | xargs -0 -n 1 -P 24 timeout -v  --foregroun)  0.00s user 0.01s system 58% cpu 0.012 total\r\n\r\n ----------\r\n\t finished 2^8^2 with exit status 0 ... \r\n --------\r\nRuntime warning (func=(main), adr=13): obase too large, set to 2147483647\r\n( printf 'obase=2^8^%d\\0' \"$__\" | xargs -0 -n 1 -P 24 timeout -v  --foregroun)  0.00s user 0.00s system 82% cpu 0.007 total\r\n\r\n ----------\r\n\t finished 2^8^3 with exit status 0 ... \r\n --------\r\nRuntime warning (func=(main), adr=13): obase too large, set to 2147483647\r\n( printf 'obase=2^8^%d\\0' \"$__\" | xargs -0 -n 1 -P 24 timeout -v  --foregroun)  0.00s user 0.00s system 84% cpu 0.008 total\r\n\r\n ----------\r\n\t finished 2^8^4 with exit status 0 ... \r\n --------\r\nRuntime warning (func=(main), adr=13): obase too large, set to 2147483647\r\n( printf 'obase=2^8^%d\\0' \"$__\" | xargs -0 -n 1 -P 24 timeout -v  --foregroun)  0.01s user 0.00s system 90% cpu 0.012 total\r\n\r\n ----------\r\n\t finished 2^8^5 with exit status 0 ... \r\n --------\r\nRuntime warning (func=(main), adr=13): obase too large, set to 2147483647\r\n( printf 'obase=2^8^%d\\0' \"$__\" | xargs -0 -n 1 -P 24 timeout -v  --foregroun)  0.14s user 0.01s system 98% cpu 0.143 total\r\n\r\n ----------\r\n\t finished 2^8^6 with exit status 0 ... \r\n --------\r\nRuntime warning (func=(main), adr=13): obase too large, set to 2147483647\r\n( printf 'obase=2^8^%d\\0' \"$__\" | xargs -0 -n 1 -P 24 timeout -v  --foregroun)  3.64s user 0.01s system 99% cpu 3.654 total\r\n\r\n ----------\r\n\t finished 2^8^7 with exit status 0 ... \r\n --------\r\ntimeout: sending signal TERM to command ‘dash’\r\n( printf 'obase=2^8^%d\\0' \"$__\" | xargs -0 -n 1 -P 24 timeout -v  --foregroun)  0.00s user 0.00s system 0% cpu 8.009 total\r\n\r\n ----------\r\n\t finished 2^8^8 with exit status 0 ... \r\n --------\r\ntimeout: sending signal TERM to command ‘dash’\r\n( printf 'obase=2^8^%d\\0' \"$__\" | xargs -0 -n 1 -P 24 timeout -v  --foregroun)  0.00s user 0.00s system 0% cpu 8.008 total\r\n\r\n ----------\r\n\t finished 2^8^9 with exit status 0 ... \r\n --------\r\nRuntime warning (func=(main), adr=13): obase too large, set to 2147483647\r\ntimeout: sending signal TERM to command ‘dash’\r\n( printf 'obase=2^8^%d\\0' \"$__\" | xargs -0 -n 1 -P 24 timeout -v  --foregroun)  0.00s user 0.01s system 0% cpu 8.011 total\r\n\r\n ----------\r\n\t finished 2^8^10 with exit status 0 ... \r\n --------\r\n```",
    "closed": true,
    "closedAt": "2024-01-27T20:24:51Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5yCwr9",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "In general, this problem is unsolvable. It's a consequence of the limits of computing. (The technical term is \"Turing-completeness.\")\r\n\r\nFor example, to us it's obvious that `2^8^10` is out of range. But computers do not understand any \"concept\" of math, so they can't tell.\r\n\r\nAll they can do is execute the code that they are given.\r\n\r\nYou'd see an different execution time if you did this:\r\n\r\n```\r\nobase = 104438888141315250669175271071662438257996424904738378038423348328395390\\\r\n797155745684882681193499755834089010671443926283798757343818579360726323\\\r\n608785136527794595697654370999834036159013438371831442807001185594622637\\\r\n631883939771274567233468434458661749680790870580370407128404874011860911\\\r\n446797778359802900668693897688178778594690563019026094059957945343282346\\\r\n930302669644305902501597239986771421554169383555988529148631823791443449\\\r\n673408781187263949647510018904134900841706167509366833385055103297208826\\\r\n955076998361636941193301521379682583718809183365675122131849284636812555\\\r\n022599830041234478486259567449219461702380650591324561082573183538008760\\\r\n862210283427019769820231316901767800667519548507992163641937028537512478\\\r\n401490715913545998279051339961155179427110683113409058427288427979155484\\\r\n978295432353451706522326906139490598769300212296339568778287894844061600\\\r\n741294567491982305057164237715481632138063104590291613692670834285644073\\\r\n044789997190178146576347322385026725305989979599609079946920177462481771\\\r\n844986745565925017832907047311943316555080756822184657174637329688491281\\\r\n952031745700244092661691087414838507841192980452298185733897764810312608\\\r\n590300130241346718972667321649151113160292078173803343609024380470834040\\\r\n3154190336\r\n```\r\n\r\ninstead of this:\r\n\r\n```\r\nobase = 2^8^4\r\n```\r\n\r\nAgain, the computer has no idea that `2^8^4` cannot work until it calculates it. We can see it by eye (\"`8^4` is definitely greater than 64, and `2^64` is the max\"), but the computer doesn't think that like. It sees:\r\n\r\n```\r\nconstant 2\r\nconstant 8\r\nconstant 4\r\nx = exponentiation 8 4\r\nexponentiation 2 x\r\n```\r\n\r\nI hope this makes sense.",
        "createdAt": "2024-01-27T20:24:51Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/75#issuecomment-1913326333",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2024-01-27T19:16:44Z",
    "id": "I_kwDOCL0xJc59ZJcH",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 75,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "bc attempts to first calculate gigantic obase before erroring out",
    "updatedAt": "2024-01-27T20:24:51Z",
    "url": "https://github.com/gavinhoward/bc/issues/75"
  },
  {
    "assignees": [],
    "author": {
      "id": "U_kgDOCGPbwA",
      "is_bot": false,
      "login": "shuang886",
      "name": "Steven Huang"
    },
    "body": "Hi, just want to make sure I'm not missing something glaringly obvious...\r\n\r\nI'm trying to build just the library on macOS, so:\r\n\r\n```\r\n% ./configure -a\r\nTesting for FreeBSD...\r\nNot on FreeBSD. Using _POSIX_C_SOURCE and _XOPEN_SOURCE.\r\n\r\nTesting for Mac OSX...\r\nOn Mac OSX. Using _DARWIN_C_SOURCE.\r\n\r\nTesting for OpenBSD...\r\nNot on OpenBSD.\r\n\r\nVersion: 6.7.2\r\nBuilding bc\r\nBuilding dc\r\n\r\nBC_ENABLE_LIBRARY=1\r\n\r\nBC_ENABLE_HISTORY=0\r\nBC_ENABLE_EXTRA_MATH=1\r\nBC_ENABLE_NLS=0\r\n\r\nBC_ENABLE_AFL=0\r\n\r\nBC_NUM_KARATSUBA_LEN=32\r\n\r\nCC=c99\r\nCFLAGS= -DBC_ENABLE_EDITLINE=0 -DBC_ENABLE_READLINE=0\r\nHOSTCC=c99\r\nHOSTCFLAGS=\r\nCPPFLAGS=-DNDEBUG  -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700\r\nLDFLAGS=-s \r\nPREFIX=/usr/local\r\nBINDIR=/usr/local/bin\r\nINCLUDEDIR=/usr/local/include\r\nLIBDIR=/usr/local/lib\r\nDATAROOTDIR=/usr/local/share\r\nDATADIR=/usr/local/share\r\nMANDIR=/usr/local/share/man\r\nMAN1DIR=/usr/local/share/man/man1\r\nMAN3DIR=/usr/local/share/man/man3\r\nNLSPATH=\r\nPC_PATH=/opt/homebrew/lib/pkgconfig\r\nEXECSUFFIX=\r\nEXECPREFIX=\r\nDESTDIR=\r\nLONG_BIT=\r\nGEN_HOST=1\r\nGEN_EMU=\r\n\r\nSetting Defaults\r\n================\r\nbc.banner=0\r\nbc.sigint_reset=1\r\ndc.sigint_reset=1\r\nbc.tty_mode=1\r\ndc.tty_mode=0\r\nbc.prompt=1\r\ndc.prompt=0\r\nbc.expr_exit=1\r\ndc.expr_exit=1\r\nbc.digit_clamp=0\r\ndc.digit_clamp=0\r\n```\r\n\r\nseems to be happy, but it doesn't actually build:\r\n\r\n```\r\n% make\r\nmkdir -p bin\r\nc99 -DBC_ENABLED=1 -DDC_ENABLED=1 -I./include/ -DBUILD_TYPE=HN  -DEXECPREFIX= -DMAINEXEC=bc  -D_DARWIN_C_SOURCE -DBC_NUM_KARATSUBA_LEN=32 -DBC_ENABLE_NLS=0 -DBC_ENABLE_EXTRA_MATH=1 -DBC_ENABLE_HISTORY=0 -DBC_ENABLE_LIBRARY=1 -DBC_ENABLE_MEMCHECK=0 -DBC_ENABLE_AFL=0 -DBC_DEFAULT_BANNER=0 -DBC_DEFAULT_SIGINT_RESET=1 -DBC_DEFAULT_TTY_MODE=1 -DBC_DEFAULT_PROMPT=1 -DBC_DEFAULT_EXPR_EXIT=1 -DBC_DEFAULT_DIGIT_CLAMP=0 -DDC_DEFAULT_SIGINT_RESET=1 -DDC_DEFAULT_TTY_MODE=0 -DDC_DEFAULT_PROMPT=0 -DDC_DEFAULT_EXPR_EXIT=1 -DDC_DEFAULT_DIGIT_CLAMP=0 -DNDEBUG  -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700  -DBC_ENABLE_EDITLINE=0 -DBC_ENABLE_READLINE=0 -o src/args.o -c ./src//args.c\r\n./src//args.c:62:6: error: use of undeclared identifier 'vm'\r\n        if (vm->exprs.v == NULL)\r\n            ^\r\n./src//args.c:64:16: error: use of undeclared identifier 'vm'\r\n                bc_vec_init(&vm->exprs, sizeof(uchar), BC_DTOR_NONE);\r\n                             ^\r\n...lots more...\r\n```\r\n\r\n`vm` appears to be defined in `src/vm.c` but inside a `#if !BC_ENABLE_LIBRARY`, while a lot of code in `src/args.c` are not correspondingly enclosed. I tried to sprinkle in some `#if !BC_ENABLE_LIBRARY` directives but that just exposed more code that needed to be `#ifdef`ed out.\r\n\r\nBuilding the executables (i.e., just plain `./configure`) compiles and runs fine.\r\n\r\nWould you mind clarifying if there's more needed than `./configure -a`? I couldn't find anything that helps in the build manual, and I get the sense that `args.c` should not have been in the `Makefile` at all...\r\n\r\nThanks!",
    "closed": true,
    "closedAt": "2023-11-27T21:30:42Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5s_tei",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "You're not missing something glaringly obvious. That is a bug because it should build with no errors.\r\n\r\nI think I fixed it in 7807eead159b80b51b8c81680608f8187284971e; can you pull and test for me?\r\n\r\nIf that *is* the fix, then the problem was an extra slash in a path; apparently Mac OSX does not clean paths when doing a string comparison. Oops.",
        "createdAt": "2023-11-27T21:24:37Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/71#issuecomment-1828640674",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5s_vWb",
        "author": {
          "login": "shuang886"
        },
        "authorAssociation": "NONE",
        "body": "Works now, thanks!",
        "createdAt": "2023-11-27T21:30:42Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/71#issuecomment-1828648347",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5s_vvD",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "You're welcome. I'll put out a new release with the fix.",
        "createdAt": "2023-11-27T21:31:57Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/71#issuecomment-1828649923",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5s_y9T",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Ah! I made a mistake! Could you pull 7eaa40ab8cac29893155471076c621c2f9929d33 and see if that works?",
        "createdAt": "2023-11-27T21:41:25Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/71#issuecomment-1828663123",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5s_zsO",
        "author": {
          "login": "shuang886"
        },
        "authorAssociation": "NONE",
        "body": "Yup, still works.",
        "createdAt": "2023-11-27T21:43:29Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/71#issuecomment-1828666126",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5s_0Ig",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Thank you, and I'm sorry.",
        "createdAt": "2023-11-27T21:44:49Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "HEART",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/71#issuecomment-1828667936",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2023-11-27T17:48:32Z",
    "id": "I_kwDOCL0xJc53-Mb1",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 71,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Build errors after ./configure -a",
    "updatedAt": "2023-11-27T21:44:50Z",
    "url": "https://github.com/gavinhoward/bc/issues/71"
  },
  {
    "assignees": [],
    "author": {
      "id": "U_kgDOBZsPsA",
      "is_bot": false,
      "login": "STSMHQ",
      "name": "STSM"
    },
    "body": "Hi, @gavinhoward,\r\n\r\nI read the [documentation file](https://git.gavinhoward.com/gavin/bc/src/branch/master/manuals/bc/A.1.md) and it seems that arrays can only old a single value per each index (a number or a string). Is there any workaround to be able to store more than one single value in an array?\r\n\r\n```shell\r\n# This works\r\nbc_example[0] = 1;\r\n\r\n# This doesn't\r\nbc_example[1] = [1, 2, 3];\r\nbc_example[2] = [1, \"Random\", 3, \"Another\"];\r\n\r\nprint bc_example[2][1] # Random\r\n```\r\n\r\nAs I already stated before in another issue, I'm using your amazing tool to keep track of my expenses and it would be amazing to be able to create a \"matrix\" or an \"array of arrays\" as people often call it. Although I know that my use case isn't the general one and that the type of feature that I'm requesting doesn't make much sense considering the main goal/purpose of this tool, I'm opening this issue to know if what I want is somehow possible using any syntax workaround not documented in the above file.",
    "closed": true,
    "closedAt": "2023-11-13T16:02:39Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5ruIip",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Unfortunately, there is not any workaround, and that is on purpose. The `bc` language is just too restricted to go any further without *serious* work.\r\n\r\nIt is *possible*, yes. However, I believe that would be a mistake.\r\n\r\nI once said this:\r\n\r\n> Good software design includes putting whatever complexity must exist where it *best fits*.\r\n>\r\n> -- [\"Justifying a Backwards Design Decision for Yao][1]\r\n\r\nSo one of the skills of a good programmer is knowing *where* complexity should go.\r\n\r\nIf you need multiple values in one array slot, it sounds like you need structs, objects, or some other compound data thing. That sort of complexity should live in a \"proper\" programming language.\r\n\r\nSo I suggest that you use a \"proper\" programming language with arbitrary-precision numbers, like Python.\r\n\r\nThat said, I don't want to just hang you out to dry with no solution!\r\n\r\nYou're using my `bc` because it was the best for the job until now, right? Can you tell me why that is?\r\n\r\nYou've mentioned that you use it for finances; unlike most other math, finances basically require base 10 math, so is that why my `bc` was best?\r\n\r\nIf so, I might have a solution for you.\r\n\r\nDo you know Python?\r\n\r\nIf so, I could learn how to create a C extension for Python, and then I could use my [`bc`'s library form][2] to create a Python extension to use my `bc`'s library. That way, you could use Python, but still have the decimal-based math you need for finances, and I wouldn't have to do a ton of work to add multi-values to `bc` while also adding my `bc` to Python.\r\n\r\nAs an extra bonus, if you use Python, you could then have your files be output to JSON or another well-known format. And hey, I may even be able to help you convert your scripts to Python if you send them to me. (Do it through email, not this bug report!)\r\n\r\nWill that work for you?\r\n\r\n[1]: https://gavinhoward.com/2023/02/justifying-a-backwards-design-decision-for-yao/#designing-for-lsp\r\n[2]: https://github.com/gavinhoward/bc/blob/master/manuals/bcl.3.md",
        "createdAt": "2023-11-12T22:06:36Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/70#issuecomment-1807255721",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5rytlH",
        "author": {
          "login": "STSMHQ"
        },
        "authorAssociation": "NONE",
        "body": "Hi, @gavinhoward,\r\n\r\nI'm using your `bc` tool for over a year to keep track of my expenses and everything related to my personal finances. The main reason behind this decision is what you just said, generally speaking, finances use base 10 math and `bc-gh` allows me to have arbitrary-precision numbers on it. The second big reason is **you**. The passion you put into your projects is truly amazing. I know that as long as you're alive and well, you'll keep this project running and that's a important thing for me. Also, your support as shown here in this issue is very, very good. To end, I'm a follower of your [blog](https://gavinhoward.com/) since the beginning of 2022.\r\n\r\nI don't know Python. I could learn it but I don't like much its' syntax and the biggest part of its' design choices. I'll probably take this chance to improve my NuShell knowledge and try to integrate `bc-gh` into it. With NuShell, I know that I can work with well-known formats like JSON/YAML/TOML in order to be able to implement my desired workflow. Thank you for everything and keep up the excellent work.\r\n\r\n",
        "createdAt": "2023-11-13T16:02:39Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/70#issuecomment-1808456007",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5ry87l",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "You flatter me! :) But more seriously, thank you for the compliments; I struggle to see worth in my code, and that helps a lot.\r\n\r\nI'm sorry I couldn't help more. But feel free to ask any questions to help with your port to NuShell. I'm happy to help with that since I was not much help here!",
        "createdAt": "2023-11-13T16:35:41Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/70#issuecomment-1808518885",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5r93lR",
        "author": {
          "login": "STSMHQ"
        },
        "authorAssociation": "NONE",
        "body": "> You flatter me! :) But more seriously, thank you for the compliments; I struggle to see worth in my code, and that helps a lot.\r\n\r\nYour code and your blog posts truly make a difference to my life 💙\r\n\r\n> I'm sorry I couldn't help more. But feel free to ask any questions to help with your port to NuShell. I'm happy to help with that since I was not much help here!\r\n\r\nYou don't have to be sorry. I read the documentation of NuShell and I think I'm able to implement my current workflow with `bc-gh` on it pretty easily. Thank you for all your spent time and help offered. Have a nice rest of week!",
        "createdAt": "2023-11-14T21:51:18Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/70#issuecomment-1811380561",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5sEd4h",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "You're welcome.\r\n\r\nHey, when you finish your NuShell implementation, I would love it if you could email it to me; I'm almost done with my new language, and I'd love to use it as a test application.",
        "createdAt": "2023-11-15T19:12:11Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/70#issuecomment-1813110305",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5sIRpw",
        "author": {
          "login": "STSMHQ"
        },
        "authorAssociation": "NONE",
        "body": "I'm still studying it. As NuShell didn't reach yet the first ever stable level, I don't know if I should implement all of my workflow directly using it. Currently, I'm just exploring the data processing pipeline features that they have against a workflow using `sed`/`awk` and your `bc-gh`, for instance. All I'm doing is pretty much pick a JSON file, iterate over it, apply some editions/additions using your `bc-gh` and then save it again to a JSON file. Hope you like NuShell as much as I do and one day in the future, it can have the same popularity as `zsh`.\r\n\r\nIf in the future I implement something that I'm proud of, I'll happily share it with you, Gavin.",
        "createdAt": "2023-11-16T09:48:33Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/70#issuecomment-1814108784",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2023-11-12T18:51:58Z",
    "id": "I_kwDOCL0xJc52lbxv",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 70,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Array - Multiple values ",
    "updatedAt": "2023-11-16T09:48:33Z",
    "url": "https://github.com/gavinhoward/bc/issues/70"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjQ4MjY5Mzk5",
      "is_bot": false,
      "login": "TediusTimmy",
      "name": "Thomas"
    },
    "body": "Greetings,\r\n\r\nI am going to start with some pleasantries and BS and work from there.\r\n\r\nHello. I also like bc. I have some bc-related repos: https://github.com/TediusTimmy/GNU_bc_with_GMP and https://github.com/TediusTimmy/OpenBSD_bc_with_GMP . The first one is an example of how fast bc can be, if we just use GMP. I also fixed as many of the crashes as I was aware of (admittedly, by fixing the back-end to be more robust rather than fixing the garbage generated by the front-end; if you find a crash, please let me know). In the second repo, I have a comparison of the speed of several implementations of bc (based on my own benchmark), including yours. I found it to be roughly comparable to, but still slightly slower than, OpenBSD's bc (except on one specific task, where it even beat GMP). I also wrote a spreadsheet program to use bc-like numbers: https://github.com/TediusTimmy/BC-DeciCalc (which I _really_ need to work on the documentation for).\r\n\r\nAs for those bug-fixes in GNU bc: I really haven't been able to get ahold of Phil, or Ken. Thankfully, there were some really helpful people at Debian, and maybe one day, either https://salsa.debian.org/debian/bc/-/merge_requests/4 will be merged in, or they will just use a better bc implementation, like yours.\r\n\r\nFinally, are you aware of this: https://www.php.net/manual/en/book.bc.php ? They have forked the GNU bc code for number.c and include it in their builds. Maybe they could use the library version of your code? (My only concern would be https://bugs.php.net/bug.php?id=66364 )\r\n\r\n\r\nOn to the issue: I'm not a big fan of your `p(x,y)` function. Let me explain by way of a contrived example: `p(1024,32.1)`. Now `1024` is `2^10`, so this SHOULD give us `2^10^32.1` which is `2^(10*32.1)` or `2^321`. And that's an integer, so it should be exact. But, when we do this we find that only the first 18 digits are correct with the default scale of 20. As you manipulate the scale variable, you find a correlation between the scale variable and the number of correct digits. So, in order to compute this result to 20 digits of scale, you would need to compute the log and exponential to around 117 digits of scale. I don't think that I'm out of line to expect that when you increase the scale of a computation that maybe the last three digits change and you then get extra new good digits. With this implementation of `p(x,y)`, a good chunk of the number changes.\r\n\r\nAs I was thinking about this, four cases came up:\r\n1) If we are raising a number greater than one to a positive power, then we want to bump the scale by the length of the integer part.\r\n2) If we are raising a number greater than one to a negative power, then we can probably use `e(y*l(x))` as that result goes to zero.\r\n3) Conversely, if we are raising a number less than one to a positive power, then we can probably use `e(y*l(x))` as the result goes to zero.\r\n4) Finally, if if we are raising a number less than one to a negative power, then we need to be extra careful. We need to use the reciprocal to find the integer part, but want the reciprocal to the increased scale to have an accurate result (in my testing, it removed a problem in the unit in the last place).\r\n\r\nSo, my final function to improve `p(x,y)`, then commentary:\r\n```\r\ndefine pow(x,y){\r\n\tauto a,i,s,z\r\n\tif(0==y)return 1@scale\r\n\tif(0==x){\r\n\t\tif(y>0)return 0\r\n\t\treturn 1/0\r\n\t}\r\n\ta=y$\r\n\tif(y==a)return(x^a)@scale\r\n\tz=0\r\n\tif(x<1){\r\n\t\ty=-y\r\n\t\ta=-a\r\n\t\tz=x\r\n\t\tx=1/x\r\n\t}\r\n\tif(y<0){\r\n\t\treturn e(y*l(x))\r\n\t}\r\n\ti=x^a\r\n\ts=scale\r\n\tscale+=length(i)\r\n\tif(z){\r\n\t\tx=1/z\r\n\t\ti=x^a\r\n\t}\r\n\ti*=e((y-a)*l(x))\r\n\tscale=s\r\n\treturn i@scale\r\n}\r\n```\r\nI started with your `p(x,y)` function and then added code. We begin with some special case handling for zeros, because people will complain (I didn't realize that bc already defines `0^0==1`). Next is the detection for the easy case of an integer exponent that you already had. We then handle if x is between zero and one: we save x and proceed with the reciprocal, while negating the exponent. Remember that `l(x)==-l(1/x)`. I specifically ignore if x is negative, because we will eventually call `l(x)`, which will return an erroneous value if x is negative. If the exponent is now negative, we fall back on `e(y*l(x))`: that number is going to zero anyway. Next, we compute the integral portion of the exponent and use it to get the working scale for the fractional part of the exponent. After that, if we took the reciprocal of x, recompute the reciprocal and the integral part of the exponent at this higher scale to ensure that both are accurate. Penultimately, compute the fractional part of the exponent and multiply it by the integral part to get the complete exponent. Finally, return a result at the desired scale.\r\n",
    "closed": true,
    "closedAt": "2023-08-19T06:38:17Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5kV35W",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Hello.\r\n\r\n> As for those bug-fixes in GNU bc: I really haven't been able to get ahold of Phil, or Ken. Thankfully, there were some really helpful people at Debian, and maybe one day, either https://salsa.debian.org/debian/bc/-/merge_requests/4 will be merged in, or they will just use a better bc implementation, like yours.\r\n\r\nMaybe I'm selfish here, but I think they should just use mine. I tested my `bc` against all of the items at <https://lists.debian.org/debian-devel/2022/08/msg00035.html> and <https://bugs.launchpad.net/ubuntu/+source/bc/+bug/1775776>, and not only does my `bc` not crash, ASan, UBSan, and Valgrind report no errors, not even memory leaks. (Yay for fuzzing!) If you know how I might submit a request for them to do so, please let me know. I'll even build the Debian package myself!\r\n\r\n> Finally, are you aware of this: https://www.php.net/manual/en/book.bc.php ? They have forked the GNU bc code for number.c and include it in their builds. Maybe they could use the library version of your code? \r\n\r\nI *am* aware, actually. This was in the back of my mind when I accepted a request from my FreeBSD contact to implement the `bcl` library. But I don't know how to contact them and convince them to use my library.\r\n\r\n> (My only concern would be https://bugs.php.net/bug.php?id=66364 )\r\n\r\nUnfortunately, the PHP authors are wrong; that behavior is well-documented in the [POSIX standard for `bc`][1], which says about multiplication:\r\n\r\n> The result shall be the product of the two expressions. If a and b are the scales of the two expressions, then the scale of the result shall be:\r\n>\r\n> `min(a+b,max(scale,a,b))`\r\n\r\nSo their fix for that bug report is wrong, in my opinion. Thus, I don't think they'll adopt my library because I won't patch my library for their \"bug.\"\r\n\r\n> On to the issue: I'm not a big fan of your `p(x,y)` function...\r\n\r\nYour criticisms are absolutely fair. Fair enough that I took your code (with style fixes), documented it, and pushed it as the `better_pow` branch in this repo.\r\n\r\nCan you take a look to check if the code is correct, that it works for you, and that the documentation I added in `manuals/algorithms.md` is correct? I documented it in my own words, to make sure I understood the code.\r\n\r\nFinally, last item: do you think that you'll open more issues on `bc` in the future? If so, I'll add an account for you on my website; I just need an email address.\r\n\r\n[1]: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/bc.html#tag_20_09_13_03",
        "createdAt": "2023-08-18T07:09:12Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/69#issuecomment-1683455574",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5kV5_7",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Forgot to say this:\r\n\r\n> In the second repo, I have a comparison of the speed of several implementations of bc (based on my own benchmark), including yours. I found it to be roughly comparable to, but still slightly slower than, OpenBSD's bc (except on one specific task, where it even beat GMP).\r\n\r\nThose benchmarks make sense to me, except plain OpenBSD `bc` being faster than mine; it uses plain `char` for digits, so mine should be faster. My guess is that it is parsing without many error checks.\r\n\r\nAlso, I store constants as strings, like GNU. This is because someone could change the `ibase` at any time, and if they do, that constant needs to be interpreted according to the new `ibase`. But I know for a fact that the OpenBSD `bc` has a different behavior: it will interpret the number according to the digits, no matter if the digits are invalid for the `ibase`. This allows it to precalculate, where GNU and I cannot.",
        "createdAt": "2023-08-18T07:17:28Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/69#issuecomment-1683464187",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5kbO1o",
        "author": {
          "login": "TediusTimmy"
        },
        "authorAssociation": "NONE",
        "body": "Many apologies. I posted that improvement and went straight to bed last night, and then life got in the way of me responding. And I am going to go straight to bed tonight, also.\r\n\r\n> If you know how I might submit a request for them to do so, please let me know.\r\n\r\nHonestly, when it comes to Debian, Philip Hands was a godsend (but, he isn't the maintainer). I tried emailing Phil Nelson and Ken Pizzini and Ryan Kavanagh, but those probably went into spam filters. Eventually, I emailed the debian-devel mailing list and someone who helps first-time contributors (Hands) picked it up and ran with it. Like any large open-source project, it has an inscrutable political organization to outsiders like us. I was lucky that they even have a merge request for the changes (which has been open for over a year).\r\n\r\nThe real problem is that GNU bc is \"good enough\". It has vulnerabilities that no one is known to have exploited (if they even are exploitable). People complain, but not loud enough to get things done. It works for its purpose, and doesn't seem to have a large user base.\r\n\r\n> But I don't know how to contact them and convince them to use my library.\r\n\r\nAgain: inscrutable political organization. I don't actually program with PHP, I also am just aware of this extension. Looking at this bug report ( https://github.com/php/php-src/issues/10967 ), maybe the internal mailing list or the RFC process is what you want. \r\n\r\n> the PHP authors are wrong\r\n\r\nYeah. Thought, looking at it again, they could have fixed the issue here ( https://github.com/php/php-src/blob/master/ext/bcmath/bcmath.c#L258 ) instead of where they did. You could convince them that this is the better place for a bodge between their code and the bc library (as the behavior is standards-driven). Though, even Debian has a bug for this: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=610988\r\n\r\n> with style fixes\r\n\r\nWhat did you change? Oh, that. I get that from a former workplace.\r\n\r\n> it uses plain char for digits\r\n\r\nIt uses the OpenSSL BIGNUM library, which is binary words ( https://github.com/openbsd/src/blob/master/usr.bin/dc/bcode.h#L24 and https://github.com/openbsd/src/blob/master/lib/libcrypto/bn/bn_local.h#L121 ). For every 64 bits of a number, they are operating on all 64 bits, and you are operating on a little over 63 bits of it and have a normalization step. The trade-off rears its ugly head when numbers get converted to/from decimal.\r\n\r\n> do you think that you'll open more issues on bc in the future\r\n\r\nI don't have any plans. This was a spur-of-the-moment thing. I had \"finished\" a pow function for the spreadsheet, and decided to rewrite it in bc. (And then, I spent a bunch of time rewriting it again, as I realized that I had missed some corner cases). I don't plan to make a habit of this.\r\n\r\nAs for reviewing things:\r\n\r\n> being non-zero is a flag for later and a value to be used\r\n\r\nI did that, didn't I? Bad me.\r\n\r\nI don't know if the algorithm needs this much detail. It is probably good to give the impression that someone put thought and care into making sure the results were accurate. Though, really it was just some rando who kept doing really large exponents and wanted some numerical stability as he cranked up the precision while looking at numbers like https://www.youtube.com/watch?v=BdHFLfv-ThQ.",
        "createdAt": "2023-08-19T06:38:17Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/69#issuecomment-1684860264",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5kbPwt",
        "author": {
          "login": "TediusTimmy"
        },
        "authorAssociation": "NONE",
        "body": "And I forgot to say something: I understand that the frustrating thing about the bcmath extension to PHP is that you have something that is _just better_. And you have no idea how to make things better.",
        "createdAt": "2023-08-19T06:46:55Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/69#issuecomment-1684864045",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5kcbqC",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "> Eventually, I emailed the debian-devel mailing list and someone who helps first-time contributors (Hands) picked it up and ran with it. Like any large open-source project, it has an inscrutable political organization to outsiders like us.\r\n\r\nYeah, that sounds exhausting. Not worth it to me at the moment.\r\n\r\n> The real problem is that GNU bc is \"good enough\". It has vulnerabilities that no one is known to have exploited (if they even are exploitable). People complain, but not loud enough to get things done. It works for its purpose, and doesn't seem to have a large user base.\r\n\r\nThis is true.\r\n\r\n> Yeah. Thought, looking at it again, they could have fixed the issue here ( https://github.com/php/php-src/blob/master/ext/bcmath/bcmath.c#L258 ) instead of where they did. You could convince them that this is the better place for a bodge between their code and the bc library (as the behavior is standards-driven).\r\n\r\nEh, probably not worth it.\r\n\r\n> Though, even Debian has a bug for this: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=610988\r\n\r\nYikes. People don't read, do they? Okay, I *really* don't care about getting into Debian.\r\n\r\n> It uses the OpenSSL BIGNUM library, which is binary words\r\n\r\nOh, that was not what I understood. Oops. Those benchmarks make sense then.\r\n\r\n> I don't have any plans. This was a spur-of-the-moment thing.\r\n\r\nOkay.\r\n\r\n> As for reviewing things...I did that, didn't I? Bad me.\r\n\r\nWell, that `bc` code goes straight into the binary as a string. Using `z` as a flag and a value is useful to reduce the number of bytes used. I kept it for a reason.\r\n\r\n> I don't know if the algorithm needs this much detail. It is probably good to give the impression that someone put thought and care into making sure the results were accurate.\r\n\r\n*I* need that much detail. I *have* to understand every bit of code in this repo.\r\n\r\nTake, for example, the comment [here][1]. That was me explaining, *to myself*, an algorithm that someone else coded up. If there was a bug in that algorithm when I got it (and there was), there was no way for me to debug it unless I knew what it was supposed to be doing.\r\n\r\nIf there is a bug in your code, I need to understand your code to debug it.\r\n\r\nThat's why there is a wealth of information for developers; it's for *me*.\r\n\r\nSo I'm glad to know that the explanation is correct, but I'll keep all of it. :)\r\n\r\nI may wait a while to release a new version (I have a new PR about adding CMake support), but I will release a new version with your code within a reasonable time.\r\n\r\nThank you.\r\n\r\n[1]: https://github.com/gavinhoward/bc/blob/75cf2e3358b5a76780db0d448c02cf6f61065921/src/num.c#L3077-L3113",
        "createdAt": "2023-08-20T04:43:10Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/69#issuecomment-1685174914",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5nZ8wq",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "There is now a version (`6.6.1`) with your `p()` implementation. Thank you very much!",
        "createdAt": "2023-09-26T05:30:27Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/69#issuecomment-1734855722",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5nnXnb",
        "author": {
          "login": "TediusTimmy"
        },
        "authorAssociation": "NONE",
        "body": "You are welcome. I hope it is as useful for your other users as it is to me and not a maintenance burden on you.",
        "createdAt": "2023-09-28T03:11:48Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/69#issuecomment-1738373595",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5nnXzO",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "None at all now that I understand it, thanks to you!",
        "createdAt": "2023-09-28T03:13:15Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/69#issuecomment-1738374350",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2023-08-18T05:29:27Z",
    "id": "I_kwDOCL0xJc5uoYUw",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 69,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Incoherent rambling followed by a suggestion for an improvement.",
    "updatedAt": "2023-09-28T03:13:15Z",
    "url": "https://github.com/gavinhoward/bc/issues/69"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjI5MDIyNQ==",
      "is_bot": false,
      "login": "mhorowitz",
      "name": ""
    },
    "body": "platform: MacOS Ventura 13.2.1 (m1 max)\r\ncompiler: c99 from Xcode 14.2.0\r\nversion: https://git.gavinhoward.com/gavin/bc.git 55a6c05b280fbfb6873e42a5825403c17417029a\r\n\r\nBuild fails:\r\n```\r\n$ ./configure -O3\r\n<success>\r\n$ make\r\nc99 -DBC_ENABLED=1 -DDC_ENABLED=1 -I./include/ -DBUILD_TYPE=A  -DEXECPREFIX= -DMAINEXEC=bc  -DBC_NUM_KARATSUBA_LEN=32 -DBC_ENABLE_NLS=1 -DBC_ENABLE_EXTRA_MATH=1 -DBC_ENABLE_HISTORY=1 -DBC_ENABLE_LIBRARY=0 -DBC_ENABLE_MEMCHECK=0 -DBC_ENABLE_AFL=0 -DBC_DEFAULT_BANNER=0 -DBC_DEFAULT_SIGINT_RESET=1 -DBC_DEFAULT_TTY_MODE=1 -DBC_DEFAULT_PROMPT=1 -DBC_DEFAULT_EXPR_EXIT=1 -DBC_DEFAULT_DIGIT_CLAMP=0 -DDC_DEFAULT_SIGINT_RESET=1 -DDC_DEFAULT_TTY_MODE=0 -DDC_DEFAULT_PROMPT=0 -DDC_DEFAULT_EXPR_EXIT=1 -DDC_DEFAULT_DIGIT_CLAMP=0 -DNDEBUG  -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -O3  -DBC_ENABLE_EDITLINE=0 -DBC_ENABLE_READLINE=0 -o src/program.o -c ./src//program.c\r\n./src//program.c:2994:6: error: use of undeclared identifier 'SIGWINCH'\r\n        if (BC_SIG_INTERRUPT(vm))\r\n            ^\r\n./include/status.h:698:45: note: expanded from macro 'BC_SIG_INTERRUPT'\r\n        BC_UNLIKELY((vm)->sig != 0 && (vm)->sig != SIGWINCH)\r\n                                                   ^\r\n./src//program.c:3724:6: error: use of undeclared identifier 'SIGWINCH'\r\n        if (BC_SIG_INTERRUPT(vm))\r\n            ^\r\n./include/status.h:698:45: note: expanded from macro 'BC_SIG_INTERRUPT'\r\n        BC_UNLIKELY((vm)->sig != 0 && (vm)->sig != SIGWINCH)\r\n                                                   ^\r\n2 errors generated.\r\nmake: *** [src/program.o] Error 1\r\n```\r\nI think ideally, configure.sh would detect this, and apply an appropriate set of flags, or the source would be changed appropriately.\r\n\r\nAs a workaround, this allows a successful build:\r\n```\r\nCFLAGS=-D_DARWIN_C_SOURCE ./configure -O3\r\n```",
    "closed": true,
    "closedAt": "2023-03-31T17:44:43Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5Y4XHV",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Stupid GitHub, closing the issue just because I mention the number in a commit...\r\n\r\nAnyway, yes, this is a bug, and yes, `configure.sh` should detect this.\r\n\r\nI've added 29b4b6a4f27b07c4a176258aaf831a5208d4e116 in an attempt to fix this. Unfortunately, I don't have a Mac, so you'll need to test this for me. Would you please do that? Thank you.",
        "createdAt": "2023-03-31T01:36:32Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/67#issuecomment-1491169749",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5Y8585",
        "author": {
          "login": "mhorowitz"
        },
        "authorAssociation": "NONE",
        "body": "> I've added https://github.com/gavinhoward/bc/commit/29b4b6a4f27b07c4a176258aaf831a5208d4e116 in an attempt to fix this. Unfortunately, I don't have a Mac, so you'll need to test this for me. Would you please do that? Thank you.\r\n\r\nI tested it.  ./configure.sh output includes\r\n\r\n    On Mac OSX. Using _DARWIN_C_SOURCE.\r\n\r\nAnd make completes without error.  Thanks for the quick fix!",
        "createdAt": "2023-03-31T17:44:43Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/67#issuecomment-1492361017",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5Y867a",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Thank you for testing! And thank you for the report. I rely on users like you to help me with Mac OSX!",
        "createdAt": "2023-03-31T17:46:45Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "ROCKET",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/67#issuecomment-1492365018",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5c_2t2",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Release `6.6.0` is out with the fix. Thank you!",
        "createdAt": "2023-05-23T23:11:04Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/67#issuecomment-1560243062",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2023-03-30T22:25:15Z",
    "id": "I_kwDOCL0xJc5iQKue",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 67,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Build fails on macOS",
    "updatedAt": "2023-05-23T23:11:20Z",
    "url": "https://github.com/gavinhoward/bc/issues/67"
  },
  {
    "assignees": [],
    "author": {
      "id": "U_kgDOBZsPsA",
      "is_bot": false,
      "login": "STSMHQ",
      "name": "STSM"
    },
    "body": "Hi, there,\r\n\r\nI love your command line tool and your blog (I read all your posts). You're an amazing developer. I hope one day I can be like you.\r\nI'm opening this issue to ask you if there is any way to bypass the `Math error: overflow: number cannot fit` error on your calculator. I would like to test it for benchmark purposes against Julia REPL (for example), but your `bc` gives me this error when the number has too many digits.\r\n\r\nExample Calculation: `((169287^137)^920)^13256118217109`.\r\n\r\nRegards,\r\n**STSM**",
    "closed": true,
    "closedAt": "2023-03-21T17:06:49Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5XyVJh",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Hello,\r\n\r\nThank you for the compliments!\r\n\r\n> I'm opening this issue to ask you if there is any way to bypass the `Math error: overflow: number cannot fit` error on your calculator.\r\n\r\nIt depends.\r\n\r\nOn the particular example you gave, my machine did not give the error. (I am running an `x86_64` Linux machine.)\r\n\r\nThe error happens in this case because `bc` limits exponents to the maximum that can fit in the `unsigned long` type. There are good reasons for this, not least of which calculating a power with an exponent larger than that takes a long time.\r\n\r\nFor example, I started running the example calculation you gave seven hours ago, and it's still going.\r\n\r\nThe other reason is that the exponent needs to be converted into an `unsigned long` to do the actual calculation, which involves running a loop.\r\n\r\nBy the way, this is also the reason that exponents need to be integers.\r\n\r\nAnyway, one way to get around the limit would be to get a computer with a 64-bit `unsigned long` type. Machines that may *not* have that could include Windows (even if 64-bit) or 32-bit machines with any OS.\r\n\r\nAs an example, here are the limits for my machine (found by the `limits` keyword):\r\n\r\n```\r\n$ bc\r\n>>> limits\r\nBC_LONG_BIT      = 64\r\nBC_BASE_DIGS     = 9\r\nBC_BASE_POW      = 1000000000\r\nBC_OVERFLOW_MAX  = 18446744073709551615\r\n\r\nBC_BASE_MAX      = 1000000000\r\nBC_DIM_MAX       = 18446744073709551614\r\nBC_SCALE_MAX     = 18446744073709551614\r\nBC_STRING_MAX    = 18446744073709551614\r\nBC_NAME_MAX      = 18446744073709551614\r\nBC_NUM_MAX       = 18446744073709551614\r\nBC_RAND_MAX      = 18446744073709551615\r\nMAX Exponent     = 18446744073709551615\r\nNumber of vars   = 18446744073709551614\r\n>>> quit\r\n```\r\n\r\nThere are two to notice: `BC_LONG_BIT` and `MAX Exponent`.\r\n\r\n`BC_LONG_BIT` is 64, which means `bc` was built assuming a 64-bit `unsigned long` type. `MAX Exponent` is the actual limit to the exponent, which equals `(2^64)-1`, which is `ULONG_MAX` on a machine with a 64-bit `unsigned long`.\r\n\r\nHowever, if I tell my `bc` to assume a 32-bit `unsigned long` when I build it, using:\r\n\r\n```\r\n$ LONG_BIT=32 ./configure <args>\r\n$ make\r\n```\r\n\r\nThen the limits look different:\r\n\r\n```\r\n$ bin/bc\r\n>>> limits\r\nBC_LONG_BIT      = 32\r\nBC_BASE_DIGS     = 4\r\nBC_BASE_POW      = 10000\r\nBC_OVERFLOW_MAX  = 4294967295\r\n\r\nBC_BASE_MAX      = 10000\r\nBC_DIM_MAX       = 4294967294\r\nBC_SCALE_MAX     = 4294967294\r\nBC_STRING_MAX    = 4294967294\r\nBC_NAME_MAX      = 4294967294\r\nBC_NUM_MAX       = 4294967294\r\nBC_RAND_MAX      = 4294967295\r\nMAX Exponent     = 4294967295\r\nNumber of vars   = 18446744073709551614\r\n>>> quit\r\n```\r\n\r\n`BC_LONG_BIT` is now 32, and `MAX Exponent` is now 4294967295, which is `(2^32)-1`. Notice that 4294967295 is less than the last exponent (13256118217109) in your example calculation. This means that if 4294967295 is your `MAX Exponent`, you will get that error. And I *do* get that error when trying your example computation with that build.\r\n\r\nNow, there *is* still a way around it, but it requires some math knowledge.\r\n\r\nYou must know one fact: `(x^y)*(x^z) == x^(y+z)`.\r\n\r\nIn essence, if you multiply two powers of one number, the effect is the same as adding the exponents of those powers and then calculating the power from the sum of those exponents.\r\n\r\nUsually, you would want to just add the exponents and then calculate the power because multiplications would be much more expensive. However, in this case, we can do the opposite: split the exponent (13256118217109) into several numbers and then multiply all of those numbers together.\r\n\r\nLet's decide on one exponent to use, which I'll call `E`. I can divide 13256118217109 by `E`, and the result is the number of times that I need to multiply the power by itself. However, that will not be quite right because `E` almost certainly does not divide 13256118217109 evenly, so `13256118217109%E` won't be 0. In that case, we'll want to multiply the end result by the power where the exponent is equal to `13256118217109%E`.\r\n\r\nIt will all look like this (in `bc` code):\r\n\r\n```\r\nscale = 0\r\ns = ((169287^137)^920)\r\nn = s^E\r\nr = n\r\nt = 13256118217109 / E\r\nm = 13256118217109 % E\r\n\r\nfor (i = 1; i < t; ++i)\r\n{\r\n    r *= n\r\n}\r\n\r\nr *= s^m\r\n```\r\n\r\nBut even then, we can make it faster. Since we are just multiplying the value by itself many times, we can use power again. This time, the exponents (3086 and 6172) are back within limits, so we're safe.\r\n\r\nIf we do that, we get:\r\n\r\n```\r\nscale = 0\r\ns = ((169287^137)^920)\r\nt = 13256118217109 / E\r\nm = 13256118217109 % E\r\nn = s^E\r\nr = n^t\r\nr *= s^m\r\n```\r\n\r\nAnd that should give us our answer.\r\n\r\nWe should set those exponents as best as we can to make it as efficient as possible.\r\n\r\nI know that my `bc` uses the binary representation of the exponent to calculate power. Every bit that's a 1 has an extra multiply.\r\n\r\nSo if I set one of the powers to `(2^32)-1`, I know every single bit will be 1, meaning that there will be extra multiplications. However, it will also mean I need to use an exponent of 3086 (`13256118217109/((2^32)-1)`), whereas if I set one of the powers to be `2^31`, there will only be a single 1 bit, but I will need to use an exponent of 6172.\r\n\r\nAn exponent of 6172 has the same amount of 1 bits as 3086 (it's just 3086 times 2), so it will require only one more multiply. However, `2^31` will require 30 less multiplies than `(2^32)-1`, so we'll go with that.\r\n\r\nThat gives us this code:\r\n\r\n```\r\nscale = 0\r\ne = 2^31\r\ns = ((169287^137)^920)\r\nt = 13256118217109 / e\r\nm = 13256118217109 % e\r\nn = s^e\r\nr = n^t\r\nr *= s^m\r\n```\r\n\r\nI haven't tested the above code because it will take forever. If there are problems, please let me know.\r\n\r\n> I would like to test it for benchmark purposes against Julia REPL (for example)\r\n\r\nMy `bc` will be slower than Julia. I am confident of that.\r\n\r\nThis is because my `bc` does not use the full range of hardware-native integers in order to use decimal-based math. I bet Julia does use the full range and uses binary-based math.\r\n\r\nAlso, since it's taken seven hours on my `bc` on a 64-bit machine, I am *wildly* confident that Julia will be better.\r\n\r\nYou may want a benchmark with a smaller exponent.",
        "createdAt": "2023-03-16T22:04:11Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/66#issuecomment-1472811617",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5X2u-Q",
        "author": {
          "login": "STSMHQ"
        },
        "authorAssociation": "NONE",
        "body": "First of all, I just want to let you know that you're really, really amazing. The passion that you've for your project(s) and for the people that interact with them is something that melts my heart. I hope one day I can be a programmer as good as you and also, more important, have the same amount of passion that you have.\r\n\r\nEnglish is not my primary language, so this may not make any sense.\r\n\r\n> Anyway, one way to get around the limit would be to get a computer with a 64-bit unsigned long type. Machines that may not have that could include Windows (even if 64-bit) or 32-bit machines with any OS.\r\n\r\nI'm using a x64 Windows Machine, that's the reason, so. I'll start compiling your `bc` on Linux using WSL.\r\n\r\n> You must know one fact: `(x^y)*(x^z) == x^(y+z)`.\r\n> \r\n> In essence, if you multiply two powers of one number, the effect is the same as adding the exponents of those powers and then calculating the power from the sum of those exponents.\r\n\r\nI knew that, but somehow I didn't think about it. Thanks for the recap.\r\n\r\n> My `bc` will be slower than Julia. I am confident of that.\r\n>\r\n> This is because my `bc` does not use the full range of hardware-native integers in order to use decimal-based math. I bet Julia does use the full range and uses binary-based math.\r\n\r\nWell, that's kinda \"chinese\" to me. I'm not as good as you to understand that low-level programming stuff\r\n\r\n> You may want a benchmark with a smaller exponent.\r\n\r\nI'll.\r\n\r\nOn another topic, I'm using your tool to keep track of my expenses. Before closing this issue, I would like to ask you if there is any way that I can use \"import\" statements in your `bc` ecosystem.\r\n\r\nI know that I can work with more than one file at the same time using the `-f`/`-c` flags, but I'm wondering if is possible to access multiple files by only importing one - and use data from other files inside it.\r\n\r\nMy goal (if that can help you answering it) is to have a single file with functions/operations and then a bunch of other files only with data (expenses and gains) - like a local mini database - that I can call in the \"main\" `bc` file and work with.\r\n",
        "createdAt": "2023-03-17T14:54:05Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/66#issuecomment-1473965968",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5X5p-w",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Thank you for your compliment!\r\n\r\nJust so you know, I have [not always had this passion][1]. But I firmly believe that software is meant to serve people. That's why I focus so much on helping others.\r\n\r\nIt makes me really happy that you noticed!\r\n\r\n> I'm using a x64 Windows Machine, that's the reason, so. I'll start compiling your `bc` on Linux using WSL.\r\n\r\nYeah, sorry about that. Windows is dumb in that they decided that the `unsigned long` type should remain 32 bits. It was a stupid decision.\r\n\r\n> Well, that's kinda \"chinese\" to me. I'm not as good as you to understand that low-level programming stuff\r\n\r\nI apologize. I'll try again.\r\n\r\nUnder the hood, `bc` uses 32-bit unsigned integers (on 64-bit) as \"digits\". It turns out that the highest power of 10 that 32 bits can contain is `10^9`, or 1,000,000,000. This is one more than the maximum value that `bc` allows in each 32-bit integer. If it goes higher than this, `bc` will detect that it went higher and add the extra to the next \"digit\". This keeps each digit below 1,000,000,000.\r\n\r\nHowever, that is not optimal. I did that because `bc` needs to have decimal-based math. (In other words, the math needs to be in base 10.) If you can have your math in binary, base 2, it's much cheaper because then you can make your limit `2^32`, which is much higher than `10^9` (4,294,967,296 vs. 1,000,000,000).\r\n\r\nJulia uses base 2. This means that each \"digit\" can store more, which means the numbers are smaller (in number of digits). And smaller numbers mean faster execution.\r\n\r\nI hope that made sense.\r\n\r\n> On another topic, I'm using your tool to keep track of my expenses.\r\n\r\nI admit that's *terrifying* to me. I mean, technically, it should be safe, as long as you don't do any division or modulus in your scripts. But I don't want to screw up your finances with `bc`.\r\n\r\nI hope you remember there's **no warranty**. If there is a bug, I'll try to help, but I can't guarantee that your financial records will be correct in the presence of bugs.\r\n\r\nI *will* guarantee, though, that I know of no bugs. I have fixed all of the ones I am aware of.\r\n\r\n> Before closing this issue, I would like to ask you if there is any way that I can use \"import\" statements in your bc ecosystem.\r\n\r\nSort of.\r\n\r\n> I know that I can work with more than one file at the same time using the `-f`/`-c` flags, but I'm wondering if is possible to access multiple files by only importing one - and use data from other files inside it.\r\n\r\nWell, that's the only way.\r\n\r\nActually, it's even simpler than that. `bc` runs scripts in the order given on the command-line. For example, you could run this:\r\n\r\n```\r\n$ bc funcs.bc database.bc main.bc\r\n```\r\n\r\nAnd `bc` will run `funcs.bc`, then `database.bc`, then `main.bc`.\r\n\r\nThis means that anything in `funcs.bc` can affect the execution of `database.bc`, and anything in `funcs.bc` and `database.bc` can affect the execution of `main.bc`.\r\n\r\nThis means that you can chain together scripts in a way that acts like import. Sort of. If you would only import at the top of a file.\r\n\r\nBasically, this would mean that if `bc` had an `import` statement, the above would be equivalent to putting:\r\n\r\n```\r\nimport funcs.bc\r\nimport database.bc\r\n```\r\n\r\nat the *top* of `main.bc`.\r\n\r\nI do this myself; I have a math research project, and when I get new ideas, I start a new script. But I have all of my common functions in a `lib.bc` script, so I run it like this:\r\n\r\n```\r\n$ bc lib.bc <current_script>\r\n```\r\n\r\nThis even works for global variables; if you set a variable `food_expenses` to say `101.00` at the top level of a script, that variable will equal `101.00` in later scripts.\r\n\r\nSo if I were you, I would have a `funcs.bc` script that defines all of the functions. Then I would have a `database.bc` script that has the current values of all of your expenses. It should look something like this:\r\n\r\n```\r\nfood_expenses = 101.00\r\nentertainment_expenses = 45.50\r\n```\r\n\r\nand so on.\r\n\r\nThen, in the last script, I would have the code to actually update the database, but instead of directly updating, I would have it print the new \"version\" of `database.bc` to `stdout`.\r\n\r\nThen you would run it like this:\r\n\r\n```\r\n$ bc funcs.bc database.bc main.bc > temp.bc\r\n```\r\n\r\nThen check that `temp.bc` is correct. If it is, you can remove `database.bc` and rename `temp.bc` to `database.bc`:\r\n\r\n```\r\n$ rm database.bc\r\n$ mv temp.bc database.bc\r\n```\r\n\r\nTo make the example more concrete, let's assume that you have a `funcs.bc` that looks like this:\r\n\r\n```\r\ndefine void add_to_food_expenses(expense) {\r\n    # If you don't put `food_expenses` in an `auto` statement,\r\n    # then the global variable will be affected.\r\n    food_expenses += expense\r\n    # The global `total_expenses` is also affected with an `auto`.\r\n    total_expenses += expense\r\n}\r\n\r\ndefine void print_new_database() {\r\n    print \"food_expenses = \", food_expenses, \"\\n\"\r\n    print \"total_expenses = \", total_expenses, \"\\n\"\r\n}\r\n```\r\n\r\nThen perhaps you have a `database.bc` that looks like this:\r\n\r\n```\r\nfood_expenses = 101.00\r\ntotal_expenses = 404.40\r\n```\r\n\r\nThen you have a `main.bc` that looks like this:\r\n\r\n```\r\n# read() reads from stdin.\r\nexpense = read()\r\n\r\nadd_to_food_expenses(expense)\r\n\r\nprint_new_database()\r\n```\r\n\r\nThen running the following:\r\n\r\n```\r\n$ echo \"35.75\" | bc funcs.bc database.bc main.bc\r\n```\r\n\r\nwill print:\r\n\r\n```\r\nfood_expenses = 136.75\r\ntotal_expenses = 440.15\r\n```\r\n\r\nwhich if you redirect to `temp.bc`:\r\n\r\n```\r\n$ echo \"35.75\" | bc funcs.bc database.bc main.bc > temp.bc\r\n```\r\n\r\nwill make `temp.bc` a valid replacement for `database.bc`.\r\n\r\n(While it may be safe to redirect straight to `database.bc`, I would not suggest doing so. If `funcs.bc` has any print statements that run, `database.bc` will be overwritten before it is ever read.)\r\n\r\n> My goal (if that can help you answering it) is to have a single file with functions/operations and then a bunch of other files only with data (expenses and gains) - like a local mini database - that I can call in the \"main\" `bc` file and work with.\r\n\r\nI *think* I answered according to your goal. I hope that helps, but please come back with any questions you have.\r\n\r\n[1]: https://gavinhoward.com/2021/12/is-it-even-worth-working-on-foss-anymore/",
        "createdAt": "2023-03-18T05:48:18Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/66#issuecomment-1474731952",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5YHLzP",
        "author": {
          "login": "STSMHQ"
        },
        "authorAssociation": "NONE",
        "body": "Hi. Sorry for the delay replying.\r\n\r\n> It makes me really happy that you noticed!\r\n\r\nOf course. I'm lacking motivation for programming - even in my university project (I'm currently in my last year of my master degree) -, specially now with all the improvements made in the IA field, but reading your blog posts and messages like this one, somehow, gives me motivation to continue.\r\n\r\nI would like to suggest, if possible, a way to interact with you in your blog (like a comments section, for example). \r\n\r\n> I hope that made sense.\r\n\r\nIt did. I studied it in my first year at university, but I didn't know that specifically, so thank you.\r\n\r\n> I hope you remember there's **no warranty**. If there is a bug, I'll try to help, but I can't guarantee that your financial records will be correct in the presence of bugs.\r\n> \r\n> I *will* guarantee, though, that I know of no bugs. I have fixed all of the ones I am aware of.\r\n\r\nAnd that's all that matters for me. There is nothing that compares to the support that you offer.\r\n\r\n> I think I answered according to your goal. I hope that helps, but please come back with any questions you have.\r\n\r\nYou did. Thanks again for the time spent on this. I use a different set of files, but the information that you gave me is going to help me improve my system. So, thanks (one more time xD).",
        "createdAt": "2023-03-21T17:06:49Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/66#issuecomment-1478278351",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5YIXfA",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "> Sorry for the delay replying.\r\n\r\nNo worries!\r\n\r\n> Of course. I'm lacking motivation for programming - even in my university project (I'm currently in my last year of my master degree)\r\n\r\nOh, cool, what is your project? (I dropped out of a Master's; I'm kind of jealous.)\r\n\r\n> I would like to suggest, if possible, a way to interact with you in your blog (like a comments section, for example).\r\n\r\nI have thought about this many times and have always rejected the idea due to the amount of spam-busting and moderation required, at least as told by other bloggers. Oh, and I don't want people to see a buggy site if they have JavaScript turned off as comments nearly always require JavaScript.\r\n\r\nHowever, your suggestion has made me look at it again, and I had an idea.\r\n\r\nOne of the best pieces of software, at least for forums, is the software underpinning <https://lobste.rs/>. While I have been banned from that site, I appreciate the software for its moderation capabilities. This includes invite-only registration, which would help a lot to only allow people who want to interact with me and others in a good way.\r\n\r\nI've also always wanted to run a forum site where Free Speech was honored as much as possible because [I think Free Speech is necessary to find the truth][1].\r\n\r\nSo in response to your suggestion, if the lobste.rs software will work for my purposes, I'll spin up an instance at <https://forum.gavinhoward.com/> (or something similar), and I'll send you an invite, along with anyone else whose opinions I trust. And every time I post something new, I'll put it on the instance and link to it from the post. That should allow me to have a \"comments section\" while not interfering with my current site.\r\n\r\nI think I'll also allow others to post stuff too. Maybe I'll make its theme to be anything that is intellectually stimulating. I don't know; I'm just spitballing here.\r\n\r\n> I studied it in my first year at university, but I didn't know that specifically, so thank you.\r\n\r\nYou're welcome!\r\n\r\n> And that's all that matters for me.\r\n\r\nThank goodness!\r\n\r\n> There is nothing that compares to the support that you offer.\r\n\r\nYou're welcome! And thank you. I am overjoyed to hear this, actually.\r\n\r\nI'm starting a business right now, and my product is support for Open Source software that I have written. I was wondering if that would be a good product, but if my support is good, it might work. So I'm *thrilled* that you think so!\r\n\r\n(Don't worry; I'll always support `bc` for free; it's my gift to the world. The software that I'll be supporting for pay is at <https://git.yzena.com/Yzena/Yc>.)\r\n\r\nFull disclosure: this is also why I took your suggestion for a comments section more seriously; it would be a good way for me to network with potential clients. I apologize for having less than perfect motives.\r\n\r\nAlso, to take it one step further, can I point to this interaction we had as an example of the support I will give? I think it would be great material to advertise with. No offense if you don't want that though; I know that's a selfish motive.\r\n\r\n> You did. Thanks again for the time spent on this. I use a different set of files, but the information that you gave me is going to help me improve my system. So, thanks (one more time xD).\r\n\r\nYou're welcome! Glad I could help!\r\n\r\n[1]: https://gavinhoward.com/2019/11/recommendations-and-radicalization/",
        "createdAt": "2023-03-21T21:13:49Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/66#issuecomment-1478588352",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5YLZeg",
        "author": {
          "login": "STSMHQ"
        },
        "authorAssociation": "NONE",
        "body": "> Oh, cool, what is your project? (I dropped out of a Master's; I'm kind of jealous.)\r\n\r\nYou don't need to be. You seem to have the required knowledge to be a teacher on my university. I'm from Portugal, btw.\r\n\r\nMy project is about telemetry. I'm building a telemetry solution using OpenTelemetry and multiple analysis backends for a health company. The problem is that such project is inside DevOps field and that's not my expertice or even the field that I want to work on. I want to be a programmer, a system programmer to be more precise.\r\n\r\n> This includes invite-only registration, which would help a lot to only allow people who want to interact with me and others in a good way.\r\n\r\nThat seems a good way to implement it. I didn't know about that specific website, but after a brief usage of it, I can say that I liked the way that it works.\r\n\r\n> So in response to your suggestion, if the lobste.rs software will work for my purposes, I'll spin up an instance at https://forum.gavinhoward.com/ (or something similar), and I'll send you an invite, along with anyone else whose opinions I trust. And every time I post something new, I'll put it on the instance and link to it from the post. That should allow me to have a \"comments section\" while not interfering with my current site.\r\n\r\nThat makes a lot of sense. I appreciate the consideration for my opinion xD\r\n\r\nWhen that instance is online, let me know, please.\r\n\r\n> I'm starting a business right now, and my product is support for Open Source software that I have written. I was wondering if that would be a good product, but if my support is good, it might work. So I'm thrilled that you think so!\r\n\r\nI see.. something like the commercial support that Daniel Stenberg offers for cURL?\r\n\r\n> (Don't worry; I'll always support bc for free; it's my gift to the world. The software that I'll be supporting for pay is at https://git.yzena.com/Yzena/Yc.)\r\n\r\nThat's nice to read. I'm planning to use `bc` for a very long time :d\r\n\r\n> Full disclosure: this is also why I took your suggestion for a comments section more seriously; it would be a good way for me to network with potential clients. I apologize for having less than perfect motives.\r\n\r\nIt wasn't necessary to make that disclosure. You're too kind just for considering having to do it. \r\n\r\n> Also, to take it one step further, can I point to this interaction we had as an example of the support I will give? I think it would be great material to advertise with. No offense if you don't want that though; I know that's a selfish motive.\r\n\r\nOf course you can. I'm flattered to be part of that.\r\n\r\n> You're welcome! Glad I could help!\r\n\r\nYou always do. Thanks (one more time)!",
        "createdAt": "2023-03-22T11:20:57Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/66#issuecomment-1479382944",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5YagqG",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "> The problem is that such project is inside DevOps field and that's not my expertice or even the field that I want to work on. I want to be a programmer, a system programmer to be more precise.\r\n\r\nOuch. I feel for you, and I feel lucky.\r\n\r\nI know this may not help, but I have personally found that my system programming skills (dev) got better after I learned system admininstration (ops).\r\n\r\nSystem administration is important to me for another reason: without it, I can't host my code or the forum that I mentioned.\r\n\r\nOnce you get your Master's, maybe you can try to do what I have done: build excellent system software and support it. That may give you the room you need to make it a career. If it is going to work for me, it will surely work for you too!\r\n\r\n> When that instance is online, let me know, please.\r\n\r\nIt's up at <https://forum.gavinhoward.com/>, but email is not working, so I need to wait. Please send me an email using the email listed at <https://gavinhoward.com/contact/>, and I'll send you an invite once email is working.\r\n\r\n> I see.. something like the commercial support that Daniel Stenberg offers for cURL?\r\n\r\nYes, basically.\r\n\r\n> Of course you can. I'm flattered to be part of that.\r\n\r\nThank you!",
        "createdAt": "2023-03-24T20:02:20Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/66#issuecomment-1483344518",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5YtkJ8",
        "author": {
          "login": "STSMHQ"
        },
        "authorAssociation": "NONE",
        "body": "Sorry for the delay replying (again).\r\n\r\n> I know this may not help, but I have personally found that my system programming skills (dev) got better after I learned system admininstration (ops).\r\n\r\nI hope you're right.\r\n\r\n> Once you get your Master's, maybe you can try to do what I have done: build excellent system software and support it. That may give you the room you need to make it a career. If it is going to work for me, it will surely work for you too!\r\n\r\nI'm trying to learn Rust on my free time, but it's been hard - I know your opinion about Rust xD -, let's see. \r\n\r\n> It's up at https://forum.gavinhoward.com/, but email is not working, so I need to wait. Please send me an email using the email listed at https://gavinhoward.com/contact/, and I'll send you an invite once email is working.\r\n\r\nThe [forum](https://forum.gavinhoward.com/) returns a 500 error code to me and the [contact page](https://gavinhoward.com/contact/) shows me that your e-mail is `<my_first_name>@<this_website>`. I'll send an email to `<redacted>` and hope it works.\r\n\r\n> Yes, basically.\r\n\r\nI see. Well, good luck for your new project. I'm pretty sure that people will love your support as much as I do.",
        "createdAt": "2023-03-29T10:27:50Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/66#issuecomment-1488339580",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5YwWgF",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "> I'm trying to learn Rust on my free time, but it's been hard - I know your opinion about Rust xD -, let's see.\r\n\r\nRemember that my Rust opinion is personal; Rust is pretty good in general.\r\n\r\n> The [forum](https://forum.gavinhoward.com/) returns a 500 error code to me and the [contact page](https://gavinhoward.com/contact/) shows me that your e-mail is `<my_first_name>@<this_website>`.\r\n\r\nI'm having trouble with the forum. In fact, it turns out that sending email just doesn't work. My email provider is blaming the lobste.rs software, but the software has the right settings, so...\r\n\r\nI'm probably just going to have to write my own forum software. Sorry for the delay. It may be a year or so.\r\n\r\n> I'll send an email to `<redacted>` and hope it works.\r\n\r\nThat is the correct address. I've redacted it because I don't want it machine-readable (to avoid spam), but it is correct.\r\n\r\n> I see. Well, good luck for your new project. I'm pretty sure that people will love your support as much as I do.\r\n\r\nThank you!",
        "createdAt": "2023-03-29T18:07:27Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/66#issuecomment-1489070085",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5Y0Yev",
        "author": {
          "login": "STSMHQ"
        },
        "authorAssociation": "NONE",
        "body": "> Remember that my Rust opinion is personal; Rust is pretty good in general.\r\n\r\nI hope it is here to stay for the long run.\r\n\r\n> I'm probably just going to have to write my own forum software. Sorry for the delay. It may be a year or so.\r\n\r\nNo problem. I'll put a reminder on my calendar, so. See you in a year (or so). Have a nice week!",
        "createdAt": "2023-03-30T11:18:53Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/66#issuecomment-1490126767",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5kIVVh",
        "author": {
          "login": "TediusTimmy"
        },
        "authorAssociation": "NONE",
        "body": "Hey, I realize that you asked this five months ago, but I just saw this and I wanted to chime in, because I love REALLLY BIG NUMBERS.\r\n\r\nNow, Gavin noted that `(x^y)*(x^z) == x^(y+z)`. It is also true that `(x^y)^z == x^(y*z)`. So, we can simplify your question to `169287^1670801140084418360`. Hoo, boy is that a big number! How big is it? `2.4917161343640611*10^8735990286585912792` The number that describes how many digits are in the number has 19 digits in it.\r\n\r\nHow did I do this (and what is Julia probably doing under the covers)? The same way a slide rule works: logarithms. It is definitionally true that `a^u=e^(ln(a^u))`. So `a^u=e(u*ln(a))`. But this works in any base, so I'll choose base 10 (I hope you remember your laws of logarithms).\r\n\r\nTo follow along:\r\n```\r\nscale=40\r\n137*920*13256118217109*l(169287)/l(10)\r\n```\r\nThat should give you that exponent. Remember: the number we want is ten raised to this power. To get the leading digits, we extract the mantissa (the fractional portion of a logarithm), and then raise 10 to this power. This works because of what Gavin noted: we can separate `3.2` into `3+.2`, and we are raising ten to this power, so it becomes `(10^3)*(10^.2)`:\r\n```\r\ne(.3964985643509537948664437764527360339575*l(10))\r\n```\r\n\r\nI want to point out two things: firstly, `bc` is going to compute all of the digits of this number; secondly, it is a big number. If we pack 19 decimal digits into every 8 bytes, it will still take over 3,000 petabytes of memory to store this number. To give you a sense of scale: at the end of 2021, Internet Archive had 212 petabytes of data archived.",
        "createdAt": "2023-08-16T03:29:40Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/66#issuecomment-1679906145",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5kl8FL",
        "author": {
          "login": "STSMHQ"
        },
        "authorAssociation": "NONE",
        "body": "Hi, @TediusTimmy. Thank you for your explanation. It helped a lot. I didn't know some of that mathematic equivalences. Have a nice week.",
        "createdAt": "2023-08-22T07:56:38Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/66#issuecomment-1687667019",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2023-03-16T12:20:42Z",
    "id": "I_kwDOCL0xJc5g_6ME",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 66,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "[QUESTION] Bypass Math Overflow for Large Computations",
    "updatedAt": "2023-08-22T07:56:38Z",
    "url": "https://github.com/gavinhoward/bc/issues/66"
  },
  {
    "assignees": [],
    "author": {
      "id": "U_kgDOB5Gq1Q",
      "is_bot": false,
      "login": "ikolesnikes",
      "name": ""
    },
    "body": "bin/bc enters an infinite loop while evaluating the cube-root of 0.01\r\n\r\nbin/bc -l -e 'cbrt(0.1)'\r\nreturns .46415888336127788924 (which is expected)\r\n\r\nbin/bc -l -e 'cbrt(0.01)'\r\nfreezes\r\n\r\nLooking at the definition of root(x,n) in lib2.bc the following loop never exits\r\n\r\n\twhile(r!=q){\r\n\t\tr=q\r\n\t\tq=(p*r+x/r^p)/n\r\n\t}\r\n\r\nA simple hack makes the cbrt function working.\r\n\r\n\twhile(abs(r-q)>0.000001){\r\n\t\tr=q\r\n\t\tq=(p*r+x/r^p)/n\r\n\t}",
    "closed": true,
    "closedAt": "2023-03-15T21:56:14Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5XXKFy",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Yes, this is a bug. I have reproduced it.\r\n\r\nYour fix pointed right to the problem, which I suspected: it ran into a pathological case where the two values, `r` and `q`, never equaled each other because they would keep switching, i.e., `r` would equal `x`, and `q` would equal `y`, then on the next iteration, `r` would equal `y`, and `q` would equal `x`.\r\n\r\nThis is the reason I hate algorithms that are calculated by series. They can easily have problems like this.\r\n\r\nI tried to fix it with 01230fcd9cfb547c5666247e1a36c624d3f2d01c. It increases the precision, but then does the comparison at a smaller precision.\r\n\r\nCan you pull and test it for me? I'll start my release process in the meantime.",
        "createdAt": "2023-03-13T08:13:31Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/64#issuecomment-1465688434",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5XYwKM",
        "author": {
          "login": "ikolesnikes"
        },
        "authorAssociation": "NONE",
        "body": "I tested your solution and it worked!\r\nMaybe it's worth to add a test for this case.\r\n\r\nNever mind, you already did it.",
        "createdAt": "2023-03-13T13:03:47Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/64#issuecomment-1466106508",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5XZaRe",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Yes, but you are right that if I did not, I should have!\r\n\r\nI will put out a release with the fix as soon as I can. I'll close this issue at that time.",
        "createdAt": "2023-03-13T14:45:27Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/64#issuecomment-1466279006",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5XrBvX",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Release `6.5.0` is out! Thank you for the report!",
        "createdAt": "2023-03-15T21:56:14Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/64#issuecomment-1470897111",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2023-03-13T06:01:54Z",
    "id": "I_kwDOCL0xJc5gm5mO",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 64,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "bc freezes evaluating cbrt(0.01)",
    "updatedAt": "2023-03-15T21:56:14Z",
    "url": "https://github.com/gavinhoward/bc/issues/64"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjE0ODEyNjg=",
      "is_bot": false,
      "login": "pg83",
      "name": "Anton Samokhvalov"
    },
    "body": "https://github.com/gavinhoward/bc/blob/master/scripts/safe-install.sh#L28 creates hard dependency loop on previously available bc for install process, which can be not available:\r\n\r\n* in bootstrap environments\r\n* in cross-compile environments\r\n",
    "closed": true,
    "closedAt": "2023-02-25T15:11:27Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5WEExO",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Whoops. I did not think of that. My bad.\r\n\r\nThis should be fixed in 313738df7f6d65875dd91ef63565227d0f782472 and 349cd801d5a7f4ab2fad76096d271397aa738063. I put out `6.3.1` because I know for a fact that Linux from Scratch will need these changes too, and they usually just grab the latest release.\r\n\r\nI hope this new release works for you. Please close this issue if it does.",
        "createdAt": "2023-02-24T16:05:13Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/63#issuecomment-1443908686",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5WIxOt",
        "author": {
          "login": "pg83"
        },
        "authorAssociation": "NONE",
        "body": "thanx!",
        "createdAt": "2023-02-25T15:11:27Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/63#issuecomment-1445139373",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2023-02-24T11:34:48Z",
    "id": "I_kwDOCL0xJc5fRqQO",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 63,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "bc -> bc dependency loop",
    "updatedAt": "2023-02-25T15:11:28Z",
    "url": "https://github.com/gavinhoward/bc/issues/63"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjUzMTI5ODE2",
      "is_bot": false,
      "login": "enh-google",
      "name": ""
    },
    "body": "trying to update AOSP to 6.2.4 (https://android-review.googlesource.com/c/platform/external/bc/+/2433072) i hit:\r\n```\r\ntests/: 413 files pushed, 0 skipped. 6.5 MB/s (1197549 bytes in 0.175s)\r\nscripts/functions.sh: 1 file pushed, 0 skipped. 60.6 MB/s (14190 bytes in 0.000s)\r\n***********************************************************************\r\n\r\nRunning bc tests...\r\n\r\nRunning bc decimal...pass\r\nSkipping bc print test\r\nSkipping bc parse test\r\nSkipping bc lib2\r\nRunning bc print2...pass\r\nRunning bc length...pass\r\nRunning bc scale...pass\r\nSkipping bc shift\r\nRunning bc add...pass\r\nRunning bc subtract...pass\r\nRunning bc multiply...pass\r\nRunning bc divide...pass\r\nRunning bc modulus...pass\r\nRunning bc power...pass\r\nRunning bc sqrt...pass\r\nSkipping bc trunc\r\nSkipping bc places\r\nRunning bc vars...pass\r\nRunning bc boolean...pass\r\nRunning bc comp...pass\r\nRunning bc abs...pass\r\nRunning bc assignments...pass\r\nRunning bc functions...pass\r\nSkipping bc scientific\r\nSkipping bc engineering\r\nRunning bc globals...pass\r\nRunning bc strings...pass\r\nSkipping bc strings2 test\r\nRunning bc letters...pass\r\nRunning bc exponent...pass\r\nRunning bc log...pass\r\nRunning bc pi...pass\r\nRunning bc arctangent...pass\r\nRunning bc sine...pass\r\nRunning bc cosine...pass\r\nSkipping bc bessel test\r\nRunning bc arrays...pass\r\nRunning bc misc...pass\r\nRunning bc misc1...pass\r\nRunning bc misc2...pass\r\nRunning bc misc3...pass\r\nRunning bc misc4...pass\r\nRunning bc misc5...pass\r\nRunning bc misc6...pass\r\nRunning bc misc7...pass\r\nRunning bc misc8...pass\r\nRunning bc void...pass\r\nSkipping bc rand\r\nRunning bc recursive_arrays...pass\r\nRunning bc divmod...pass\r\nRunning bc modexp...pass\r\nSkipping bc bitfuncs\r\nSkipping bc leadingzero\r\nRunning bc is_number...pass\r\nRunning bc is_string...pass\r\nRunning bc asciify_array...pass\r\nRunning bc line_by_line1...pass\r\nRunning bc line_by_line2...pass\r\nRunning bc line_loop_quit1...pass\r\nRunning bc line_loop_quit2...pass\r\nRunning bc stdin tests...pass\r\n/data/local/tmp/bc-tests/tests/scripts.sh[66]: check_d_arg: inaccessible or not found\r\n\r\nExit Code: 127\r\n```\r\nlooking at scripts.sh, it doesn't source functions.sh where the preceding scripts do. i'm not sure why that works with bash? i didn't think bash exported functions by default, but maybe it's doing so?\r\n\r\nanyway, i tested the obvious fix (https://android-review.googlesource.com/c/platform/external/bc/+/2433072/2/tests/scripts.sh).",
    "closed": true,
    "closedAt": "2023-02-15T16:15:07Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5VLKwA",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Whoops. That's a bug.\r\n\r\nI tried clicking your links, but they complained that I wasn't signed in our didn't have permission.\r\n\r\nI presume your obvious fix was to source `functions.sh`? I'll do that in my repo when I get home. Do you want a tagged release?",
        "createdAt": "2023-02-14T01:55:30Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/62#issuecomment-1428990976",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5VLMMt",
        "author": {
          "login": "enh-google"
        },
        "authorAssociation": "NONE",
        "body": "> I tried clicking your links, but they complained that I wasn't signed in our didn't have permission.\r\n\r\ngah, don't get me started ... the powers that be inflicted a stupid url rewriter on us recently that mean we can't give working urls to anyone. i'd tried to manually fix these, but didn't test them. fixed now (retconned above).\r\n\r\n> I presume your obvious fix was to source `functions.sh`?\r\n\r\nexactly.\r\n\r\n> I'll do that in my repo when I get home. Do you want a tagged release?\r\n\r\nyes please... our tooling isn't yet clever enough to get us back on to the next tagged release if we switch to a sha, so until we implement that, it's quite a bit more convenient if there's another tag. (especially if i happen to go under a bus :-) )",
        "createdAt": "2023-02-14T02:02:08Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/62#issuecomment-1428996909",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5VLqu1",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Fixed in 714782c613ec2a4570f63c1285d38785961edb89, which should also preemptively fix any other occurrences of this same bug.\r\n\r\nI'm running a basic release process to ensure that the release still builds and tests, but I should have a tag out tomorrow morning (US time).",
        "createdAt": "2023-02-14T05:04:50Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/62#issuecomment-1429121973",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5VP1W1",
        "author": {
          "login": "enh-google"
        },
        "authorAssociation": "NONE",
        "body": "> I'm running a basic release process to ensure that the release still builds and tests, but I should have a tag out tomorrow morning (US time).\r\n\r\nthanks! no hurry...",
        "createdAt": "2023-02-14T18:46:00Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/62#issuecomment-1430214069",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5VQreo",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "It's out! Because I haven't been able to get an Android environment going yet, I'm still not sure this will work for you. If it does, though, please close this issue. Otherwise, I'll try something else.",
        "createdAt": "2023-02-14T22:04:15Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/62#issuecomment-1430435752",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5VRBCe",
        "author": {
          "login": "enh-google"
        },
        "authorAssociation": "NONE",
        "body": "thanks... testing now: https://android-review.googlesource.com/c/platform/external/bc/+/2436773",
        "createdAt": "2023-02-14T23:24:21Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/62#issuecomment-1430524062",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5VVNiI",
        "author": {
          "login": "enh-google"
        },
        "authorAssociation": "NONE",
        "body": "merged! thanks for your help :-)",
        "createdAt": "2023-02-15T16:15:07Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/62#issuecomment-1431623816",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2023-02-14T00:32:53Z",
    "id": "I_kwDOCL0xJc5eXxKU",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 62,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "another mksh/bash difference?",
    "updatedAt": "2023-02-15T16:15:07Z",
    "url": "https://github.com/gavinhoward/bc/issues/62"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjUzMTI5ODE2",
      "is_bot": false,
      "login": "enh-google",
      "name": ""
    },
    "body": "i haven't been able to update for some time (5.0.1 was our last update!) because the tests fail in a weird way without much useful information. i've included the current failures for 6.2.2 below, for example.\r\n\r\nmy guess is that this is something to do with Android using mksh as its /bin/sh. the interleaved output makes it appear like there might be some disagreement about job handling between bash and mksh?\r\n\r\nare the current bc tests known to work on shells other than bash (and in particular mksh)? any ideas where i should look (or some kind of parallelism i can just disable)?\r\n```\r\n~/aosp-master-with-phones/external/bc$ ./run-bc-tests-on-android.sh \r\ntests/: 413 files pushed, 0 skipped. 0.8 MB/s (1191155 bytes in 1.372s)\r\nscripts/functions.sh: 1 file pushed, 0 skipped. 75.4 MB/s (12065 bytes in 0.000s)\r\n***********************************************************************\r\n\r\nRunning bc tests...\r\n\r\nSkipping bc lib2\r\nSkipping bc shift\r\nSkipping bc trunc\r\nSkipping bc places\r\nSkipping bc print test\r\nSkRunning bc decimal...Running bc print2...ipping bc parse test\r\nRunning bc scale...Skipping bc scientific\r\nRunning bc length...Running bc sqrt...Running bc modulus...RuRunning bc add...nning bc divide...Running bc subtract...Skipping bc engineering\r\nRunning bc multiply...Running bc power...Running bc abs...Running bc functions...pass\r\nRunning bc boolean...Running bc comp...Running bc assignments...Running bc vars...pass\r\nSkipping bc rand\r\npass\r\nSRunning bc globals...kipping bc bitfuncs\r\npass\r\nRunning bc strings...pass\r\nRunning bc cosine...pass\r\nSkipping bc strings2 test\r\nSkipping bc bessel test\r\npass\r\nRunning bc sine...Running bc misc2...RRunning bc exponent...pRunning bc log...Running bc misc8...Running bc misc...Running bc misc4...Running bc pi...upass\r\nSkipping bc leadingzero\r\nnning bc misc1...ppasRunning bc arrays...asss\r\n\r\nass\r\nRunning bc arctangent...Running bc misc6...Running bc modexp...Running bc void...Running bc misc3...Running bc letters...pass\r\npass\r\npRunning bc misc7...ass\r\npass\r\npass\r\nRunning bc divmod...Running bc recursive_arrays...Running bc misc5...pass\r\npass\r\npass\r\npass\r\npass\r\npass\r\npass\r\nppass\r\nass\r\nRunning bc is_number...pass\r\npass\r\npass\r\npass\r\nRunning bc asciify_array...Running bc line_loop_quit1...pass\r\nppass\r\npass\r\npass\r\npass\r\npass\r\nass\r\nRunning bc is_string...Running bc line_by_line1...Running bc line_by_line2...Running bc line_loop_quit2...Running bc command-line error tests...Running bc stdin tests...pass\r\nRunning bc error file 01.txt with clamping...pass\r\npass\r\npass\r\nRunning bc read...Running bc error file 02.txt with clamping...Running bc error file 03.txt with clamping...pass\r\npass\r\npass\r\npass\r\npass\r\npass\r\npass\r\npass\r\nRunning bc error file 01.txt without clamping...Running bc error file 04.txt with clamping...ppass\r\nSkipping bc script multiply.bc\r\npass\r\nass\r\nRunning bc error file 02.txt without clamping...pass\r\nRunning bc error file 05.txt with clamping...Skipping bc script divide.bc\r\nRunning bc error file 03.txt without clamping...Skipping bc script subtract.bc\r\npass\r\nRunning bc errors...Running bc read errors...pass\r\nSkipping bc script add.bc\r\nRunning bc error file 06.txt with clamping...Running bc error file 04.txt without clamping...pRunning bc error file 07.txt with clamping...ass\r\nRunning bc error file 01.txt through cat with clamping...pass\r\nRunning bc error file 08.txt with clamping...pass\r\nSkipping bc script print.bc\r\nRunning bc error file 02.txt through cat with clamping...Running bc error file 03.txt through cat with clamping...pass\r\npass\r\npass\r\nRunning bc error file 05.txt without clamping...pass\r\npass\r\nRunning bc error file 09.txt with clamping...pass\r\nRunning bc error file 07.txt without clamping...pass\r\nSkipping bc script parse.bc\r\nRunRunning bc error file 04.txt through cat wnith clamping...ing bc error file 06.txt without clamping...pass\r\nRunning bc error file 10.txt with clamping...RRunning bc empty read...Running bc error file 01.txt through cat without clamping...unning bc script array.bc...RRunning bc error file 03.txt through cat without clamping...pass\r\npaRunning bc error file 08.txt without clamping...Running bc error file 11.txt with clamping...pss\r\nunning bc script array2.bc...ass\r\npass\r\npass\r\nRunning bc error file 02.txt through cat without clamping...pass\r\npass\r\nRunning bc script atan.bc...Running bc error file 09.txt without clamping...Running bc error file 05.txt through cat with clamping...pass\r\npass\r\nRunning bc error file 10.txt without clamping...Running bc error file 06.txt through cat with clamping...Running bc error file 12.txt with clamping...RunRunning bc error file 04.txt through cat without clamping...pass\r\nSkipping bc script bessel.bc\r\npass\r\nning bc error file 07.txt through cat with clamping...Running bc script functions.bc...pass\r\nRunning bc error file 11.txt without clamping...Running bc error file 13.txt with clamping...pass\r\npass\r\nRunning bc error file 08.txt through cat with clamping...pass\r\npass\r\nRunning bc error file 14.txt with clamping...pass\r\nRunning bc read EOF...pass\r\nRunning bc error file 09.txt through cat with clamping...pass\r\npass\r\npass\r\nRunning bc error file 05.txt through cat without clamping...pass\r\npRunning bc script globals.bc...pass\r\nass\r\nRunning bc error file 15.txt with clamping...Skipping bc script: rand.bc\r\nRRunning Rbc error ufninlien g10.txt  through cbca ts cwriitpht  len.bc...clamping...pass\r\nunning bc error file 07.txt through cat without clamping...pass\r\nRRunning bc error file 06.txt through cat without clamping...pass\r\nRunning bc error file 11.txt through cat with clamping...unning bc error file 12.txt without clamping...pass\r\nRunning bc error file 08.txt through cat without clamping...pass\r\nRunning bc error file 16.txt with clamping...pass\r\nRunning bc error file 14.txt without clamping...pass\r\nRunning bc error file 13.txt without clamping...pass\r\nRunning bc script references.bc...Running bc error file 17.txt with clamping...Running bc error file 09.txt through cat without clamping...pass\r\npass\r\npass\r\npass\r\npass\r\npass\r\nRuRunning bc error file 15.txt without clamping...nning bc error file 18.txt with clamping...Running bc script screen.bc...pass\r\nRpass\r\npapass\r\nunning bc error file 12.txt through cat with clamping...ss\r\nRunning bc error file 11.txt through cat without clamping...Rpass\r\nunning bc error file 10.txt through cat without clamping...Running bc error file 19.txt with clamping...Skipping bc script strings2.bc\r\npass\r\nRunning bc error file 13.txt through cat with clamping...pass\r\nRunning bc error file 16.txt without clamping...pass\r\nRunning bc error file 14.txt through cat with clamping...Running bc error file 20.txt with clamping...pass\r\nRunning bc error file 17.txt without clamping...pass\r\npass\r\nRunning bc error file 21.txt with clamping...paspass\r\nRunning bc script ifs.bc...s\r\nRunning bc error file 18.txt without clamping...pass\r\nRunning bc error file 15.txt through cat with clamping...pass\r\nRunning bc script ifs2.bc...Rpass\r\npass\r\nRunning bc error file 12.txt through cat without clamping...pass\r\nunning bc error file 19.txt without clamping...Running bc erpass\r\nror file 22.txt with clamping...Running bc error file 13.txt through cat without clamping...Rpass\r\npRunning bc error file 20.txt without clamping...pass\r\nass\r\nRuRRuunning bc error file 14.txt through cat without clamping...nnning bc script afl1.bc...unning bc error file 23.txt with clning bcamp einrrg..or. file 16.txt through cat with clamping...pass\r\npass\r\nRunning bc error file 17.txt through cat with clamping...Running bc error filepass\r\npass\r\npass\r\nRunniRunning bc error file 15.txt through cat without clamping... 21.txtng bc error file 24.txt with clamping... without clamping...Running bc error file 18.txt through cat with clamping...pass\r\npass\r\npass\r\npass\r\npass\r\nRunning bc error file 25.txt with clamping...pass\r\nRunning bc error file 22.txt without clamping...Running bc error file 19.txt through cat with clamping...pass\r\nRunning bc error file 16.txt through cat without clamping...Running bc error file 23.txt without clamping...pass\r\npass\r\npass\r\nRunning bc error file 20.txt through cat with clamping...pass\r\nRunning bc error file 26.txt with clamping...Running bc error file 17.txt through cat without clamping...Running bc error file 24.txt without clamping...Running bc error file 27.txt with clamping...pass\r\nRunning bc error file 18.txt through cat without clamping...pass\r\npass\r\npass\r\nRunning bc error file 21.txt through cat with clamping...pass\r\nRunning bc error file 19.txt through cat without clamping...pass\r\nRunning bc error file 22.txt through cat with clamping...pass\r\nRunning bc error file 25.txt without clamping...Running bc error file 28.txt with clamping...pass\r\npass\r\npass\r\npass\r\npass\r\nRunning bc error file 23.txt through cat with clamping...Running bc error file 20.txt through cat without clamping...RuRunning bc error file 29.txt with clamping...Running bc error file 24.txt through cat with clamping...pass\r\nnning bc error file 26.txt without clamping...pass\r\nRunning bc error file 27.txt without clamping...pass\r\npass\r\npass\r\npass\r\nRunning bc error file 22.txt through cat without clamping...Running bc error file 30.txt with clamping...Running bc error file 21.txt through cat without clamping...Running bc error file 31.txt with clamping...pass\r\npass\r\nRunning bc error file 25.txt through cat with clamping...Running bc error file 28.txt without clamping...pass\r\nRunning bc error file 23.txt through cat without clamping...pass\r\nRunning bc error file 27.txt through cat with clamping...pass\r\nRunning bc error file 32.txt with clamping...Running bc error file 24.txt through cat without clamping...Skipping problematic bc error file 33.txt...\r\nRunning bc error file 26.txt through cat with clamping...pass\r\npass\r\npass\r\npass\r\npaRunning bc error file 29.txt withss\r\npout clamping...ass\r\npass\r\nRuRupass\r\nA test failed!\r\nRunning bc error file 25.txt through cat without clamping...Running bc error file 30.txt without clamping...passnning bc error file 28.txt through nning bc error file 31.txt without clamping...\r\ncat with clamping...pass\r\nRunning bc error file 27.txt through cat without clamping...pass\r\npass\r\nA test failed!\r\nRunning bc error file 34.txt with clamping...Running bc error file 32.txt without clamping...pass\r\npass\r\nA test failed!\r\nRunning bc error file 26.txt through cat without clampiRunning bc error file 29.txt through cat with clamping...pass\r\nng...pRunning bc error file 35.txt with clamping...pass\r\nRunning bc error file 31.txt through cat with clamping...A Running bc error file 36.txt with clamping...pass\r\nRunning bc error file 30.txt through cat with clamping...\r\nRunning bc quit test...test failed!\r\nass\r\npass\r\nA test failed!\r\npass\r\nRunning bc error file 32.txt through cat with clamping...Running bc error file 28.txt through cat without clamping...Running bc error file 34.txt without clamping...pass\r\npass\r\npass\r\npass\r\nRA pass\r\ntest failed!\r\nunning bc error file 29.txt through cat without clamping...Running bcpass\r\n error file 35.txt without clamping...Running bc error file 30.txt through cat without clamping...pass\r\nRunning bc error file 31.txt through cat without clamping...Running bc error file 36.txt without clamping...A pass\r\ntest failed!\r\npass\r\nRunning bc error file 34.txt through cat with clamping...pA Running bc error file 32.txt through cat without clamping...ass\r\ntest failed!\r\npass\r\npass\r\npass\r\npass\r\nA test failed!\r\nRuRunning bc error file 35.txt through cat with clamping...nning bc error file 36.txt through cat with clamping...Rupass\r\nnning bc environment var tests...pass\r\nA test failed!\r\nRunning bc error file 34.txt through cat without clamping...A pass\r\ntest failed!\r\npass\r\nRunning bc error file 36.txt through cat without clamping...A test failed!pass\r\nRunning bc error file 35.txt through cat witpass\r\n\r\nhout clamping...Running keyword redefinition test...paA test failed!\r\nss\r\npass\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\npass\r\nA test failed!\r\nRunning multiline comment expression file test...A test failed!\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\npass\r\nA test failed!\r\nA test failed!\r\nA Rtest ufnaniilnegd !m\r\nultiline comment expression file error test...A test failed!\r\nA test failed!\r\nA test failed!\r\npass\r\nA test failed!\r\nA test failed!\r\nRunning multiline string expression file test...A test failed!\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\npass\r\nRunning multiline string expression file error test...A test failed!\r\nA test failed!\r\npass\r\nA test failed!\r\nRunning bc line length tests...A test failed!\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\nA test failed!\r\npass\r\nA test failed!\r\nA test failed!\r\nRunning bc arg tests...pass\r\nRunning bc builtin variable arg tests...pass\r\nRunning bc directory test...pass\r\nRunning bc binary file test...pass\r\nRunning bc binary stdin test...pass\r\nRunning bc limits tests...pass\r\npass\r\nRunning bc posix_errors...pass\r\n~/aosp-master-with-phones/external/bc$ \r\n```",
    "closed": true,
    "closedAt": "2023-01-12T17:51:06Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5SPfLa",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "> i haven't been able to update for some time (5.0.1 was our last update!)\r\n\r\nOof...I'm sorry. Have I been missing communication with you?\r\n\r\n> because the tests fail in a weird way without much useful information. i've included the current failures for 6.2.2 below, for example.\r\n\r\nI agree; that is useless.\r\n\r\n> my guess is that this is something to do with Android using mksh as its /bin/sh. the interleaved output makes it appear like there might be some disagreement about job handling between bash and mksh?\r\n\r\nI think that's a great guess, and it's my guess too because the `tests/all.sh` script does use job control. I tried to write it according to the POSIX standard, but I suspect that job control is finicky in general.\r\n\r\n> are the current bc tests known to work on shells other than bash (and in particular mksh)? any ideas where i should look (or some kind of parallelism i can just disable)?\r\n\r\nThey are known to work on `tcsh` (FreeBSD), but other than that, `bash`, and `dash`, I don't know.\r\n\r\n> any ideas where i should look (or some kind of parallelism i can just disable)?\r\n\r\nTo disable parallelism, change the last line of `run-bc-tests-on-android.sh` to:\r\n\r\n```\r\nexec adb shell $dash_t /data/local/tmp/bc-tests/tests/all.sh -n bc 0 1 0 0 0 bc\r\n```\r\n\r\nI made two changes:\r\n\r\n* Most importantly, there is a `-n` option, which is how to disable parallelism in the `tests/all.sh` script.\r\n* I also added another 0 before the last `bc` because there are now five integer positional arguments.\r\n\r\nMy hope (and it is only a hope) is that that missing integer argument is what is causing the weird failures because the script would otherwise treat the last `bc` argument as the last integer argument and cause some sort of failure. `bash` fails because it has a non-integer argument, but I don't know how `mksh` would fail in that case.\r\n\r\nThe other reason there might be failures is because I added a test that is \"problematic.\" It's my test for `malloc()` failure, and unfortunately, it only works on Linux systems with swap disabled and some other changes. I don't think it would work on Android. I did add an option to disable that test in `tests/all.sh`; that is the missing integer option, in fact. But I don't think that's the reason because I added it in the fourth position (the last is whether to time the tests), so it is a 0 in your current script.\r\n\r\nRegardless, with the parallelism disabled, you should see exactly what test is failing, and you should be able to give me that output, even if either of those are not the reason for the failure.\r\n\r\nIn the meantime, I'll work on my end. Android is a first-class user of my `bc`, and I need to start treating it that way, including setting up a building and testing environment. I'll do my best to do so myself, but if possible, can you give me a helpful link?",
        "createdAt": "2023-01-12T04:16:14Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/61#issuecomment-1379791578",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5STRaK",
        "author": {
          "login": "enh-google"
        },
        "authorAssociation": "NONE",
        "body": "> > i haven't been able to update for some time (5.0.1 was our last update!)\r\n> \r\n> Oof...I'm sorry. Have I been missing communication with you?\r\n\r\nno, this is just the first time i've had time to actually look at the problem and file a bug!\r\n\r\n> > are the current bc tests known to work on shells other than bash (and in particular mksh)? any ideas where i should look (or some kind of parallelism i can just disable)?\r\n> \r\n> They are known to work on `tcsh` (FreeBSD), but other than that, `bash`, and `dash`, I don't know.\r\n\r\nyeah, there's been a lot about job control on the POSIX mailing list recently too.\r\n\r\n> > any ideas where i should look (or some kind of parallelism i can just disable)?\r\n> \r\n> To disable parallelism, change the last line of `run-bc-tests-on-android.sh` to:\r\n> \r\n> ```\r\n> exec adb shell $dash_t /data/local/tmp/bc-tests/tests/all.sh -n bc 0 1 0 0 0 bc\r\n> ```\r\n\r\nyes, that works. thanks!\r\n\r\n> In the meantime, I'll work on my end. Android is a first-class user of my `bc`, and I need to start treating it that way, including setting up a building and testing environment. I'll do my best to do so myself, but if possible, can you give me a helpful link?\r\n\r\nthere's https://source.android.com/docs/setup/build/building (and other pages about running), but it's a pretty large undertaking.\r\n\r\ntbh, i've only had two problems with bc updates:\r\n\r\n1. build changes such as the move from a shell script to a .c file for strgen. those are almost certainly easier for me to do anyway.\r\n2. test changes like this one. these have been harder for me to adapt to (although this is the first one i've failed with). there i'd say \"yes, please make sure you add options like `-n` when you make scary changes\" but one thing you haven't done but could that i think would help would be to fail hard --- making extra options optional (ho ho) makes my life harder. an error message would be more helpful, especially because changes to a row of 0s and 1s aren't necessarily immediately obvious!\r\n\r\nanyway, https://android-review.googlesource.com/c/platform/external/bc/+/2385321 works for me locally, so it should make it through CI. (and if it doesn't, that's probably a question for me anyway :-) )\r\n\r\nthanks!",
        "createdAt": "2023-01-12T17:51:06Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/61#issuecomment-1380783754",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5SUcYn",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "> there's https://source.android.com/docs/setup/build/building (and other pages about running), but it's a pretty large undertaking.\r\n\r\nI'll do my best anyway. Thank you!\r\n\r\n> tbh, i've only had two problems with bc updates\r\n>\r\n> 1. build changes such as the move from a shell script to a .c file for strgen. those are almost certainly easier for me to do anyway.\r\n> 2. test changes like this one. these have been harder for me to adapt to (although this is the first one i've failed with). there i'd say \"yes, please make sure you add options like -n when you make scary changes\" but one thing you haven't done but could that i think would help would be to fail hard --- making extra options optional (ho ho) makes my life harder. an error message would be more helpful, especially because changes to a row of 0s and 1s aren't necessarily immediately obvious!\r\n\r\nI think both of these are oversights on my part. I should add sections to my `NEWS.md` entry for each version about building, packaging, and testing changes. I've never thought they were necessary to list, but here is hard evidence that yes, they are.\r\n\r\nI apologize. I will do that going forward. And I also apologize for accidentally using you as my test subject while I learn how to run a project.\r\n\r\nNow, about making things fail hard: I agree that I messed up by making arguments optional.\r\n\r\nHowever, because I have downstream users that could depend on the options *staying* optional, I'm not sure I can make them required at this point.\r\n\r\nNevertheless, I think I can do the next best thing: do error checking on each argument. This would (hopefully) allow me to add the \"fail hard\" you want (and it's a good idea!) while not causing problems for other downstream users. (Unless they have bugs in their scripts, in which case, they should be fixed anyway.)\r\n\r\nI have implemented the ideas in d5e6dbdf328407bddf53efb655abe4b9c2fcb90f, so they'll be in the next release. I hope that helps.",
        "createdAt": "2023-01-12T23:06:57Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/61#issuecomment-1381090855",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5SUv2M",
        "author": {
          "login": "enh-google"
        },
        "authorAssociation": "NONE",
        "body": "> I apologize. I will do that going forward. And I also apologize for accidentally using you as my test subject while I learn how to run a project.\r\n\r\nno worries --- we're a bit of an outlier anyway. it's only when you get included in a \"ridiculously large\" meta-project (most commonly an operating system [or moral equivalent] such as android or chromium or whatever) that you tend to find people _not_ using your build system because the pain of having to duplicate your build system is still slightly less than the pain of trying to incorporate your build system into theirs!\r\n\r\n> Now, about making things fail hard: I agree that I messed up by making arguments optional.\r\n> \r\n> However, because I have downstream users that could depend on the options _staying_ optional, I'm not sure I can make them required at this point.\r\n> \r\n> Nevertheless, I think I can do the next best thing: do error checking on each argument. This would (hopefully) allow me to add the \"fail hard\" you want (and it's a good idea!) while not causing problems for other downstream users. (Unless they have bugs in their scripts, in which case, they should be fixed anyway.)\r\n\r\nyeah, maybe if you ever need more arguments, make them named? (like `--foo=bar` or `foo=bar`?)\r\n\r\n> I have implemented the ideas in [d5e6dbd](https://github.com/gavinhoward/bc/commit/d5e6dbdf328407bddf53efb655abe4b9c2fcb90f), so they'll be in the next release. I hope that helps.\r\n\r\nthanks. since you're obviously interested in the feedback, i'll try to let you know sooner next time i have an update where manual intervention is required, if i have any trouble :-)",
        "createdAt": "2023-01-13T00:55:27Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/61#issuecomment-1381170572",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2023-01-12T01:26:05Z",
    "id": "I_kwDOCL0xJc5bMSgX",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 61,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "test failures on Android",
    "updatedAt": "2023-01-13T00:55:28Z",
    "url": "https://github.com/gavinhoward/bc/issues/61"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjUwNzg5NDY5",
      "is_bot": false,
      "login": "mcoret",
      "name": ""
    },
    "body": "Hi,\r\nI'm trying to compile the project using Visual Studio 19, and I get the following error: `error C2065: 'SIGWINCH': undeclared identifier`. I cannot find such definition in MSVC. MSYS64 version compiles without problems.\r\nThank you!",
    "closed": true,
    "closedAt": "2022-12-06T15:40:35Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5PvhRI",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "What version are you trying to compile?\r\n\r\nIf it's the latest `master `, I have some changes there to fix a [FreeBSD bug][1] that I suspected would break the Windows build. I guess I was right.\r\n\r\nUsually, I wait until release time to fix Windows build bugs, but I'll boot Windows and push a fix later today if that will fix your problem. I'll also have a release coming soon with new stuff.\r\n\r\nI hope this helps.\r\n\r\n[1]: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=268076",
        "createdAt": "2022-12-05T17:55:25Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/60#issuecomment-1337857096",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5PvnLD",
        "author": {
          "login": "mcoret"
        },
        "authorAssociation": "NONE",
        "body": "Ah, OK, thank you again!\r\nYes, it's the `master` branch.",
        "createdAt": "2022-12-05T18:11:45Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/60#issuecomment-1337881283",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5PxCgn",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I've pushed e1205eaccfa03a8dbbfd625af664f6b074b69a65 which should fix the problem for now. Can you confirm for me?",
        "createdAt": "2022-12-05T22:18:12Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/60#issuecomment-1338255399",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5P2DiK",
        "author": {
          "login": "mcoret"
        },
        "authorAssociation": "NONE",
        "body": "Hi, I can confirm, everything is OK!",
        "createdAt": "2022-12-06T15:40:34Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/60#issuecomment-1339570314",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2022-12-05T17:00:01Z",
    "id": "I_kwDOCL0xJc5YCR8i",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 60,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Windows MSVC compilation problem",
    "updatedAt": "2022-12-06T15:40:35Z",
    "url": "https://github.com/gavinhoward/bc/issues/60"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjQ2MTYwNzI3",
      "is_bot": false,
      "login": "firasuke",
      "name": "Firas Khalil Khana"
    },
    "body": "As in the title, what's the difference between the two? and why is `--localedir` only mentioned in `build.md` and not when running `./configure --help`?",
    "closed": true,
    "closedAt": "2022-11-26T16:37:39Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5PKKvC",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "So I originally added `--localedir` because it was one of the standard GNU configure options. This was before I understood that GNU does *not* use POSIX locales.\r\n\r\n`--localedir` does not make sense when a program is using POSIX locales, so I've [removed references to `LOCALEDIR` and friends from everything][1].\r\n\r\nDoes that answer your question?\r\n\r\n[1]: https://github.com/gavinhoward/bc/commit/f4816582b1264b64566fc162ef6512601077cc63",
        "createdAt": "2022-11-26T15:24:49Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/58#issuecomment-1328065474",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5PKLiA",
        "author": {
          "login": "firasuke"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "So `--localedir` shouldn't be used?",
        "createdAt": "2022-11-26T15:45:11Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/58#issuecomment-1328068736",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5PKNBl",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "You are correct; it should not be used.\r\n\r\nIt wasn't used to change anything in the Makefile, so it merely just didn't do anything. With the change I made, the configure script should more give an error if it is given.",
        "createdAt": "2022-11-26T16:24:25Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/58#issuecomment-1328074853",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5PKNey",
        "author": {
          "login": "firasuke"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "Ok cool, thanks for clarifying. Closing..",
        "createdAt": "2022-11-26T16:37:19Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/58#issuecomment-1328076722",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2022-11-26T10:36:13Z",
    "id": "I_kwDOCL0xJc5XU90M",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 58,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Difference between --localedir and NLSPATH",
    "updatedAt": "2022-11-26T16:37:39Z",
    "url": "https://github.com/gavinhoward/bc/issues/58"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjQ2MTYwNzI3",
      "is_bot": false,
      "login": "firasuke",
      "name": "Firas Khalil Khana"
    },
    "body": "Hey there,\r\n\r\nI've encountered an error recently where attempting to cross-compile `bc` while using `CC` as the cross compiler and `HOSTCC` as the compiler and when passing `--prefix=/usr` as a configuration flag.\r\n\r\nIt appears that `bc` is searching for header files in `$PREFIX/include`, although the help message mentions that these options control the installation directories of bc files and not the directories header/library files are searched for.\r\n\r\nThe error disappears when I remove the `--prefix=/usr` flag and the installation defaults to `/usr/local` as there's no way to change it because `--prefix` causes an error.\r\n\r\nThe error is:\r\n\r\n```C\r\n     /usr/include/bits/types/time_t.h:8:9: error: unknown type name '__time64_t'\r\n    8 | typedef __time64_t time_t;\r\n      |         ^~~~~~~~~~\r\n```\r\n\r\nI don't recall changing the configuration flags I use for `bc` since version 4.0, did the behavior of these flags change?\r\n\r\nThanks in advance!",
    "closed": true,
    "closedAt": "2022-09-14T07:40:47Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5KF-Ax",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "This looks like a bug in `configure.sh`. However, I need to know now to track it down.\r\n\r\nCan you tell me what the host system is, what the target system is, what the host compiler is, and what the target compiler is?",
        "createdAt": "2022-09-12T00:19:32Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/56#issuecomment-1243078705",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5KGmRk",
        "author": {
          "login": "firasuke"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "The  host system architecture tuple is `x86_64-unknown-linux-gnu` and the target architecture tuple is `x86_64-linux-musl`.\n\nThe host compiler `HOSTCC=gcc` and the target compiler is `CC=x86_64-linux-musl-gcc`.",
        "createdAt": "2022-09-12T05:35:13Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/56#issuecomment-1243243620",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5KJkBF",
        "author": {
          "login": "firasuke"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "I thought this will might help narrow down the cause.\r\n\r\nThe last known working version that I tried using the same configuration flags and recipe file is version `5.2.5`, so my guess would be that the change happened after that release, possibly with the latest 6.0 release.",
        "createdAt": "2022-09-12T16:52:51Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/56#issuecomment-1244020805",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5KKJKJ",
        "author": {
          "login": "firasuke"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "I think I found the [faulty commit](https://github.com/gavinhoward/bc/commit/c36b91b024e743edb45bf607cb3c2a9f28f0cc48).",
        "createdAt": "2022-09-12T19:05:19Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/56#issuecomment-1244172937",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5KM5Kx",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I think you did too.\r\n\r\nThat commit appears to have been made as exploration; I should have added more to the commit message. Nevertheless, it appears to not be necessary anymore because I tested the FreeBSD port without those changes, and it worked fine.\r\n\r\nSo I committed 2b65eb21cfc575fdb04a090c687bd102a80cc43c to erase the rest of that commit. Can you pull and test it?",
        "createdAt": "2022-09-13T04:49:35Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/56#issuecomment-1244893873",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5KP1Kn",
        "author": {
          "login": "firasuke"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "I can confirm that this indeed 2b65eb21cfc575fdb04a090c687bd102a80cc43c fixed the issue.\r\n\r\nCan you release this fix in a new bugfix version?",
        "createdAt": "2022-09-13T16:34:53Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/56#issuecomment-1245663911",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5KQ_MW",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Wonderful!\r\n\r\nI'll release a bug fix version as soon as I have confirmation that this fix does not break FreeBSD. I hope that will be soon.",
        "createdAt": "2022-09-13T21:22:20Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/56#issuecomment-1245967126",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5KShlk",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Release `6.0.3` is out. I hope it fixes your issue.\r\n\r\nIf it doesn't, please feel free to reopen.",
        "createdAt": "2022-09-14T07:40:47Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/56#issuecomment-1246370148",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5KV1-D",
        "author": {
          "login": "firasuke"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "Yup, the new release solved the issue.\r\n\r\nThanks for your time and effort!",
        "createdAt": "2022-09-14T19:59:10Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 2
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/56#issuecomment-1247240067",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2022-09-11T13:48:03Z",
    "id": "I_kwDOCL0xJc5RmIzx",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 56,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Specifying `--prefix` when cross-compiling",
    "updatedAt": "2022-09-14T19:59:10Z",
    "url": "https://github.com/gavinhoward/bc/issues/56"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjEzNTQxNjk5",
      "is_bot": false,
      "login": "depler",
      "name": ""
    },
    "body": "Hi! Here is my command line: `bc.exe --mathlib --leading-zeroes --no-line-length --scale=100`. \r\n\r\nLast argument is ignored by some reason.  As I see it `--mathlib` is overriding `scale` value",
    "closed": true,
    "closedAt": "2022-08-30T15:32:46Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5IMQzl",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Nice to have you back! Sorry that I rejected your original feature request for `--scale`; I was wrong to do so.\r\n\r\nI have reproduced the issue. I think you are right with what is happening.\r\n\r\nI'll get to work on fixing it.",
        "createdAt": "2022-08-10T19:29:45Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/55#issuecomment-1211174117",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5IMfdA",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Stupid GitHub automatically closing issues.\r\n\r\nCan you please pull the latest `master` and check if it does what you want? In the meantime, I'll get started on the release process.",
        "createdAt": "2022-08-10T20:29:31Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/55#issuecomment-1211234112",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5IMmDI",
        "author": {
          "login": "depler"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "Yep, it works now. Thanks!",
        "createdAt": "2022-08-10T20:55:12Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/55#issuecomment-1211261128",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5IMmVH",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Yay! Version `6.0.2` should come out in the next day or two. Thank you for your report!",
        "createdAt": "2022-08-10T20:56:21Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/55#issuecomment-1211262279",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5Iclau",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "It's taking a little longer to get the release out. There are problems with FreeBSD. I need to fix those problems before I release. I'm sorry.\r\n\r\nI'll let you know when `6.0.2` is out.",
        "createdAt": "2022-08-15T17:31:11Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/55#issuecomment-1215452846",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5JbEBZ",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "`6.0.2` is out.\r\n\r\nThat should fix the issue for you. Feel free to reopen if it does not.",
        "createdAt": "2022-08-30T15:32:46Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "ROCKET",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/55#issuecomment-1231831129",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2022-08-10T19:09:02Z",
    "id": "I_kwDOCL0xJc5Pk4LF",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 55,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Scale argument is ignored",
    "updatedAt": "2022-08-30T15:32:46Z",
    "url": "https://github.com/gavinhoward/bc/issues/55"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjk3Njg2MjI=",
      "is_bot": false,
      "login": "drawkula",
      "name": "yeti"
    },
    "body": "Testing on Debian11...\r\n\r\nAfter configuring with `--prefix=/tmp/bctmpdir` and a successful build, `make install` fails:\r\n```\r\n/tmp/bc $ make install\r\n./scripts/locale_install.sh /usr/share/locale/%L/%N bc \r\nmkdir: cannot create directory ‘//usr/share/locale/de_DE.utf8’: Permission denied\r\nmkdir: cannot create directory ‘//usr/share/locale/de_DE.UTF-8’: Permission denied\r\nln: failed to create symbolic link '//usr/share/locale/de_DE.utf8/bc': No such file or directory\r\nmkdir: cannot create directory ‘//usr/share/locale/en_GB.utf8’: Permission denied\r\nln: failed to create symbolic link '//usr/share/locale/en_GB.utf8/bc': No such file or directory\r\nmkdir: cannot create directory ‘//usr/share/locale/en_US.utf8’: Permission denied\r\nln: failed to create symbolic link '//usr/share/locale/en_US.utf8/bc': No such file or directory\r\n./scripts/safe-install.sh -Dm644 manuals/bc.1 /tmp/bctmpdir/share/man/man1/bc.1\r\n./scripts/safe-install.sh -Dm644 manuals/dc.1 /tmp/bctmpdir/share/man/man1/dc.1\r\n./scripts/exec-install.sh /tmp/bctmpdir/bin \"\" \"/tmp/bc/bin\"\r\n```\r\nSome paths aren't adapted to fit the `--prefix=...` setting, some others fit the desired prefix setting.",
    "closed": true,
    "closedAt": "2022-07-23T16:23:02Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5HDhWA",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Thank you for this report. I will look into it. Thankfully, you caught me before I made a release, which is coming soon. This will be fixed in that release, even if I have to delay it.",
        "createdAt": "2022-07-22T02:07:54Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/53#issuecomment-1192105344",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5HDm8x",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I noticed that you are installing `bc` in a temp directory. Is this a holding directory for a package, which will then install `bc` in its true place? Or is it something eke?\r\n\r\nI ask because locales are *special* (meaning, they are bad). They *must* be installed in one, and only one place. That place is `$NLSPATH`, which is actually a format string (the funny looking path after `./scripts/locale_install.sh` in your pasted output), but it usually points to `/usr/share/locale` with separate directories for every locale and then separate files in those directories for each program.\r\n\r\nIf locales are not installed properly in `$NLSPATH`, they will not work. This means that locales *have to* ignore `--prefix`. It's stupid, but that's POSIX for you. (This behavior is mandated by the POSIX standard.)\r\n\r\nSo if you are trying to install `bc` in `/tmp/bctmpdir`, unfortunately, you still have to install the locale files in `$NLSPATH`, anyway.\r\n\r\nIf you're installing in `/tmp/bctmpdir` to later be installed in its proper place by a package manager, then you can use the `$DESTDIR` environment variable when running `configure.sh`. If you do this, then locales will be installed at `$DESTDIR/$NLSPATH`, while other files will be installed at `$DESTDIR/$PREFIX/<whatever>`, where `$PREFIX` was passed in with `--prefix=$PREFIX`. Once that is done, and the package is made, then when users install the package, the locales will be put into the correct `$NLSPATH`.\r\n\r\nIf, however, you absolutely *must* override the behavior of installing the locales in `$NLSPATH`, you can set your own `$NLSPATH` when running `configure.sh`. The `%L` in the format specifier will be replaced by the locale name, and the `%N` will be replaced by the name of the program. You probably want both of those format specifiers in there.\r\n\r\nBut I do ***NOT*** recommend this because those installed locales will not work unless your `$NLSPATH` is set to that same format during in normal usage, which it appears it is not based on the format string in your output above.\r\n\r\nI hope that explains why things are the way they are. If that is the reason you are having problems, I am willing to help you figure out what would be best for you to do.\r\n\r\nHowever, if you still believe there is a bug in the install behavior, I'll do my best to find it.\r\n\r\nPlease let me know; I would like to help in any way I can.",
        "createdAt": "2022-07-22T02:57:50Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/53#issuecomment-1192128305",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5HD5j0",
        "author": {
          "login": "drawkula"
        },
        "authorAssociation": "NONE",
        "body": "I just repeated the build in `/tmp` for catching the log.\r\n\r\nOriginally I wanted to have `bc`/`dc` in an own \"bonsai subtree\" in `/opt/gavinhoward-bc` for not interfering with the default `dc`/`bc` of Debian and I typically manage `/opt` via an own account not being `root` (and not my standard user account).  Had I tried this as `root` I easily could have overlooked the files falling out of that subtree.  I think that may surprise other users in some other contexts too or will just drop the NLS files somewhere they do not even notice.\r\n\r\nMaybe dropping them into the desired prefix too and issuing a warning is an idea?\r\n\r\nWell, so far nobody complained (or noticed it?).  Maybe I'm just the one with strange ideas...\r\n\r\nIn my case, if the NLS files are dropped into that subtree with the consequence that only english works, it would be good enough.  And alternatively I can just deactivate NLS.\r\n\r\nThis issue just should be about the surprise that some paths don't respect `--prefix=...` and maybe about minimising surprises.\r\n\r\nAnd it definitely is not urgent.",
        "createdAt": "2022-07-22T05:42:58Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/53#issuecomment-1192204532",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5HFHU6",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I agree that the surprise is bad.\r\n\r\nThe problem with putting them into the desired prefix is that they just won't work, and then I'll get bug reports about it because I know several distros that depend on the current behavior.\r\n\r\nI think there are two things I can do. First, I can ensure that locales are *not* installed if NLS is disabled. I did that. (It already did it right, thankfully.) Second, I can add warnings. I added 7 in https://github.com/gavinhoward/bc/commit/b78e8e4cfb03b1135f03426b2a4aaf848b6c4d5d.\r\n\r\nActually, there's a third thing I can do: I can have `configure.sh` output a warning to the user when the prefix does *not* match with `$NLSPATH`. That has been done in https://github.com/gavinhoward/bc/commit/6dccfebe21c62d1c043387590d23a91b8499f68c.\r\n\r\nWhat else would you like me to do or think that I should do?",
        "createdAt": "2022-07-22T12:29:32Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/53#issuecomment-1192523066",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5HFar1",
        "author": {
          "login": "drawkula"
        },
        "authorAssociation": "NONE",
        "body": "Thanks!\r\nThe warnings at configure-time really should help everyone.\r\n\r\nMay I add a tiny \"last\" (for in this issue) wish?\r\nCan the warning be reformatted to fit an 80 columns terminal?\r\nReformatted to be slightly below 80 CpL it will not even take more lines.\r\n",
        "createdAt": "2022-07-22T13:55:53Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/53#issuecomment-1192602357",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5HF6Eg",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I meant to have 80 columns or less from the beginning. Whoops.\r\n\r\nIs https://github.com/gavinhoward/bc/commit/7cdddb8cc53fc1c08fe52fcf7fedbf7c84800c7c at 80 columns or less?",
        "createdAt": "2022-07-22T16:12:18Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/53#issuecomment-1192730912",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5HGEY4",
        "author": {
          "login": "drawkula"
        },
        "authorAssociation": "NONE",
        "body": "Without changing the indentation 77 chars are the maximal sub-80 width that fits.\r\n```\r\n*****************************************************************************\r\n\r\nWARNING: Locales will *NOT* be installed in $PREFIX (/opt/gavinhoward-bc).\r\n\r\n         This is because they *MUST* be installed at a fixed location to even\r\n         work, and that fixed location is $NLSPATH ().\r\n\r\n         This location is *outside* of $PREFIX. If you do not wish to install\r\n         locales outside of $PREFIX, you must disable NLS with the -N or the\r\n         --disable-nls options.\r\n\r\n         The author apologizes for the inconvenience, but the need to install\r\n         the locales at a fixed location is mandated by POSIX. It is not\r\n         possible for the author to change.\r\n\r\n*****************************************************************************\r\n```\r\n",
        "createdAt": "2022-07-22T17:05:23Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/53#issuecomment-1192773176",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5HHHpw",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Whoops. How does https://github.com/gavinhoward/bc/commit/6035d39a68e6078f578823fe407892930fe0d955 look?",
        "createdAt": "2022-07-23T03:21:18Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/53#issuecomment-1193048688",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5HHS2n",
        "author": {
          "login": "drawkula"
        },
        "authorAssociation": "NONE",
        "body": "Looks good:\r\n\r\n![20220723-092628](https://user-images.githubusercontent.com/9768622/180599430-95db0a76-f00d-4dc2-bb0a-e3d679acb9f2.png)\r\n\r\nWould it make sense not to show it when `configure` is run with `--disable-nls`?",
        "createdAt": "2022-07-23T09:27:41Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/53#issuecomment-1193094567",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5HHW-X",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Whoops.\r\n\r\nYou are absolutely right, of course. Does https://github.com/gavinhoward/bc/commit/8d8935e44bba15e96e8db83536ba54cd1deab398 fix the issue for you?",
        "createdAt": "2022-07-23T11:39:44Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/53#issuecomment-1193111447",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5HHXEq",
        "author": {
          "login": "drawkula"
        },
        "authorAssociation": "NONE",
        "body": "Perfect!\r\nThanks!",
        "createdAt": "2022-07-23T11:43:19Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/53#issuecomment-1193111850",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5HHgig",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "You're welcome.\r\n\r\nSince it appears this issue has been resolved, I'm going to close it, but if you disagree, feel free to reopen it.",
        "createdAt": "2022-07-23T16:23:02Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/53#issuecomment-1193150624",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2022-07-21T21:12:21Z",
    "id": "I_kwDOCL0xJc5OTyTx",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 53,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "--prefix=... is partially ignored?",
    "updatedAt": "2022-07-23T16:23:02Z",
    "url": "https://github.com/gavinhoward/bc/issues/53"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjQ2MTYwNzI3",
      "is_bot": false,
      "login": "firasuke",
      "name": "Firas Khalil Khana"
    },
    "body": "Is it possible to provide release tarballs in `gzip` format as well for limited systems?\r\n\r\nThanks!",
    "closed": true,
    "closedAt": "2022-04-30T22:23:08Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc5CZjfO",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Yes, absolutely.\r\n\r\nJust to be sure, you mean `.tar.gz` files, correct?",
        "createdAt": "2022-04-30T14:08:36Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/52#issuecomment-1113995214",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5CZoVz",
        "author": {
          "login": "firasuke"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "Yup, if possible.",
        "createdAt": "2022-04-30T16:25:20Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/52#issuecomment-1114015091",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc5CZov4",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Not a problem. I have a new release coming out soon, and I will be sure to have `.tar.gz` files for it, as well as every future release.",
        "createdAt": "2022-04-30T16:38:05Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/52#issuecomment-1114016760",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5CZ0M3",
        "author": {
          "login": "firasuke"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "Thanks!\r\n\r\nClosing this now.",
        "createdAt": "2022-04-30T22:23:08Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/52#issuecomment-1114063671",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2022-04-30T10:20:12Z",
    "id": "I_kwDOCL0xJc5I0yHJ",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 52,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Release tarballs in `gzip` format",
    "updatedAt": "2022-04-30T22:23:08Z",
    "url": "https://github.com/gavinhoward/bc/issues/52"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjg4MjY0OTc5",
      "is_bot": false,
      "login": "DelilahHoare",
      "name": "Delilah Hoare"
    },
    "body": "Comments delimited by `/* */` and spanning multiple lines in files result in `Parse error: comment end cannot be found`.  Such comments are accepted into stdin.",
    "closed": true,
    "closedAt": "2022-03-05T04:53:19Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc4_JAlq",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "That does sound like a bug.\r\n\r\nCould you send me the output of `bc --version`? Also, could you send me one or more files that cause it to happen?",
        "createdAt": "2022-03-04T16:41:15Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/50#issuecomment-1059326314",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc4_KFB6",
        "author": {
          "login": "DelilahHoare"
        },
        "authorAssociation": "NONE",
        "body": "I should clarify that this only happens when using the `-f` flag; passing the file as an argument without that flag works.\r\n\r\n```\r\nbc 5.2.2\r\nCopyright (c) 2018-2021 Gavin D. Howard and contributors\r\nReport bugs at: https://git.yzena.com/gavin/bc\r\n\r\nThis is free software with ABSOLUTELY NO WARRANTY.\r\n```\r\n\r\n[testoneline.bc](https://github.com/gavinhoward/bc/files/8189282/testoneline.bc.txt) works,\r\n[testmultiline.bc](https://github.com/gavinhoward/bc/files/8189281/testmultiline.bc.txt) doesn't.  \r\n[timeconst.bc](https://github.com/gavinhoward/bc/files/8189283/timeconst.bc.txt) comes from the linux source tree and also doesn't work.\r\n\r\n",
        "createdAt": "2022-03-04T23:39:16Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/50#issuecomment-1059606650",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc4_KNpz",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Thank you. I have confirmed the bug, and I'm working on debugging and a fix.",
        "createdAt": "2022-03-05T01:30:06Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/50#issuecomment-1059641971",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc4_KWij",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Okay, I have found the problem and have committed a fix in d778d0b9177c75f207dca16b57974edbb5f9e15c and dbc4dc4c4e94712fa1d4800c81e84d6da18f5188.\r\n\r\nCould you pull and test the updated commits for me, to make sure they work for you? In the meantime, I'll prepare a release with the fix.",
        "createdAt": "2022-03-05T04:03:17Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/50#issuecomment-1059678371",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc4_KYdX",
        "author": {
          "login": "DelilahHoare"
        },
        "authorAssociation": "NONE",
        "body": "It's working, thanks!",
        "createdAt": "2022-03-05T04:53:19Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/50#issuecomment-1059686231",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc4_KYmm",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Great! I'll have version `5.2.3` out in a few days.",
        "createdAt": "2022-03-05T04:56:48Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/50#issuecomment-1059686822",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc4_QD5x",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "`5.2.3` is out!",
        "createdAt": "2022-03-07T21:53:42Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/50#issuecomment-1061174897",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2022-03-04T00:24:45Z",
    "id": "I_kwDOCL0xJc5FFokp",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 50,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Multi-line comments in files result in parse error",
    "updatedAt": "2022-03-07T21:53:42Z",
    "url": "https://github.com/gavinhoward/bc/issues/50"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjI3OTUyNTcx",
      "is_bot": false,
      "login": "oguz-ismail",
      "name": ""
    },
    "body": "Observe:\r\n```\r\n$ bc -s <<x\r\ndefine a(){\r\n}define b(){\r\n}\r\nx\r\n\r\nParse error: bad token\r\n    <stdin>:2\r\n\r\n$ bc -s <<x\r\ndefine a(){\r\n};define b(){\r\n}\r\nx\r\n$\r\n```\r\nAs per POSIX, the first one should work fine, and the second should fail as a newline is required after a `semicolon_list` production. No other bc implementation exhibits this behavior except busybox bc, which is a fork of this one if I recall correctly.",
    "closed": true,
    "closedAt": "2021-11-23T05:42:14Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc46Kepe",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "This has (hopefully) been fixed in commits 5b2fe303c8c7d85d299b6576f62c8191e492fdb0, 81f838f657a2b942a76c1240d1107a4d358fd2a2, and 9ffdd5ec6915bc01fa0ceb7f5b5e9e4327615044.\r\n\r\nCould you please pull down those commits and test? If they work, I'll release an update soon.",
        "createdAt": "2021-11-22T18:57:57Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/48#issuecomment-975825502",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc46KhAF",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Oh, I meant to say that I looked at the standard, and I agree with you on the interpretation of it.",
        "createdAt": "2021-11-22T19:09:25Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/48#issuecomment-975835141",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc46Kkv8",
        "author": {
          "login": "oguz-ismail"
        },
        "authorAssociation": "NONE",
        "body": "@gavinhoward  Yeah, it works fine now. Thanks for the fix",
        "createdAt": "2021-11-22T19:29:26Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/48#issuecomment-975850492",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc46KynT",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Thank you!\r\n\r\nI'll run my release process and put out `5.2.1` as soon as it passes.",
        "createdAt": "2021-11-22T20:50:45Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/48#issuecomment-975907283",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc46L1uZ",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "`5.2.1` is out. I believe that solves this issue, so I am going to close. Feel free to reopen if you need to.\r\n\r\nThank you for your report!",
        "createdAt": "2021-11-23T05:42:14Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/48#issuecomment-976182169",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2021-11-22T11:06:32Z",
    "id": "I_kwDOCL0xJc4_Ln9A",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 48,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Divergence from grammar defined by POSIX",
    "updatedAt": "2021-11-23T05:42:15Z",
    "url": "https://github.com/gavinhoward/bc/issues/48"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjEzNTQxNjk5",
      "is_bot": false,
      "login": "depler",
      "name": ""
    },
    "body": "Is there any command line switch to set scale at start, like `bc.exe --scale 100`? If not, could you please implement?",
    "closed": true,
    "closedAt": "2022-06-10T18:05:26Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc4387LJ",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "There is no direct way to do it, but you can do it like this:\r\n\r\n```\r\nbc.exe -e \"scale = 100\" -f-\r\n```\r\n\r\n`-e` is the command-line option to take expressions, and since `bc` exits by default when giving it an expression, you add `-f-` to tell it to also accept input from `stdin`.\r\n\r\nI think next release, I will add the ability to *not* exit by default on expressions for Windows. (FreeBSD wants my `bc` to exit by default.) Once I do that, you will be able to do:\r\n\r\n```\r\nbc.exe -e \"scale = 100\"\r\n```",
        "createdAt": "2021-10-08T15:09:39Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/47#issuecomment-938717897",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc439Fcs",
        "author": {
          "login": "depler"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "Well, this is not really an option for me - I want bc to exit after `-e` switch. The point is to have ability to manipulate of scale value from outside - the only option for now to do it is within a script or command. Anyway, not really a problem. Fell free to close this, if you are not going implement scale switch.",
        "createdAt": "2021-10-08T16:09:16Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/47#issuecomment-938759980",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc439QqT",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Yeah, I'm sorry. It's a little too specialized to do in my opinion.\r\n\r\nThank you for understanding.",
        "createdAt": "2021-10-08T16:34:17Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/47#issuecomment-938805907",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5Dmtyj",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "@depler would you still want this? I'm going to do a release soon, and I'm reconsidering it.",
        "createdAt": "2022-05-23T06:10:23Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/47#issuecomment-1134222499",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5EjtT2",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "@depler I'm going to implement this.",
        "createdAt": "2022-06-08T17:44:03Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/47#issuecomment-1150211318",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5EksDZ",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "It is now implemented in 488d48c87c5b9e02e5c3911918c2d6d7687246e8. The command-line options are `-S`/`--scale`, `-I`/`--ibase`, `-O`/`--obase`, and `-E`/`--seed`.\r\n\r\nIf you could test before I release `5.3.0`, I would appreciate it.\r\n\r\nAlso, history is working on Windows now!",
        "createdAt": "2022-06-08T22:15:08Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/47#issuecomment-1150468313",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc5Es3Dl",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "It's been released in `5.3.0`. Hope this helps!",
        "createdAt": "2022-06-10T18:05:26Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/47#issuecomment-1152610533",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2021-10-08T11:02:30Z",
    "id": "I_kwDOCL0xJc482sjv",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 47,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Command switch for scale?",
    "updatedAt": "2022-06-10T18:05:27Z",
    "url": "https://github.com/gavinhoward/bc/issues/47"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjEzNTQxNjk5",
      "is_bot": false,
      "login": "depler",
      "name": ""
    },
    "body": "Hi! When are you going to release new version with recent changes?",
    "closed": true,
    "closedAt": "2021-10-06T20:42:31Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc43pTbJ",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Yes. It will be `5.1.0`.\r\n\r\nI have not done so yet because of two things. First, I was not really sure if you would find more bugs, and second, my release process takes a while. (It includes, among other things, building `bc` in every supported configuration and running the test suite for every build, on multiple platforms.)\r\n\r\nI expect that the release will go out sometime today (US time).",
        "createdAt": "2021-10-04T15:03:22Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/46#issuecomment-933574345",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc43p7GT",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Release is out! Thank you for your help.",
        "createdAt": "2021-10-04T18:19:40Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/46#issuecomment-933736851",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc43qhxQ",
        "author": {
          "login": "depler"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "Thanks! Why did you put project files, debug executables and test files into release archive?",
        "createdAt": "2021-10-04T22:11:43Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/46#issuecomment-933895248",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc43qjSr",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I should not have put the test files (sorry; I'll take them out next release), but I put the others there in case users *want* a debug executable. Basically, I put whatever I thought users might want even if they don't want the full repo. (I know at least Linux distro that builds a debug version of my `bc`.)",
        "createdAt": "2021-10-04T22:23:01Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/46#issuecomment-933901483",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc432vHa",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "The next release is out (there was a bug), and I have implemented your suggestions, except for debug executables. Thank you.\r\n\r\nI will go ahead and close this bug now, but you can reopen if you feel the need.",
        "createdAt": "2021-10-06T20:42:31Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/46#issuecomment-937095642",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2021-10-04T13:53:49Z",
    "id": "I_kwDOCL0xJc48guzb",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 46,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "New release",
    "updatedAt": "2021-10-06T20:42:31Z",
    "url": "https://github.com/gavinhoward/bc/issues/46"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjMxNzI2ODc=",
      "is_bot": false,
      "login": "gavinhoward",
      "name": "Gavin D. Howard"
    },
    "body": "@depler do you know how to get packages into Winget and Chocolatey? I had [someone ask me to do that][1].\r\n\r\n[1]: https://news.ycombinator.com/item?id=28653815",
    "closed": true,
    "closedAt": "2021-10-01T17:38:41Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc43ktg6",
        "author": {
          "login": "depler"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "Sorry, never did this. I prefer portable windows utilities without package manager.",
        "createdAt": "2021-10-01T16:20:38Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/45#issuecomment-932370490",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc43k7w9",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": ":+1: ",
        "createdAt": "2021-10-01T17:38:41Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/45#issuecomment-932428861",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2021-10-01T04:59:55Z",
    "id": "I_kwDOCL0xJc48X3lM",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 45,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Get `bc` into Winget and Chocolatey",
    "updatedAt": "2021-10-01T17:38:41Z",
    "url": "https://github.com/gavinhoward/bc/issues/45"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjEzNTQxNjk5",
      "is_bot": false,
      "login": "depler",
      "name": ""
    },
    "body": "Can you please implement some new command line arguments?\r\n\r\n1. Ability to print equation result without line breaks, i.e. just a solid text.\r\n2. Ability to force prepending zero in equation result, i.e. `0.123` instead of current `.123`",
    "closed": true,
    "closedAt": "2021-09-29T23:02:01Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc43UXox",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Those are good ideas.\r\n\r\nFor the first, there is already an environment variable, `BC_LINE_LENGTH`, that can be used to do that.  You just set it to a large number. Would that work, or would that still not be convenient (and I use that word for a reason; I do want it to be easy for you) on Windows? Also, if you want a separate option to remove line limits entirely, why?\r\n\r\nFor the second, I think that one might be a *really* good idea. EDIT: However, could this be implemented by something like a function in the math library such that it's not a global option affecting all numbers? Would that be better? Should we have both?\r\n\r\nIn both of these cases, I don't want to just willy-nilly implement something; I want them to be designed correctly. So I'll get started on that, but please feel free to give me your opinions about the design of them.",
        "createdAt": "2021-09-27T17:16:40Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/43#issuecomment-928086577",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc43UkoZ",
        "author": {
          "login": "depler"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "> Also, if you want a separate option to remove line limits entirely, why?\r\n\r\nThis is exactly what I want - remove line limits entirely. Environment variables are not really useful on Windows unless you heavily use scripts. Usually you just run executable with desired variables to archive functionality (or using some config file as alternative).\r\n\r\n> However, could this be implemented by something like a function in the math library such that it's not a global option affecting all numbers? Would that be better? Should we have both?\r\n\r\nFor exactly my needs global option is preferable - I just want to see all numbers in range `-1 < 0 < 1` with zero.\r\n\r\nSo if you you think that environment variables are needed - feel free to implement both. Personally I don't like to use environment switches, command arguments are more convenient for me.\r\n",
        "createdAt": "2021-09-27T18:06:20Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/43#issuecomment-928139801",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc43VIy5",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Good to know. Let me get on that and see if I can come up with something that works for you.",
        "createdAt": "2021-09-27T21:15:44Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/43#issuecomment-928287929",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc43Vnrz",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I have added the two command line arguments (`z` and `C`). Could you please pull and test that they do what you want?\r\n\r\nI'm not done yet, but the rest of the work is not really going to impact what you want. It's a way to query the status of those things so that I can write library functions to print them in different ways.",
        "createdAt": "2021-09-27T23:07:11Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/43#issuecomment-928414451",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc43XcED",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I've changed the options to `-z`/`--leading-zeroes` and `-L`/`--no-line-length`.",
        "createdAt": "2021-09-28T06:21:27Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "totalCount": 1
            }
          }
        ],
        "url": "https://github.com/gavinhoward/bc/issues/43#issuecomment-928891139",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc43YQUv",
        "author": {
          "login": "depler"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "Working fine, thanks! Can you please add new tests to windows scripts? It is just a new lines with filename of appropriate test in `tests_bc.bat` and `tests_dc.bat`.",
        "createdAt": "2021-09-28T11:34:55Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/43#issuecomment-929105199",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc43Y4pl",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I'm sorry, I feel stupid, but I'm not sure what tests you want me to add. For these features? Or more tests in general?",
        "createdAt": "2021-09-28T14:12:35Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/43#issuecomment-929270373",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc43ZFR5",
        "author": {
          "login": "depler"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "You've added this one (and may be something else): https://github.com/gavinhoward/bc/blob/master/tests/bc/leadingzero.txt\r\nWindows script doesn't know about it yet.",
        "createdAt": "2021-09-28T15:09:39Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/43#issuecomment-929322105",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc43Zugt",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "I see. I've added that test to the Windows bat file, but once again, can you pull and test for me? The reason is that it needs to run the test twice, and I want to be sure that works for you.",
        "createdAt": "2021-09-28T17:54:31Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/43#issuecomment-929490989",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc43btxR",
        "author": {
          "login": "depler"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "A few changes are needed to differ `leadingzero` test from `leadingzero_z` : https://github.com/gavinhoward/bc/pull/44\r\nOtherwise it works fine.",
        "createdAt": "2021-09-29T09:35:21Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/43#issuecomment-930012241",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc43crqE",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "#44 is merged. Is there anything else that needs to change for you?",
        "createdAt": "2021-09-29T15:06:22Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/43#issuecomment-930265732",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc43d-9e",
        "author": {
          "login": "depler"
        },
        "authorAssociation": "CONTRIBUTOR",
        "body": "Nope. Thanks 👍",
        "createdAt": "2021-09-29T23:02:01Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/43#issuecomment-930606942",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2021-09-27T15:12:39Z",
    "id": "I_kwDOCL0xJc48GQ_o",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 43,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Additional arguments",
    "updatedAt": "2021-09-29T23:02:02Z",
    "url": "https://github.com/gavinhoward/bc/issues/43"
  },
  {
    "assignees": [],
    "author": {
      "id": "MDQ6VXNlcjQ2Njg2NTY1",
      "is_bot": false,
      "login": "rubyFeedback",
      "name": ""
    },
    "body": "Hey there.\n\nI am using this configure line:\n\n    CC=gcc ./configure --prefix=/home/Programs/Bc/7.0.3/  -G -O3 -r\n\nThis is what LFS (Linux from Scratch) recommends, but they use the conventional\n/usr/ prefix.\n\nNow interestingly, when I use the above, I get this result - a warning:\n\n    WARNING: Locales will *NOT* be installed in $PREFIX (/home/Programs/Bc/7.0.3/).\n\n         This is because they *MUST* be installed at a fixed location to even\n         work, and that fixed location is $NLSPATH (/usr/share/locale/%L/%N).\n\n         This location is *outside* of $PREFIX. If you do not wish to install\n         locales outside of $PREFIX, you must disable NLS with the -N or the\n         --disable-nls options.\n\n         The author apologizes for the inconvenience, but the need to install\n         the locales at a fixed location is mandated by POSIX, and it is not\n         possible for the author to change that requirement.\n\nThe warning makes sense on traditional systems that use /usr/ as prefix.\nGoboLinux uses versioned appdirs instead. (I am not using GoboLinux\nright now, as they use /Programs/ dir; I use a slightly modified self-compiled\nvariant instead. At the least currently.)\n\nI do not believe that POSIX mandates that /usr/share/local/ must be in\nthe way described. For instance, I am about 100% certain that symlinks \nare allowed; at the least not forbidden, so I would reason that POSIX\ncan not be cited here. GoboLinux also uses symlinks by the way; they\neven still have /usr/ etc... despite versioned appdirs.\n\nMy question is: is this warning really needed? I can install all glibc-related\nlocales into /home/Programs/Glibc/2.41/share/local/ etc... and I do not\nget any warning about this. I believe the warning has had good intentions,\nbut the explanation is a bit shaky to me, and does not seem to account\nfor e. g. alternative ways to handle a linux system. Does POSIX really\nsay that symlinks are forbidden?\n\n(Also, is it true that locales must be at a fixed location per se? Because in\nprinciple, whatever is searching for the file, could also have another \nlocation. I use the example of symlinks, but even without symlinks we \nhave things such as --libdir and various other flags that allow fine-tuning\nof various things here. Even meson-build systems allow for quite some\nflexibility here.)\n",
    "closed": true,
    "closedAt": "2025-04-10T16:47:30Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc6mkMkS",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "Yes, it is necessary. I have had more people ask why locales don't work than people like you asking why there is a warning. In fact, you're the first.\n\nTo remove the warning, set `NLSPATH` on the call to `configure`, like so:\n\n```\nCC=gcc NLSPATH=/home/Programs/Bc/7.0.3/%L/%N \\\n    ./configure --prefix=/home/Programs/Bc/7.0.3/  -G -O3 -r\n```\n\nThen yes, you can set up symlinks; POSIX does allow that.",
        "createdAt": "2025-04-10T16:47:30Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/90#issuecomment-2794506514",
        "viewerDidAuthor": true
      }
    ],
    "createdAt": "2025-04-10T11:40:10Z",
    "id": "I_kwDOCL0xJc6x8Vgk",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 90,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "locales - is the warning for non-standard prefixes still necessary?",
    "updatedAt": "2025-04-10T16:47:30Z",
    "url": "https://github.com/gavinhoward/bc/issues/90"
  },
  {
    "assignees": [],
    "author": {
      "id": "U_kgDOBxD9gQ",
      "is_bot": false,
      "login": "tungstengmd",
      "name": "harlow foxworthy"
    },
    "body": "this might have been excluded for a reason but can you add the \"!\" command back ? only reason being that i wanna clear the screen on certain events",
    "closed": true,
    "closedAt": "2025-04-18T20:43:24Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc6n20Uz",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "It was excluded for a reason, and no, I will not add it. Have your shell clear the screen.",
        "createdAt": "2025-04-18T20:43:23Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/91#issuecomment-2816165171",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc6n25O1",
        "author": {
          "login": "tungstengmd"
        },
        "authorAssociation": "NONE",
        "body": "had a feeling, and damn you're fast",
        "createdAt": "2025-04-18T20:58:15Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/91#issuecomment-2816185269",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc6n3ljG",
        "author": {
          "login": "drawkula"
        },
        "authorAssociation": "NONE",
        "body": "You can hardcode the sequence to clear the screen.\nTo be a bit independent of the terminal, catching what `clear` will send may be the way.\n```\n$ clear | xxd -C -p -u -\n1B5B481B5B324A\n```\nSo this ...\n```\n$ clear | xxd -C -p -u - | dc -e '16i ? P'\n```\n... demonstrates it.  Capture the value, in base10 if you prefer.\n\nTBH, I miss `!` too.\n",
        "createdAt": "2025-04-18T23:55:14Z",
        "includesCreatedEdit": true,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/91#issuecomment-2816366790",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc6n4p5E",
        "author": {
          "login": "tungstengmd"
        },
        "authorAssociation": "NONE",
        "body": "oh wait you're onto something",
        "createdAt": "2025-04-19T10:18:42Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/91#issuecomment-2816646724",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc6n5dwl",
        "author": {
          "login": "tungstengmd"
        },
        "authorAssociation": "NONE",
        "body": "ok so basically you can just catch command output [as hex form] in xxd and input it to dc with the input radix as 16\ntherefore bypassing the need for `!`\nthanks @drawkula",
        "createdAt": "2025-04-19T20:40:25Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/91#issuecomment-2816859173",
        "viewerDidAuthor": false
      },
      {
        "id": "IC_kwDOCL0xJc6n-PJv",
        "author": {
          "login": "drawkula"
        },
        "authorAssociation": "NONE",
        "body": "Sure you can read ™somewhere™ which control sequence your `$TERM` will use to clear the screen and then manually turn that into this string alike integer, but you'd have to do that anew everywhere you run your code attached to a differently behaving terminal emulation.  So catching the sequence from `clear`, similar `tput` commands or directly looking it up in Terminfo or Termcap terminal definitions makes it portable and I assumed catching the output of `clear` would be the easiest of these alternatives.\n\nUsing `xxd` may limit portability a bit.  That's probably the weak spot of this idea.  There are alternatives, but if available, `xxd` seems to fit this job best.",
        "createdAt": "2025-04-21T10:18:17Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/91#issuecomment-2818110063",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2025-04-18T20:41:22Z",
    "id": "I_kwDOCL0xJc6zJ4VJ",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 91,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [
      {
        "content": "THUMBS_UP",
        "users": {
          "totalCount": 1
        }
      }
    ],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "add ! command",
    "updatedAt": "2025-04-21T10:18:18Z",
    "url": "https://github.com/gavinhoward/bc/issues/91"
  },
  {
    "assignees": [],
    "author": {
      "id": "U_kgDOB8YAUQ",
      "is_bot": false,
      "login": "tkb-github",
      "name": ""
    },
    "body": "With the release of RHEL 10 and Fedora 42, we’ve tried to build 7.0.3 on both. No issues with Clang.\n\nWith GCC (v14 for RHEL 10, v15 for Fedora 42), though, the build succeeded under the [epel-10-aarch64](https://download.copr.fedorainfracloud.org/results/tkbcopr/bc-gh/epel-10-aarch64/09140402-bc-gh/) chroot but failed with [epel-10-x86_64](https://download.copr.fedorainfracloud.org/results/tkbcopr/bc-gh/epel-10-x86_64/09140402-bc-gh/), [fedora-42-x86_64](https://download.copr.fedorainfracloud.org/results/tkbcopr/bc-gh/fedora-42-x86_64/09140402-bc-gh/) and [fedora-42-aarch64](https://download.copr.fedorainfracloud.org/results/tkbcopr/bc-gh/fedora-42-aarch64/09140402-bc-gh/). Here’s excerpts from the failed builds.\n\nepel-10-x86_64:\n\n```sh\n\ngcc -DBC_ENABLED=1 -DDC_ENABLED=1 -I./include/ -DBUILD_TYPE=A  -DEXECPREFIX= -DMAINEXEC=bc   -DBC_NUM_KARATSUBA_LEN=34 -DBC_ENABLE_NLS=1 -DBC_ENABLE_EXTRA_MATH=1 -DBC_ENABLE_HISTORY=1 -DBC_ENABLE_LIBRARY=0 -DBC_ENABLE_MEMCHECK=0 -DBC_ENABLE_AFL=0 -DBC_ENABLE_OSSFUZZ=0 -DBC_DEFAULT_BANNER=0 -DBC_DEFAULT_SIGINT_RESET=1 -DBC_DEFAULT_TTY_MODE=1 -DBC_DEFAULT_PROMPT=1 -DBC_DEFAULT_EXPR_EXIT=1 -DBC_DEFAULT_DIGIT_CLAMP=0 -DDC_DEFAULT_SIGINT_RESET=1 -DDC_DEFAULT_TTY_MODE=0 -DDC_DEFAULT_PROMPT=0 -DDC_DEFAULT_EXPR_EXIT=1 -DDC_DEFAULT_DIGIT_CLAMP=0  -DBC_ENABLE_EDITLINE=0 -DBC_ENABLE_READLINE=0 -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -O3 -g -flto ./gen/dc_help.o ./gen/bc_help.o ./gen/lib.o ./gen/lib2.o src/args.o src/bc.o src/bc_lex.o src/bc_parse.o src/data.o src/dc.o src/dc_lex.o src/dc_parse.o src/file.o src/history.o src/lang.o src/lex.o src/main.o src/num.o src/opt.o src/parse.o src/program.o src/rand.o src/read.o src/vector.o src/vm.o -Wl,-z,relro -Wl,--as-needed  -Wl,-z,pack-relative-relocs -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -specs=/usr/lib/rpm/redhat/redhat-hardened-ld-errors -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1  -Wl,--build-id=sha1 -specs=/usr/lib/rpm/redhat/redhat-package-notes  -o bin/bc\n/usr/bin/ld: /tmp/ccMAotuu.ltrans0.ltrans.o: relocation R_X86_64_32 against `.rodata' can not be used when making a PIE object; recompile with -fPIE\n/usr/bin/ld: failed to set dynamic section sizes: bad value\ncollect2: error: ld returned 1 exit status\nmake: *** [Makefile:241: bin/bc] Error 1\nerror: Bad exit status from /var/tmp/rpm-tmp.G7xvMo (%build)\n\nRPM build errors:\n    Bad exit status from /var/tmp/rpm-tmp.G7xvMo (%build)\n\n```\n\nfedora-42-x86_64\n\n```sh\n\ngcc -DBC_ENABLED=1 -DDC_ENABLED=1 -I./include/ -DBUILD_TYPE=A  -DEXECPREFIX= -DMAINEXEC=bc   -DBC_NUM_KARATSUBA_LEN=34 -DBC_ENABLE_NLS=1 -DBC_ENABLE_EXTRA_MATH=1 -DBC_ENABLE_HISTORY=1 -DBC_ENABLE_LIBRARY=0 -DBC_ENABLE_MEMCHECK=0 -DBC_ENABLE_AFL=0 -DBC_ENABLE_OSSFUZZ=0 -DBC_DEFAULT_BANNER=0 -DBC_DEFAULT_SIGINT_RESET=1 -DBC_DEFAULT_TTY_MODE=1 -DBC_DEFAULT_PROMPT=1 -DBC_DEFAULT_EXPR_EXIT=1 -DBC_DEFAULT_DIGIT_CLAMP=0 -DDC_DEFAULT_SIGINT_RESET=1 -DDC_DEFAULT_TTY_MODE=0 -DDC_DEFAULT_PROMPT=0 -DDC_DEFAULT_EXPR_EXIT=1 -DDC_DEFAULT_DIGIT_CLAMP=0  -DBC_ENABLE_EDITLINE=0 -DBC_ENABLE_READLINE=0 -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -O3 -g -flto -o src/data.o -c ./src/data.c\nIn file included from /usr/lib/gcc/x86_64-redhat-linux/15/include/stdint.h:11,\n                 from ./include/status.h:46,\n                 from ./include/args.h:39,\n                 from ./src/data.c:39:\n./src/data.c:920:29: error: â^@^XfalseULâ^@^Y undeclared here (not in a function)\n  920 |         BC_PARSE_EXPR_ENTRY(false, false, true, true, true, true, true, true),\n      |                             ^~~~~\n./src/data.c:920:9: note: in expansion of macro â^@^XBC_PARSE_EXPR_ENTRYâ^@^Y\n  920 |         BC_PARSE_EXPR_ENTRY(false, false, true, true, true, true, true, true),\n      |         ^~~~~~~~~~~~~~~~~~~\n./src/data.c:920:43: error: â^@^XtrueULâ^@^Y undeclared here (not in a function)\n  920 |         BC_PARSE_EXPR_ENTRY(false, false, true, true, true, true, true, true),\n      |                                           ^~~~\n./src/data.c:920:9: note: in expansion of macro â^@^XBC_PARSE_EXPR_ENTRYâ^@^Y\n  920 |         BC_PARSE_EXPR_ENTRY(false, false, true, true, true, true, true, true),\n      |         ^~~~~~~~~~~~~~~~~~~\nmake: *** [Makefile:668: src/data.o] Error 1\ngcc -DBC_ENABLED=1 -DDC_ENABLED=1 -I./include/ -DBUILD_TYPE=A  -DEXECPREFIX= -DMAINEXEC=bc   -DBC_NUM_KARATSUBA_LEN=34 -DBC_ENABLE_NLS=1 -DBC_ENABLE_EXTRA_MATH=1 -DBC_ENABLE_HISTORY=1 -DBC_ENABLE_LIBRARY=0 -DBC_ENABLE_MEMCHECK=0 -DBC_ENABLE_AFL=0 -DBC_ENABLE_OSSFUZZ=0 -DBC_DEFAULT_BANNER=0 -DBC_DEFAULT_SIGINT_RESET=1 -DBC_DEFAULT_TTY_MODE=1 -DBC_DEFAULT_PROMPT=1 -DBC_DEFAULT_EXPR_EXIT=1 -DBC_DEFAULT_DIGIT_CLAMP=0 -DDC_DEFAULT_SIGINT_RESET=1 -DDC_DEFAULT_TTY_MODE=0 -DDC_DEFAULT_PROMPT=0 -DDC_DEFAULT_EXPR_EXIT=1 -DDC_DEFAULT_DIGIT_CLAMP=0  -DBC_ENABLE_EDITLINE=0 -DBC_ENABLE_READLINE=0 -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -O3 -g -flto -o src/dc.o -c ./src/dc.c\nmake: *** Waiting for unfinished jobs....\ngcc -DBC_ENABLE_AFL=0 -DBC_ENABLE_OSSFUZZ=0 -I./include/ -flto -o ./gen/strgen ./gen/strgen.c\ngcc -DBC_ENABLED=1 -DDC_ENABLED=1 -I./include/ -DBUILD_TYPE=A  -DEXECPREFIX= -DMAINEXEC=bc   -DBC_NUM_KARATSUBA_LEN=34 -DBC_ENABLE_NLS=1 -DBC_ENABLE_EXTRA_MATH=1 -DBC_ENABLE_HISTORY=1 -DBC_ENABLE_LIBRARY=0 -DBC_ENABLE_MEMCHECK=0 -DBC_ENABLE_AFL=0 -DBC_ENABLE_OSSFUZZ=0 -DBC_DEFAULT_BANNER=0 -DBC_DEFAULT_SIGINT_RESET=1 -DBC_DEFAULT_TTY_MODE=1 -DBC_DEFAULT_PROMPT=1 -DBC_DEFAULT_EXPR_EXIT=1 -DBC_DEFAULT_DIGIT_CLAMP=0 -DDC_DEFAULT_SIGINT_RESET=1 -DDC_DEFAULT_TTY_MODE=0 -DDC_DEFAULT_PROMPT=0 -DDC_DEFAULT_EXPR_EXIT=1 -DDC_DEFAULT_DIGIT_CLAMP=0  -DBC_ENABLE_EDITLINE=0 -DBC_ENABLE_READLINE=0 -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -O3 -g -flto -o src/bc_parse.o -c ./src/bc_parse.c\nerror: Bad exit status from /var/tmp/rpm-tmp.hRViel (%build)\n\nRPM build errors:\n    Bad exit status from /var/tmp/rpm-tmp.hRViel (%build)\n\n```\n\nfedora-42-aarch64\n\n```sh\n\ngcc -DBC_ENABLED=1 -DDC_ENABLED=1 -I./include/ -DBUILD_TYPE=A  -DEXECPREFIX= -DMAINEXEC=bc   -DBC_NUM_KARATSUBA_LEN=34 -DBC_ENABLE_NLS=1 -DBC_ENABLE_EXTRA_MATH=1 -DBC_ENABLE_HISTORY=1 -DBC_ENABLE_LIBRARY=0 -DBC_ENABLE_MEMCHECK=0 -DBC_ENABLE_AFL=0 -DBC_ENABLE_OSSFUZZ=0 -DBC_DEFAULT_BANNER=0 -DBC_DEFAULT_SIGINT_RESET=1 -DBC_DEFAULT_TTY_MODE=1 -DBC_DEFAULT_PROMPT=1 -DBC_DEFAULT_EXPR_EXIT=1 -DBC_DEFAULT_DIGIT_CLAMP=0 -DDC_DEFAULT_SIGINT_RESET=1 -DDC_DEFAULT_TTY_MODE=0 -DDC_DEFAULT_PROMPT=0 -DDC_DEFAULT_EXPR_EXIT=1 -DDC_DEFAULT_DIGIT_CLAMP=0  -DBC_ENABLE_EDITLINE=0 -DBC_ENABLE_READLINE=0 -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -O3 -g -flto -o src/data.o -c ./src/data.c\nIn file included from /usr/lib/gcc/aarch64-redhat-linux/15/include/stdint.h:11,\n                 from ./include/status.h:46,\n                 from ./include/args.h:39,\n                 from ./src/data.c:39:\n./src/data.c:920:29: error: â^@^XfalseULâ^@^Y undeclared here (not in a function)\n  920 |         BC_PARSE_EXPR_ENTRY(false, false, true, true, true, true, true, true),\n      |                             ^~~~~\n./src/data.c:920:9: note: in expansion of macro â^@^XBC_PARSE_EXPR_ENTRYâ^@^Y\n  920 |         BC_PARSE_EXPR_ENTRY(false, false, true, true, true, true, true, true),\n      |         ^~~~~~~~~~~~~~~~~~~\n./src/data.c:920:43: error: â^@^XtrueULâ^@^Y undeclared here (not in a function)\n  920 |         BC_PARSE_EXPR_ENTRY(false, false, true, true, true, true, true, true),\n      |                                           ^~~~\n./src/data.c:920:9: note: in expansion of macro â^@^XBC_PARSE_EXPR_ENTRYâ^@^Y\n  920 |         BC_PARSE_EXPR_ENTRY(false, false, true, true, true, true, true, true),\n      |         ^~~~~~~~~~~~~~~~~~~\nmake: *** [Makefile:668: src/data.o] Error 1\nmake: *** Waiting for unfinished jobs....\ngcc -DBC_ENABLED=1 -DDC_ENABLED=1 -I./include/ -DBUILD_TYPE=A  -DEXECPREFIX= -DMAINEXEC=bc   -DBC_NUM_KARATSUBA_LEN=34 -DBC_ENABLE_NLS=1 -DBC_ENABLE_EXTRA_MATH=1 -DBC_ENABLE_HISTORY=1 -DBC_ENABLE_LIBRARY=0 -DBC_ENABLE_MEMCHECK=0 -DBC_ENABLE_AFL=0 -DBC_ENABLE_OSSFUZZ=0 -DBC_DEFAULT_BANNER=0 -DBC_DEFAULT_SIGINT_RESET=1 -DBC_DEFAULT_TTY_MODE=1 -DBC_DEFAULT_PROMPT=1 -DBC_DEFAULT_EXPR_EXIT=1 -DBC_DEFAULT_DIGIT_CLAMP=0 -DDC_DEFAULT_SIGINT_RESET=1 -DDC_DEFAULT_TTY_MODE=0 -DDC_DEFAULT_PROMPT=0 -DDC_DEFAULT_EXPR_EXIT=1 -DDC_DEFAULT_DIGIT_CLAMP=0  -DBC_ENABLE_EDITLINE=0 -DBC_ENABLE_READLINE=0 -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -O3 -g -flto -o src/dc.o -c ./src/dc.c\ngcc -DBC_ENABLED=1 -DDC_ENABLED=1 -I./include/ -DBUILD_TYPE=A  -DEXECPREFIX= -DMAINEXEC=bc   -DBC_NUM_KARATSUBA_LEN=34 -DBC_ENABLE_NLS=1 -DBC_ENABLE_EXTRA_MATH=1 -DBC_ENABLE_HISTORY=1 -DBC_ENABLE_LIBRARY=0 -DBC_ENABLE_MEMCHECK=0 -DBC_ENABLE_AFL=0 -DBC_ENABLE_OSSFUZZ=0 -DBC_DEFAULT_BANNER=0 -DBC_DEFAULT_SIGINT_RESET=1 -DBC_DEFAULT_TTY_MODE=1 -DBC_DEFAULT_PROMPT=1 -DBC_DEFAULT_EXPR_EXIT=1 -DBC_DEFAULT_DIGIT_CLAMP=0 -DDC_DEFAULT_SIGINT_RESET=1 -DDC_DEFAULT_TTY_MODE=0 -DDC_DEFAULT_PROMPT=0 -DDC_DEFAULT_EXPR_EXIT=1 -DDC_DEFAULT_DIGIT_CLAMP=0  -DBC_ENABLE_EDITLINE=0 -DBC_ENABLE_READLINE=0 -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -O3 -g -flto -o src/bc_parse.o -c ./src/bc_parse.c\ngcc -DBC_ENABLE_AFL=0 -DBC_ENABLE_OSSFUZZ=0 -I./include/ -flto -o ./gen/strgen ./gen/strgen.c\nerror: Bad exit status from /var/tmp/rpm-tmp.5cLuhE (%build)\n\nRPM build errors:\n    Bad exit status from /var/tmp/rpm-tmp.5cLuhE (%build)\n\n```",
    "closed": true,
    "closedAt": "2025-06-08T22:18:49Z",
    "comments": [
      {
        "id": "IC_kwDOCL0xJc6v8kNF",
        "author": {
          "login": "gavinhoward"
        },
        "authorAssociation": "OWNER",
        "body": "For epel-10-x86_64, just add `-fPIE` to the `CFLAGS`, like so:\n\n```\n$ CFLAGS=-fpie ./configure.sh\n$ make\n```\n\nFor the other two, it appears `stdbool.h` does not properly define `false` and `true`.",
        "createdAt": "2025-06-07T05:46:33Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/92#issuecomment-2951889733",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOCL0xJc6wDPLy",
        "author": {
          "login": "tkb-github"
        },
        "authorAssociation": "NONE",
        "body": "Thanks!",
        "createdAt": "2025-06-08T06:52:46Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/gavinhoward/bc/issues/92#issuecomment-2953638642",
        "viewerDidAuthor": false
      }
    ],
    "createdAt": "2025-06-07T03:51:28Z",
    "id": "I_kwDOCL0xJc66WQa1",
    "isPinned": false,
    "labels": [],
    "milestone": null,
    "number": 92,
    "projectCards": [],
    "projectItems": [],
    "reactionGroups": [],
    "state": "CLOSED",
    "stateReason": "COMPLETED",
    "title": "Build failures under RHEL 10 & Fedora 42 with GCC",
    "updatedAt": "2025-06-08T22:18:49Z",
    "url": "https://github.com/gavinhoward/bc/issues/92"
  }
]

/*
 * Copyright (c) 2009 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Portions Copyright (c) 2009 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <mach/std_types.defs>
#include <mach/mach_types.defs>

type heim_ipc_message_inband_t = array [ * : 2048 ] of char;
type heim_ipc_message_outband_t = array [] of char;

import "heim_ipc_types.h";

subsystem mheim_ipc 1;
userprefix mheim_ipc_;
serverprefix mheim_do_;

routine call(
				server_port	: mach_port_t;
		ServerAuditToken client_creds	: audit_token_t;
		sreplyport	reply_port	: mach_port_make_send_once_t;
		in		requestin	: heim_ipc_message_inband_t;
		in		requestout	: heim_ipc_message_outband_t;
		out		returnvalue	: int;
		out		replyin		: heim_ipc_message_inband_t;
		out		replyout	: heim_ipc_message_outband_t, dealloc);

simpleroutine call_request(
				server_port	: mach_port_t;
		ServerAuditToken client_creds	: audit_token_t;
		in		reply_to	: mach_port_make_send_once_t;
		in		requestin	: heim_ipc_message_inband_t;
		in		requestout	: heim_ipc_message_outband_t);




.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "EVP_KEM_FREE 3ossl"
.TH EVP_KEM_FREE 3ossl 2025-07-01 3.5.1 OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
EVP_KEM_fetch, EVP_KEM_free, EVP_KEM_up_ref,
EVP_KEM_get0_name, EVP_KEM_is_a, EVP_KEM_get0_provider,
EVP_KEM_do_all_provided, EVP_KEM_names_do_all, EVP_KEM_get0_description,
EVP_KEM_gettable_ctx_params, EVP_KEM_settable_ctx_params
\&\- Functions to manage EVP_KEM algorithm objects
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/evp.h>
\&
\& EVP_KEM *EVP_KEM_fetch(OSSL_LIB_CTX *ctx, const char *algorithm,
\&                        const char *properties);
\& void EVP_KEM_free(EVP_KEM *kem);
\& int EVP_KEM_up_ref(EVP_KEM *kem);
\& const char *EVP_KEM_get0_name(const EVP_KEM *kem);
\& int EVP_KEM_is_a(const EVP_KEM *kem, const char *name);
\& OSSL_PROVIDER *EVP_KEM_get0_provider(const EVP_KEM *kem);
\& void EVP_KEM_do_all_provided(OSSL_LIB_CTX *libctx,
\&                              void (*fn)(EVP_KEM *kem, void *arg), void *arg);
\& int EVP_KEM_names_do_all(const EVP_KEM *kem,
\&                          void (*fn)(const char *name, void *data), void *data);
\& const char *EVP_KEM_get0_description(const EVP_KEM *kem);
\& const OSSL_PARAM *EVP_KEM_gettable_ctx_params(const EVP_KEM *kem);
\& const OSSL_PARAM *EVP_KEM_settable_ctx_params(const EVP_KEM *kem);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fBEVP_KEM_fetch()\fR fetches the implementation for the given \fBalgorithm\fR from any
provider offering it, within the criteria given by the \fBproperties\fR and in the
scope of the given library context \fBctx\fR (see \fBOSSL_LIB_CTX\fR\|(3)). The algorithm
will be one offering functions for performing asymmetric kem related tasks such
as key encapsulation and decapsulation.
See "ALGORITHM FETCHING" in \fBcrypto\fR\|(7) for further information.
.PP
The returned value must eventually be freed with \fBEVP_KEM_free()\fR.
.PP
\&\fBEVP_KEM_free()\fR decrements the reference count for the \fBEVP_KEM\fR structure.
Typically this structure will have been obtained from an earlier call to
\&\fBEVP_KEM_fetch()\fR. If the reference count drops to 0 then the structure is freed.
If the argument is NULL, nothing is done.
.PP
\&\fBEVP_KEM_up_ref()\fR increments the reference count for an \fBEVP_KEM\fR structure.
.PP
\&\fBEVP_KEM_is_a()\fR returns 1 if \fIkem\fR is an implementation of an
algorithm that's identifiable with \fIname\fR, otherwise 0.
.PP
\&\fBEVP_KEM_get0_provider()\fR returns the provider that \fIkem\fR was fetched from.
.PP
\&\fBEVP_KEM_do_all_provided()\fR traverses all EVP_KEMs implemented by all activated
providers in the given library context \fIlibctx\fR, and for each of the
implementations, calls the given function \fIfn\fR with the implementation method
and the given \fIarg\fR as argument.
.PP
\&\fBEVP_KEM_get0_name()\fR returns the algorithm name from the provided
implementation for the given \fIkem\fR. Note that the \fIkem\fR may have
multiple synonyms associated with it. In this case the first name from the
algorithm definition is returned. Ownership of the returned string is retained
by the \fIkem\fR object and should not be freed by the caller.
.PP
\&\fBEVP_KEM_names_do_all()\fR traverses all names for \fIkem\fR, and calls \fIfn\fR with
each name and \fIdata\fR.
.PP
\&\fBEVP_KEM_get0_description()\fR returns a description of the \fIkem\fR, meant for
display and human consumption.  The description is at the discretion of
the \fIkem\fR implementation.
.PP
\&\fBEVP_KEM_gettable_ctx_params()\fR and \fBEVP_KEM_settable_ctx_params()\fR return
a constant \fBOSSL_PARAM\fR\|(3) array that describes the names and types of key
parameters that can be retrieved or set by a key encapsulation algorithm using
\&\fBEVP_PKEY_CTX_get_params\fR\|(3) and \fBEVP_PKEY_CTX_set_params\fR\|(3).
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBEVP_KEM_fetch()\fR returns a pointer to an \fBEVP_KEM\fR for success or \fBNULL\fR for
failure.
.PP
\&\fBEVP_KEM_up_ref()\fR returns 1 for success or 0 otherwise.
.PP
\&\fBEVP_KEM_names_do_all()\fR returns 1 if the callback was called for all names. A
return value of 0 means that the callback was not called for any names.
.PP
\&\fBEVP_KEM_gettable_ctx_params()\fR and \fBEVP_KEM_settable_ctx_params()\fR return
a constant \fBOSSL_PARAM\fR\|(3) array or NULL on error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
"ALGORITHM FETCHING" in \fBcrypto\fR\|(7), \fBOSSL_PROVIDER\fR\|(3)
.SH HISTORY
.IX Header "HISTORY"
The functions described here were added in OpenSSL 3.0.
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2020\-2024 The OpenSSL Project Authors. All Rights Reserved.
.PP
Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
<https://www.openssl.org/source/license.html>.

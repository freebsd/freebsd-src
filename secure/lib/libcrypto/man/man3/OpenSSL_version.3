.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OPENSSL_VERSION 3ossl"
.TH OPENSSL_VERSION 3ossl "2023-09-19" "3.0.11" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OPENSSL_VERSION_MAJOR, OPENSSL_VERSION_MINOR, OPENSSL_VERSION_PATCH,
OPENSSL_VERSION_PRE_RELEASE, OPENSSL_VERSION_BUILD_METADATA,
OPENSSL_VERSION_TEXT, OPENSSL_VERSION_PREREQ, OPENSSL_version_major,
OPENSSL_version_minor, OPENSSL_version_patch, OPENSSL_version_pre_release,
OPENSSL_version_build_metadata, OpenSSL_version, OPENSSL_VERSION_NUMBER,
OpenSSL_version_num, OPENSSL_info
\&\- get OpenSSL version number and other information
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/opensslv.h>
\&
\& #define OPENSSL_VERSION_MAJOR  x
\& #define OPENSSL_VERSION_MINOR  y
\& #define OPENSSL_VERSION_PATCH  z
\&
\& /* The definitions here are typical release values */
\& #define OPENSSL_VERSION_PRE_RELEASE ""
\& #define OPENSSL_VERSION_BUILD_METADATA ""
\&
\& #define OPENSSL_VERSION_TEXT "OpenSSL x.y.z xx XXX xxxx"
\&
\& #define OPENSSL_VERSION_PREREQ(maj,min)
\&
\& #include <openssl/crypto.h>
\&
\& unsigned int OPENSSL_version_major(void);
\& unsigned int OPENSSL_version_minor(void);
\& unsigned int OPENSSL_version_patch(void);
\& const char *OPENSSL_version_pre_release(void);
\& const char *OPENSSL_version_build_metadata(void);
\&
\& const char *OpenSSL_version(int t);
\&
\& const char *OPENSSL_info(int t);
\&
\& /* from openssl/opensslv.h */
\& #define OPENSSL_VERSION_NUMBER 0xnnnnnnnnL
\&
\& /* from openssl/crypto.h */
\& unsigned long OpenSSL_version_num();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Macros"
.IX Subsection "Macros"
The three macros \fB\s-1OPENSSL_VERSION_MAJOR\s0\fR, \fB\s-1OPENSSL_VERSION_MINOR\s0\fR and
\&\fB\s-1OPENSSL_VERSION_PATCH\s0\fR represent the three parts of a version
identifier, \fB\f(BI\s-1MAJOR\s0\fB.\f(BI\s-1MINOR\s0\fB.\f(BI\s-1PATCH\s0\fB\fR.
.PP
The macro \fB\s-1OPENSSL_VERSION_PRE_RELEASE\s0\fR is an added bit of text that
indicates that this is a pre-release version, such as \f(CW"\-dev"\fR for an
ongoing development snapshot or \f(CW"\-alpha3"\fR for an alpha release.
The value must be a string.
.PP
The macro \fB\s-1OPENSSL_VERSION_BUILD_METADATA\s0\fR is extra information, reserved
for other parties, such as \f(CW"+fips"\fR, or \f(CW"+vendor.1"\fR).
The OpenSSL project will not touch this macro (will leave it an empty string).
The value must be a string.
.PP
\&\fB\s-1OPENSSL_VERSION_STR\s0\fR is a convenience macro to get the short version
identifier string, \f(CW"\f(CIMAJOR\f(CW.\f(CIMINOR\f(CW.\f(CIPATCH\f(CW"\fR.
.PP
\&\fB\s-1OPENSSL_FULL_VERSION_STR\s0\fR is a convenience macro to get the longer
version identifier string, which combines \fB\s-1OPENSSL_VERSION_STR\s0\fR,
\&\fB\s-1OPENSSL_VERSION_PRE_RELEASE\s0\fR and \fB\s-1OPENSSL_VERSION_BUILD_METADATA\s0\fR.
.PP
\&\fB\s-1OPENSSL_VERSION_TEXT\s0\fR is a convenience macro to get a full descriptive
version text, which includes \fB\s-1OPENSSL_FULL_VERSION_STR\s0\fR and the release
date.
.PP
\&\fB\s-1OPENSSL_VERSION_PREREQ\s0\fR is a useful macro for checking whether the OpenSSL
version for the headers in use is at least at the given pre-requisite major
(\fBmaj\fR) and minor (\fBmin\fR) number or not. It will evaluate to true if the
header version number (\fB\s-1OPENSSL_VERSION_MAJOR\s0\fR.\fB\s-1OPENSSL_VERSION_MINOR\s0\fR) is
greater than or equal to \fBmaj\fR.\fBmin\fR.
.PP
\&\fB\s-1OPENSSL_VERSION_NUMBER\s0\fR is a combination of the major, minor and
patch version into a single integer 0xMNN00PP0L, where:
.IP "M" 4
.IX Item "M"
is the number from \fB\s-1OPENSSL_VERSION_MAJOR\s0\fR, in hexadecimal notation
.IP "\s-1NN\s0" 4
.IX Item "NN"
is the number from \fB\s-1OPENSSL_VERSION_MINOR\s0\fR, in hexadecimal notation
.IP "\s-1PP\s0" 4
.IX Item "PP"
is the number from \fB\s-1OPENSSL_VERSION_PATCH\s0\fR, in hexadecimal notation
.SS "Functions"
.IX Subsection "Functions"
\&\fBOPENSSL_version_major()\fR, \fBOPENSSL_version_minor()\fR, \fBOPENSSL_version_patch()\fR,
\&\fBOPENSSL_version_pre_release()\fR, and \fBOPENSSL_version_build_metadata()\fR return
the values of the macros above for the build of the library, respectively.
.PP
\&\fBOpenSSL_version()\fR returns different strings depending on \fIt\fR:
.IP "\s-1OPENSSL_VERSION\s0" 4
.IX Item "OPENSSL_VERSION"
The value of \fB\s-1OPENSSL_VERSION_TEXT\s0\fR
.IP "\s-1OPENSSL_VERSION_STRING\s0" 4
.IX Item "OPENSSL_VERSION_STRING"
The value of \fB\s-1OPENSSL_VERSION_STR\s0\fR
.IP "\s-1OPENSSL_FULL_VERSION_STRING\s0" 4
.IX Item "OPENSSL_FULL_VERSION_STRING"
The value of \fB\s-1OPENSSL_FULL_VERSION_STR\s0\fR
.IP "\s-1OPENSSL_CFLAGS\s0" 4
.IX Item "OPENSSL_CFLAGS"
The compiler flags set for the compilation process in the form
\&\f(CW\*(C`compiler: ...\*(C'\fR  if available, or \f(CW\*(C`compiler: information not available\*(C'\fR
otherwise.
.IP "\s-1OPENSSL_BUILT_ON\s0" 4
.IX Item "OPENSSL_BUILT_ON"
The date of the build process in the form \f(CW\*(C`built on: ...\*(C'\fR if available
or \f(CW\*(C`built on: date not available\*(C'\fR otherwise.
The date would not be available in a reproducible build, for example.
.IP "\s-1OPENSSL_PLATFORM\s0" 4
.IX Item "OPENSSL_PLATFORM"
The \*(L"Configure\*(R" target of the library build in the form \f(CW\*(C`platform: ...\*(C'\fR
if available, or \f(CW\*(C`platform: information not available\*(C'\fR otherwise.
.IP "\s-1OPENSSL_DIR\s0" 4
.IX Item "OPENSSL_DIR"
The \fB\s-1OPENSSLDIR\s0\fR setting of the library build in the form \f(CW\*(C`OPENSSLDIR: "..."\*(C'\fR
if available, or \f(CW\*(C`OPENSSLDIR: N/A\*(C'\fR otherwise.
.IP "\s-1OPENSSL_ENGINES_DIR\s0" 4
.IX Item "OPENSSL_ENGINES_DIR"
The \fB\s-1ENGINESDIR\s0\fR setting of the library build in the form \f(CW\*(C`ENGINESDIR: "..."\*(C'\fR
if available, or \f(CW\*(C`ENGINESDIR: N/A\*(C'\fR otherwise. This option is deprecated in
OpenSSL 3.0.
.IP "\s-1OPENSSL_MODULES_DIR\s0" 4
.IX Item "OPENSSL_MODULES_DIR"
The \fB\s-1MODULESDIR\s0\fR setting of the library build in the form \f(CW\*(C`MODULESDIR: "..."\*(C'\fR
if available, or \f(CW\*(C`MODULESDIR: N/A\*(C'\fR otherwise.
.IP "\s-1OPENSSL_CPU_INFO\s0" 4
.IX Item "OPENSSL_CPU_INFO"
The current OpenSSL cpu settings.
This is the current setting of the cpu capability flags. It is usually
automatically configured but may be set via an environment variable.
The value has the same syntax as the environment variable.
For x86 the string looks like \f(CW\*(C`CPUINFO: OPENSSL_ia32cap=0x123:0x456\*(C'\fR
or \f(CW\*(C`CPUINFO: N/A\*(C'\fR if not available.
.PP
For an unknown \fIt\fR, the text \f(CW\*(C`not available\*(C'\fR is returned.
.PP
\&\fBOPENSSL_info()\fR also returns different strings depending on \fIt\fR:
.IP "\s-1OPENSSL_INFO_CONFIG_DIR\s0" 4
.IX Item "OPENSSL_INFO_CONFIG_DIR"
The configured \f(CW\*(C`OPENSSLDIR\*(C'\fR, which is the default location for
OpenSSL configuration files.
.IP "\s-1OPENSSL_INFO_ENGINES_DIR\s0" 4
.IX Item "OPENSSL_INFO_ENGINES_DIR"
The configured \f(CW\*(C`ENGINESDIR\*(C'\fR, which is the default location for
OpenSSL engines.
.IP "\s-1OPENSSL_INFO_MODULES_DIR\s0" 4
.IX Item "OPENSSL_INFO_MODULES_DIR"
The configured \f(CW\*(C`MODULESDIR\*(C'\fR, which is the default location for
dynamically loadable OpenSSL modules other than engines.
.IP "\s-1OPENSSL_INFO_DSO_EXTENSION\s0" 4
.IX Item "OPENSSL_INFO_DSO_EXTENSION"
The configured dynamically loadable module extension.
.IP "\s-1OPENSSL_INFO_DIR_FILENAME_SEPARATOR\s0" 4
.IX Item "OPENSSL_INFO_DIR_FILENAME_SEPARATOR"
The separator between a directory specification and a filename.
Note that on some operating systems, this is not the same as the
separator between directory elements.
.IP "\s-1OPENSSL_INFO_LIST_SEPARATOR\s0" 4
.IX Item "OPENSSL_INFO_LIST_SEPARATOR"
The OpenSSL list separator.
This is typically used in strings that are lists of items, such as the
value of the environment variable \f(CW$PATH\fR on Unix (where the
separator is \f(CW\*(C`:\*(C'\fR) or \f(CW\*(C`%PATH%\*(C'\fR on Windows (where the separator is
\&\f(CW\*(C`;\*(C'\fR).
.IP "\s-1OPENSSL_INFO_CPU_SETTINGS\s0" 4
.IX Item "OPENSSL_INFO_CPU_SETTINGS"
The current OpenSSL cpu settings.
This is the current setting of the cpu capability flags. It is usually
automatically configured but may be set via an environment variable.
The value has the same syntax as the environment variable.
For x86 the string looks like \f(CW\*(C`OPENSSL_ia32cap=0x123:0x456\*(C'\fR.
.PP
For an unknown \fIt\fR, \s-1NULL\s0 is returned.
.PP
\&\fBOpenSSL_version_num()\fR returns the value of \fB\s-1OPENSSL_VERSION_NUMBER\s0\fR.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBOPENSSL_version_major()\fR, \fBOPENSSL_version_minor()\fR and \fBOPENSSL_version_patch()\fR
return the version number parts as integers.
.PP
\&\fBOPENSSL_version_pre_release()\fR and \fBOPENSSL_version_build_metadata()\fR return
the values of \fB\s-1OPENSSL_VERSION_PRE_RELEASE\s0\fR and
\&\fB\s-1OPENSSL_VERSION_BUILD_METADATA\s0\fR respectively as constant strings.
For any of them that is undefined, the empty string is returned.
.PP
\&\fBOpenSSL_version()\fR returns constant strings.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBcrypto\fR\|(7)
.SH "HISTORY"
.IX Header "HISTORY"
The macros and functions described here were added in OpenSSL 3.0,
except for \s-1OPENSSL_VERSION_NUMBER\s0 and \fBOpenSSL_version_num()\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018\-2022 The OpenSSL Project Authors. All Rights Reserved.
.PP
Licensed under the Apache License 2.0 (the \*(L"License\*(R").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file \s-1LICENSE\s0 in the source distribution or at
<https://www.openssl.org/source/license.html>.

.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "X509_CHECK_HOST 3ossl"
.TH X509_CHECK_HOST 3ossl "2023-09-19" "3.0.11" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
X509_check_host, X509_check_email, X509_check_ip, X509_check_ip_asc \- X.509 certificate matching
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/x509v3.h>
\&
\& int X509_check_host(X509 *, const char *name, size_t namelen,
\&                     unsigned int flags, char **peername);
\& int X509_check_email(X509 *, const char *address, size_t addresslen,
\&                      unsigned int flags);
\& int X509_check_ip(X509 *, const unsigned char *address, size_t addresslen,
\&                   unsigned int flags);
\& int X509_check_ip_asc(X509 *, const char *address, unsigned int flags);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The certificate matching functions are used to check whether a
certificate matches a given hostname, email address, or \s-1IP\s0 address.
The validity of the certificate and its trust level has to be checked by
other means.
.PP
\&\fBX509_check_host()\fR checks if the certificate Subject Alternative
Name (\s-1SAN\s0) or Subject CommonName (\s-1CN\s0) matches the specified hostname,
which must be encoded in the preferred name syntax described
in section 3.5 of \s-1RFC 1034.\s0  By default, wildcards are supported
and they match  only in the left-most label; but they may match
part of that label with an explicit prefix or suffix.  For example,
by default, the host \fBname\fR \*(L"www.example.com\*(R" would match a
certificate with a \s-1SAN\s0 or \s-1CN\s0 value of \*(L"*.example.com\*(R", \*(L"w*.example.com\*(R"
or \*(L"*w.example.com\*(R".
.PP
Per section 6.4.2 of \s-1RFC 6125,\s0 \fBname\fR values representing international
domain names must be given in A\-label form.  The \fBnamelen\fR argument
must be the number of characters in the name string or zero in which
case the length is calculated with strlen(\fBname\fR).  When \fBname\fR starts
with a dot (e.g. \*(L".example.com\*(R"), it will be matched by a certificate
valid for any sub-domain of \fBname\fR, (see also
\&\fBX509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS\fR below).
.PP
When the certificate is matched, and \fBpeername\fR is not \s-1NULL,\s0 a
pointer to a copy of the matching \s-1SAN\s0 or \s-1CN\s0 from the peer certificate
is stored at the address passed in \fBpeername\fR.  The application
is responsible for freeing the peername via \fBOPENSSL_free()\fR when it
is no longer needed.
.PP
\&\fBX509_check_email()\fR checks if the certificate matches the specified
email \fBaddress\fR. The mailbox syntax of \s-1RFC 822\s0 is supported,
comments are not allowed, and no attempt is made to normalize quoted
characters. The mailbox syntax of \s-1RFC 6531\s0 is supported for
SmtpUTF8Mailbox address in subjectAltName according to \s-1RFC 8398,\s0
with similar limitations as for \s-1RFC 822\s0 syntax, and no attempt
is made to convert from A\-label to U\-label before comparison.
The \fBaddresslen\fR argument must be the number of
characters in the address string or zero in which case the length
is calculated with strlen(\fBaddress\fR).
.PP
\&\fBX509_check_ip()\fR checks if the certificate matches a specified IPv4 or
IPv6 address.  The \fBaddress\fR array is in binary format, in network
byte order.  The length is either 4 (IPv4) or 16 (IPv6).  Only
explicitly marked addresses in the certificates are considered; \s-1IP\s0
addresses stored in \s-1DNS\s0 names and Common Names are ignored. There are
currently no \fBflags\fR that would affect the behavior of this call.
.PP
\&\fBX509_check_ip_asc()\fR is similar, except that the NUL-terminated
string \fBaddress\fR is first converted to the internal representation.
.PP
The \fBflags\fR argument is usually 0.  It can be the bitwise \s-1OR\s0 of the
flags:
.IP "\fBX509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT\fR," 4
.IX Item "X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT,"
.PD 0
.IP "\fBX509_CHECK_FLAG_NEVER_CHECK_SUBJECT\fR," 4
.IX Item "X509_CHECK_FLAG_NEVER_CHECK_SUBJECT,"
.IP "\fBX509_CHECK_FLAG_NO_WILDCARDS\fR," 4
.IX Item "X509_CHECK_FLAG_NO_WILDCARDS,"
.IP "\fBX509_CHECK_FLAG_NO_PARTIAL_WILDCARDS\fR," 4
.IX Item "X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS,"
.IP "\fBX509_CHECK_FLAG_MULTI_LABEL_WILDCARDS\fR." 4
.IX Item "X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS."
.IP "\fBX509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS\fR." 4
.IX Item "X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS."
.PD
.PP
The \fBX509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT\fR flag causes the function
to consider the subject \s-1DN\s0 even if the certificate contains at least
one subject alternative name of the right type (\s-1DNS\s0 name or email
address as appropriate); the default is to ignore the subject \s-1DN\s0
when at least one corresponding subject alternative names is present.
.PP
The \fBX509_CHECK_FLAG_NEVER_CHECK_SUBJECT\fR flag causes the function to never
consider the subject \s-1DN\s0 even if the certificate contains no subject alternative
names of the right type (\s-1DNS\s0 name or email address as appropriate); the default
is to use the subject \s-1DN\s0 when no corresponding subject alternative names are
present.
If both \fBX509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT\fR and
\&\fBX509_CHECK_FLAG_NEVER_CHECK_SUBJECT\fR are specified, the latter takes
precedence and the subject \s-1DN\s0 is not checked for matching names.
.PP
If set, \fBX509_CHECK_FLAG_NO_WILDCARDS\fR disables wildcard
expansion; this only applies to \fBX509_check_host\fR.
.PP
If set, \fBX509_CHECK_FLAG_NO_PARTIAL_WILDCARDS\fR suppresses support
for \*(L"*\*(R" as wildcard pattern in labels that have a prefix or suffix,
such as: \*(L"www*\*(R" or \*(L"*www\*(R"; this only applies to \fBX509_check_host\fR.
.PP
If set, \fBX509_CHECK_FLAG_MULTI_LABEL_WILDCARDS\fR allows a \*(L"*\*(R" that
constitutes the complete label of a \s-1DNS\s0 name (e.g. \*(L"*.example.com\*(R")
to match more than one label in \fBname\fR; this flag only applies
to \fBX509_check_host\fR.
.PP
If set, \fBX509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS\fR restricts \fBname\fR
values which start with \*(L".\*(R", that would otherwise match any sub-domain
in the peer certificate, to only match direct child sub-domains.
Thus, for instance, with this flag set a \fBname\fR of \*(L".example.com\*(R"
would match a peer certificate with a \s-1DNS\s0 name of \*(L"www.example.com\*(R",
but would not match a peer certificate with a \s-1DNS\s0 name of
\&\*(L"www.sub.example.com\*(R"; this flag only applies to \fBX509_check_host\fR.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
The functions return 1 for a successful match, 0 for a failed match
and \-1 for an internal error: typically a memory allocation failure
or an \s-1ASN.1\s0 decoding error.
.PP
All functions can also return \-2 if the input is malformed. For example,
\&\fBX509_check_host()\fR returns \-2 if the provided \fBname\fR contains embedded
NULs.
.SH "NOTES"
.IX Header "NOTES"
Applications are encouraged to use \fBX509_VERIFY_PARAM_set1_host()\fR
rather than explicitly calling \fBX509_check_host\fR\|(3). Hostname
checks may be out of scope with the \s-1\fBDANE\-EE\s0\fR\|(3) certificate usage,
and the internal checks will be suppressed as appropriate when
\&\s-1DANE\s0 support is enabled.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSSL_get_verify_result\fR\|(3),
\&\fBX509_VERIFY_PARAM_set1_host\fR\|(3),
\&\fBX509_VERIFY_PARAM_add1_host\fR\|(3),
\&\fBX509_VERIFY_PARAM_set1_email\fR\|(3),
\&\fBX509_VERIFY_PARAM_set1_ip\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
These functions were added in OpenSSL 1.0.2.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2012\-2022 The OpenSSL Project Authors. All Rights Reserved.
.PP
Licensed under the Apache License 2.0 (the \*(L"License\*(R").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file \s-1LICENSE\s0 in the source distribution or at
<https://www.openssl.org/source/license.html>.

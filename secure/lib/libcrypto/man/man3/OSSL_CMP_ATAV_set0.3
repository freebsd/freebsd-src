.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "OSSL_CMP_ATAV_SET0 3ossl"
.TH OSSL_CMP_ATAV_SET0 3ossl 2025-07-01 3.5.1 OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
OSSL_CMP_ATAV,
OSSL_CMP_ATAV_create,
OSSL_CMP_ATAV_set0,
OSSL_CMP_ATAV_get0_type,
OSSL_CMP_ATAV_get0_value,
OSSL_CMP_ATAV_new_algId,
OSSL_CMP_ATAV_get0_algId,
OSSL_CMP_ATAV_new_rsaKeyLen,
OSSL_CMP_ATAV_get_rsaKeyLen,
OSSL_CMP_ATAVS,
OSSL_CMP_ATAV_push1,
OSSL_CMP_ATAV_free
\&\- OSSL_CMP_ATAV utility functions
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/cmp.h>
\&
\& typedef OSSL_CRMF_ATTRIBUTETYPEANDVALUE OSSL_CMP_ATAV;
\& OSSL_CMP_ATAV *OSSL_CMP_ATAV_create(ASN1_OBJECT *type, ASN1_TYPE *value);
\& void OSSL_CMP_ATAV_set0(OSSL_CMP_ATAV *atav, ASN1_OBJECT *type,
\&                         ASN1_TYPE *value);
\& ASN1_OBJECT *OSSL_CMP_ATAV_get0_type(const OSSL_CMP_ATAV *atav);
\& ASN1_TYPE *OSSL_CMP_ATAV_get0_value(const OSSL_CMP_ATAV *atav);
\&
\& OSSL_CMP_ATAV *OSSL_CMP_ATAV_new_algId(const X509_ALGOR *alg);
\& X509_ALGOR *OSSL_CMP_ATAV_get0_algId(const OSSL_CMP_ATAV *atav);
\& OSSL_CMP_ATAV *OSSL_CMP_ATAV_new_rsaKeyLen(int len);
\& int OSSL_CMP_ATAV_get_rsaKeyLen(const OSSL_CMP_ATAV *atav);
\&
\& typedef STACK_OF(OSSL_CRMF_ATTRIBUTETYPEANDVALUE) OSSL_CMP_ATAVS;
\& int OSSL_CMP_ATAV_push1(OSSL_CMP_ATAVS **sk_p, const OSSL_CMP_ATAV *atav);
\& void OSSL_CMP_ATAV_free(OSSL_CMP_ATAV *atav);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fBOSSL_CMP_ATAV\fR is a short hand of \fBOSSL_CRMF_ATTRIBUTETYPEANDVALUE\fR,
defined in RFC 4211 Appendix B.
It is typically used in CertRequest structures,
but also in CertReqTemplateContent structures for key specifications.
.PP
\&\fBOSSL_CMP_ATAV_create()\fR creates a new \fBOSSL_CMP_ATAV\fR structure and fills it in.
It combines \fBOSSL_CMP_ATAV_new()\fR and \fBOSSL_CMP_ATAV_set0()\fR.
.PP
\&\fBOSSL_CMP_ATAV_set0()\fR sets the \fIatav\fR with an infoType of \fItype\fR and an
infoValue of \fIvalue\fR.
The pointers \fItype\fR and \fIvalue\fR may be NULL, otherwise
they must \fBnot\fR be freed up after the call because their ownership
is transferred to \fIatav\fR. The \fIitav\fR pointer must not be NULL.
.PP
\&\fBOSSL_CMP_ATAV_get0_type()\fR returns a direct pointer to the infoType
in the \fIatav\fR unless it is NULL.
.PP
\&\fBOSSL_CMP_ATAV_get0_value()\fR returns a direct pointer to the infoValue
in the \fIatav\fR as generic \fBASN1_TYPE\fR pointer unless \fIatav\fR is NULL.
.PP
\&\fBOSSL_CMP_ATAV_new_algId()\fR creates a new \fBOSSL_CMP_ATAV\fR structure of type
\&\fBalgId\fR and fills it in with a copy of the given \fIalg\fR.
.PP
\&\fBOSSL_CMP_ATAV_get0_algId()\fR returns
a direct pointer to the algId infoValue in the \fIatav\fR of type \fBX509_ALGOR\fR
or NULL if \fIatav\fR is NULL or does not contain an algId.
.PP
\&\fBOSSL_CMP_ATAV_new_rsaKeyLen()\fR creates a new \fBOSSL_CMP_ATAV\fR structure of type
\&\fBrsaKeyLen\fR and fills it in with the given \fIlen\fR, which must be positive.
.PP
\&\fBOSSL_CMP_ATAV_get_rsaKeyLen()\fR returns
the RSA key length in rsaKeyLen infoValue in the \fIatav\fR,
\&\-1 if \fIatav\fR is NULL or does not contain an rsaKeyLen or cannot be parsed,
or \-2 if the value is less than 1 or is greater than INT_MAX.
.PP
\&\fBOSSL_CMP_ATAV_push1()\fR pushes a copy of \fIatav\fR to the stack of \fBOSSL_CMP_ATAV\fR
pointed to by \fI*sk_p\fR. It creates a new stack if \fI*sk_p\fR points to NULL.
.PP
\&\fBOSSL_CMP_ATAV_free()\fR deallocates \fIatav\fR. It is defined as a macro.
.SH NOTES
.IX Header "NOTES"
CMP is defined in RFC 4210. CRMF is defined in RFC 4211.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBOSSL_CMP_ATAV_create()\fR,
\&\fBOSSL_CMP_ATAV_new_algId()\fR, and \fBOSSL_CMP_ATAV_new_rsaKeyLen()\fR
return a pointer to the ATAV structure on success, or NULL on error.
.PP
\&\fBOSSL_CMP_ATAV_set0()\fR and \fBOSSL_CMP_ATAV_free()\fR do not return a value.
.PP
\&\fBOSSL_CMP_ATAV_get0_type()\fR, \fBOSSL_CMP_ATAV_get0_value()\fR, and
\&\fBOSSL_CMP_ATAV_get0_algId()\fR
return the respective pointer or NULL if their input is NULL.
.PP
\&\fBOSSL_CMP_ATAV_get_rsaKeyLen()\fR return a key length in bits or < 0 on error.
.PP
\&\fBOSSL_CMP_ATAV_push1()\fR returns 1 on success, 0 on error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBOSSL_CMP_ITAV_new0_certReqTemplate\fR\|(3), \fBASN1_TYPE_set\fR\|(3)
.SH HISTORY
.IX Header "HISTORY"
The \fBOSSL_CMP_ATAV\fR type and related functions were added in OpenSSL 3.4.
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2022\-2024 The OpenSSL Project Authors. All Rights Reserved.
.PP
Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
<https://www.openssl.org/source/license.html>.
